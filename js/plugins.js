// Generated by RPG Maker.
// Do not edit this file directly.
var $plugins =
[
{"name":"GALV_CamControlMZ","status":false,"description":"(v.1.7) Allows greater control over where the game camera is focused. View documentation for plugin commands.","parameters":{"useZoom":"true","bZoom":"1"}},
{"name":"pixi-filters","status":false,"description":"","parameters":{}},
{"name":"VisuMZ_0_CoreEngine","status":true,"description":"[RPG Maker MZ] [Tier 0] [Version 1.74] [CoreEngine]","parameters":{"BreakHead":"----------------------------------","CoreEngine":"Plugin Parameters","ATTENTION":"READ THE HELP FILE","BreakSettings":"----------------------------------","QoL:struct":"{\"PlayTest\":\"\",\"NewGameBoot:eval\":\"false\",\"ForceNoPlayTest:eval\":\"false\",\"OpenConsole:eval\":\"false\",\"F6key:eval\":\"true\",\"F7key:eval\":\"false\",\"NewGameCommonEvent:num\":\"0\",\"BattleTest\":\"\",\"BTestItems:eval\":\"true\",\"BTestWeapons:eval\":\"true\",\"BTestArmors:eval\":\"true\",\"BTestAddedQuantity:num\":\"90\",\"DigitGrouping\":\"\",\"DigitGroupingStandardText:eval\":\"false\",\"DigitGroupingExText:eval\":\"false\",\"DigitGroupingDamageSprites:eval\":\"false\",\"DigitGroupingGaugeSprites:eval\":\"false\",\"DigitGroupingLocale:str\":\"en-US\",\"PlayerBenefit\":\"\",\"EncounterRateMinimum:num\":\"10\",\"EscapeAlways:eval\":\"true\",\"ImprovedAccuracySystem:eval\":\"true\",\"AccuracyBoost:eval\":\"true\",\"LevelUpFullHp:eval\":\"true\",\"LevelUpFullMp:eval\":\"true\",\"Pictures\":\"\",\"AntiZoomPictures:eval\":\"true\",\"PictureContainers\":\"\",\"DetachBattlePictureContainer:eval\":\"false\",\"DetachMapPictureContainer:eval\":\"false\",\"Misc\":\"\",\"AnimationMirrorOffset:eval\":\"false\",\"AutoStretch:str\":\"stretch\",\"FontShadows:eval\":\"false\",\"FontSmoothing:eval\":\"false\",\"FontWidthFix:eval\":\"true\",\"KeyItemProtect:eval\":\"true\",\"MapNameTextCode:eval\":\"true\",\"ModernControls:eval\":\"false\",\"MvAnimationRate:num\":\"4\",\"NewGameCommonEventAll:num\":\"0\",\"NoTileShadows:eval\":\"false\",\"PixelateImageRendering:eval\":\"true\",\"RequireFocus:eval\":\"false\",\"ShortcutScripts:eval\":\"true\",\"SmartEventCollisionPriority:eval\":\"true\",\"SubfolderParse:eval\":\"true\"}","BattleSystem:str":"database","Color:struct":"{\"BasicColors\":\"\",\"ColorNormal:str\":\"0\",\"ColorSystem:str\":\"16\",\"ColorCrisis:str\":\"17\",\"ColorDeath:str\":\"18\",\"ColorGaugeBack:str\":\"19\",\"ColorHPGauge1:str\":\"20\",\"ColorHPGauge2:str\":\"21\",\"ColorMPGauge1:str\":\"22\",\"ColorMPGauge2:str\":\"23\",\"ColorMPCost:str\":\"23\",\"ColorPowerUp:str\":\"24\",\"ColorPowerDown:str\":\"25\",\"ColorCTGauge1:str\":\"26\",\"ColorCTGauge2:str\":\"27\",\"ColorTPGauge1:str\":\"28\",\"ColorTPGauge2:str\":\"29\",\"ColorTPCost:str\":\"29\",\"ColorPending:str\":\"#2a847d\",\"ColorExpGauge1:str\":\"30\",\"ColorExpGauge2:str\":\"31\",\"ColorMaxLvGauge1:str\":\"14\",\"ColorMaxLvGauge2:str\":\"6\",\"AlphaColors\":\"\",\"OutlineColor:str\":\"rgba(0, 0, 0, 0.6)\",\"OutlineColorGauge:str\":\"rgba(0, 0, 0, 1.0)\",\"DimColor1:str\":\"rgba(0, 0, 0, 0.6)\",\"DimColor2:str\":\"rgba(0, 0, 0, 0)\",\"ItemBackColor1:str\":\"rgba(32, 32, 32, 0.5)\",\"ItemBackColor2:str\":\"rgba(0, 0, 0, 0.5)\",\"ConditionalColors\":\"\",\"ActorHPColor:func\":\"\\\"// Set the variables used in this function.\\\\nlet actor = arguments[0];\\\\n\\\\n// Check if the actor exists. If not, return normal.\\\\nif (!actor) {\\\\n    return this.normalColor();\\\\n\\\\n// If the actor is dead, return death color.\\\\n} else if (actor.isDead()) {\\\\n    return this.deathColor();\\\\n\\\\n// If the actor is dying, return crisis color.\\\\n} else if (actor.isDying()) {\\\\n    return this.crisisColor();\\\\n\\\\n// Otherwise, return the normal color.\\\\n} else {\\\\n    return this.normalColor();\\\\n}\\\"\",\"ActorMPColor:func\":\"\\\"// Set the variables used in this function.\\\\nlet actor = arguments[0];\\\\n\\\\n// Check if the actor exists. If not, return normal.\\\\nif (!actor) {\\\\n    return this.normalColor();\\\\n\\\\n// If MP rate is below 25%, return crisis color.\\\\n} else if (actor.mpRate() < 0.25) {\\\\n    return this.crisisColor();\\\\n\\\\n// Otherwise, return the normal color.\\\\n} else {\\\\n    return this.normalColor();\\\\n}\\\"\",\"ActorTPColor:func\":\"\\\"// Set the variables used in this function.\\\\nlet actor = arguments[0];\\\\n\\\\n// Check if the actor exists. If not, return normal.\\\\nif (!actor) {\\\\n    return this.normalColor();\\\\n\\\\n// If TP rate is below 25%, return crisis color.\\\\n} else if (actor.tpRate() < 0.25) {\\\\n    return this.crisisColor();\\\\n\\\\n// Otherwise, return the normal color.\\\\n} else {\\\\n    return this.normalColor();\\\\n}\\\"\",\"ParamChange:func\":\"\\\"// Set the variables used in this function.\\\\nlet change = arguments[0];\\\\n\\\\n// If a positive change, use power up color.\\\\nif (change > 0) {\\\\n    return this.powerUpColor();\\\\n\\\\n// If a negative change, use power down color.\\\\n} else if (change < 0) {\\\\n    return this.powerDownColor();\\\\n\\\\n// Otherwise, return the normal color.\\\\n} else {\\\\n    return this.normalColor();\\\\n}\\\"\",\"DamageColor:func\":\"\\\"// Set the variables used in this function.\\\\nlet colorType = arguments[0];\\\\n\\\\n// Check the value of the color type\\\\n// and return an appropriate color.\\\\nswitch (colorType) {\\\\n\\\\n    case 0: // HP damage\\\\n        return \\\\\\\"#ffffff\\\\\\\";\\\\n\\\\n    case 1: // HP recover\\\\n        return \\\\\\\"#b9ffb5\\\\\\\";\\\\n\\\\n    case 2: // MP damage\\\\n        return \\\\\\\"#bb88bb\\\\\\\";\\\\n\\\\n    case 3: // MP recover\\\\n        return \\\\\\\"#80b0ff\\\\\\\";\\\\n\\\\n    default:\\\\n        return \\\\\\\"#808080\\\\\\\";\\\\n}\\\"\"}","Gold:struct":"{\"GoldMax:num\":\"999999999\",\"GoldFontSize:num\":\"24\",\"GoldIcon:num\":\"1\",\"GoldOverlap:str\":\"A Lot\",\"ItemStyle:eval\":\"true\"}","ImgLoad:struct":"{\"animations:arraystr\":\"[]\",\"battlebacks1:arraystr\":\"[]\",\"battlebacks2:arraystr\":\"[]\",\"characters:arraystr\":\"[]\",\"enemies:arraystr\":\"[]\",\"faces:arraystr\":\"[]\",\"parallaxes:arraystr\":\"[]\",\"pictures:arraystr\":\"[\\\"textboxTest\\\"]\",\"sv_actors:arraystr\":\"[]\",\"sv_enemies:arraystr\":\"[]\",\"system:arraystr\":\"[\\\"Balloon\\\",\\\"IconSet\\\"]\",\"tilesets:arraystr\":\"[]\",\"titles1:arraystr\":\"[]\",\"titles2:arraystr\":\"[]\"}","KeyboardInput:struct":"{\"Controls\":\"\",\"WASD:eval\":\"true\",\"DashToggleR:eval\":\"false\",\"NameInput\":\"\",\"EnableNameInput:eval\":\"true\",\"DefaultMode:str\":\"keyboard\",\"QwertyLayout:eval\":\"true\",\"NameInputMessage:eval\":\"\\\"\\\"\",\"BannedWords:arraystr\":\"[]\",\"NumberInput\":\"\",\"EnableNumberInput:eval\":\"true\",\"ButtonAssist\":\"\",\"Keyboard:str\":\"Keyboard\",\"Manual:str\":\"Manual\"}","MenuBg:struct":"{\"BlurStrength:num\":\"1\",\"Scene_Menu:struct\":\"{\\\"SnapshotOpacity:num\\\":\\\"192\\\",\\\"BgFilename1:str\\\":\\\"\\\",\\\"BgFilename2:str\\\":\\\"\\\"}\",\"Scene_Item:struct\":\"{\\\"SnapshotOpacity:num\\\":\\\"255\\\",\\\"BgFilename1:str\\\":\\\"ALPH_invbg\\\",\\\"BgFilename2:str\\\":\\\"\\\"}\",\"Scene_Skill:struct\":\"{\\\"SnapshotOpacity:num\\\":\\\"192\\\",\\\"BgFilename1:str\\\":\\\"\\\",\\\"BgFilename2:str\\\":\\\"\\\"}\",\"Scene_Equip:struct\":\"{\\\"SnapshotOpacity:num\\\":\\\"192\\\",\\\"BgFilename1:str\\\":\\\"\\\",\\\"BgFilename2:str\\\":\\\"\\\"}\",\"Scene_Status:struct\":\"{\\\"SnapshotOpacity:num\\\":\\\"192\\\",\\\"BgFilename1:str\\\":\\\"\\\",\\\"BgFilename2:str\\\":\\\"\\\"}\",\"Scene_Options:struct\":\"{\\\"SnapshotOpacity:num\\\":\\\"192\\\",\\\"BgFilename1:str\\\":\\\"\\\",\\\"BgFilename2:str\\\":\\\"\\\"}\",\"Scene_Save:struct\":\"{\\\"SnapshotOpacity:num\\\":\\\"192\\\",\\\"BgFilename1:str\\\":\\\"ALPH_black\\\",\\\"BgFilename2:str\\\":\\\"\\\"}\",\"Scene_Load:struct\":\"{\\\"SnapshotOpacity:num\\\":\\\"192\\\",\\\"BgFilename1:str\\\":\\\"ALPH_black\\\",\\\"BgFilename2:str\\\":\\\"\\\"}\",\"Scene_GameEnd:struct\":\"{\\\"SnapshotOpacity:num\\\":\\\"128\\\",\\\"BgFilename1:str\\\":\\\"\\\",\\\"BgFilename2:str\\\":\\\"\\\"}\",\"Scene_Shop:struct\":\"{\\\"SnapshotOpacity:num\\\":\\\"192\\\",\\\"BgFilename1:str\\\":\\\"\\\",\\\"BgFilename2:str\\\":\\\"\\\"}\",\"Scene_Name:struct\":\"{\\\"SnapshotOpacity:num\\\":\\\"192\\\",\\\"BgFilename1:str\\\":\\\"\\\",\\\"BgFilename2:str\\\":\\\"\\\"}\",\"Scene_Unlisted:struct\":\"{\\\"SnapshotOpacity:num\\\":\\\"192\\\",\\\"BgFilename1:str\\\":\\\"\\\",\\\"BgFilename2:str\\\":\\\"\\\"}\"}","ButtonAssist:struct":"{\"General\":\"\",\"Enable:eval\":\"false\",\"Location:str\":\"bottom\",\"BgType:num\":\"0\",\"Text\":\"\",\"TextFmt:str\":\"%1:%2\",\"MultiKeyFmt:str\":\"%1/%2\",\"OkText:str\":\"Select\",\"CancelText:str\":\"Back\",\"SwitchActorText:str\":\"Switch Ally\",\"Keys\":\"\",\"KeyUnlisted:str\":\"\\\\}❪%1❫\\\\{\",\"KeyUP:str\":\"^\",\"KeyDOWN:str\":\"v\",\"KeyLEFT:str\":\"<<\",\"KeyRIGHT:str\":\">>\",\"KeySHIFT:str\":\"\\\\}❪SHIFT❫\\\\{\",\"KeyTAB:str\":\"\\\\}❪TAB❫\\\\{\",\"KeyA:str\":\"A\",\"KeyB:str\":\"B\",\"KeyC:str\":\"C\",\"KeyD:str\":\"D\",\"KeyE:str\":\"E\",\"KeyF:str\":\"F\",\"KeyG:str\":\"G\",\"KeyH:str\":\"H\",\"KeyI:str\":\"I\",\"KeyJ:str\":\"J\",\"KeyK:str\":\"K\",\"KeyL:str\":\"L\",\"KeyM:str\":\"M\",\"KeyN:str\":\"N\",\"KeyO:str\":\"O\",\"KeyP:str\":\"P\",\"KeyQ:str\":\"Q\",\"KeyR:str\":\"R\",\"KeyS:str\":\"S\",\"KeyT:str\":\"T\",\"KeyU:str\":\"U\",\"KeyV:str\":\"V\",\"KeyW:str\":\"W\",\"KeyX:str\":\"X\",\"KeyY:str\":\"Y\",\"KeyZ:str\":\"Z\"}","ControllerButtons:arraystruct":"[]","MenuLayout:struct":"{\"Title:struct\":\"{\\\"TitleScreen\\\":\\\"\\\",\\\"DocumentTitleFmt:str\\\":\\\"%1: %2 - Version %3\\\",\\\"Subtitle:str\\\":\\\"Subtitle\\\",\\\"Version:str\\\":\\\"0.00\\\",\\\"drawGameTitle:func\\\":\\\"\\\\\\\"const x = 20;\\\\\\\\nconst y = Graphics.height / 4;\\\\\\\\nconst maxWidth = Graphics.width - x * 2;\\\\\\\\nconst text = $dataSystem.gameTitle;\\\\\\\\nconst bitmap = this._gameTitleSprite.bitmap;\\\\\\\\nbitmap.fontFace = $gameSystem.mainFontFace();\\\\\\\\nbitmap.outlineColor = \\\\\\\\\\\\\\\"black\\\\\\\\\\\\\\\";\\\\\\\\nbitmap.outlineWidth = 8;\\\\\\\\nbitmap.fontSize = 72;\\\\\\\\nbitmap.drawText(text, x, y, maxWidth, 48, \\\\\\\\\\\\\\\"center\\\\\\\\\\\\\\\");\\\\\\\"\\\",\\\"drawGameSubtitle:func\\\":\\\"\\\\\\\"const x = 20;\\\\\\\\nconst y = Graphics.height / 4 + 72;\\\\\\\\nconst maxWidth = Graphics.width - x * 2;\\\\\\\\nconst text = Scene_Title.subtitle;\\\\\\\\nconst bitmap = this._gameTitleSprite.bitmap;\\\\\\\\nbitmap.fontFace = $gameSystem.mainFontFace();\\\\\\\\nbitmap.outlineColor = \\\\\\\\\\\\\\\"black\\\\\\\\\\\\\\\";\\\\\\\\nbitmap.outlineWidth = 6;\\\\\\\\nbitmap.fontSize = 48;\\\\\\\\nbitmap.drawText(text, x, y, maxWidth, 48, \\\\\\\\\\\\\\\"center\\\\\\\\\\\\\\\");\\\\\\\"\\\",\\\"drawGameVersion:func\\\":\\\"\\\\\\\"const bitmap = this._gameTitleSprite.bitmap;\\\\\\\\nconst x = 0;\\\\\\\\nconst y = Graphics.height - 20;\\\\\\\\nconst width = Math.round(Graphics.width / 4);\\\\\\\\nconst height = 20;\\\\\\\\nconst c1 = ColorManager.dimColor1();\\\\\\\\nconst c2 = ColorManager.dimColor2();\\\\\\\\nconst text = 'Version ' + Scene_Title.version;\\\\\\\\nbitmap.gradientFillRect(x, y, width, height, c1, c2);\\\\\\\\nbitmap.fontFace = $gameSystem.mainFontFace();\\\\\\\\nbitmap.outlineColor = \\\\\\\\\\\\\\\"black\\\\\\\\\\\\\\\";\\\\\\\\nbitmap.outlineWidth = 3;\\\\\\\\nbitmap.fontSize = 16;\\\\\\\\nbitmap.drawText(text, x + 4, y, Graphics.width, height, \\\\\\\\\\\\\\\"left\\\\\\\\\\\\\\\");\\\\\\\"\\\",\\\"CommandRect:func\\\":\\\"\\\\\\\"const offsetX = $dataSystem.titleCommandWindow.offsetX;\\\\\\\\nconst offsetY = $dataSystem.titleCommandWindow.offsetY;\\\\\\\\nconst rows = this.commandWindowRows();\\\\\\\\nconst width = this.mainCommandWidth();\\\\\\\\nconst height = this.calcWindowHeight(rows, true);\\\\\\\\nconst x = (Graphics.boxWidth - width) / 2 + offsetX;\\\\\\\\nconst y = Graphics.boxHeight - height - 96 + offsetY;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"ButtonFadeSpeed:num\\\":\\\"1\\\"}\",\"MainMenu:struct\":\"{\\\"CommandWindow\\\":\\\"\\\",\\\"CommandBgType:num\\\":\\\"0\\\",\\\"CommandRect:func\\\":\\\"\\\\\\\"const width = this.mainCommandWidth();\\\\\\\\nconst height = this.mainAreaHeight() - this.goldWindowRect().height;\\\\\\\\nconst x = this.isRightInputMode() ? Graphics.boxWidth - width : 0;\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"GoldWindow\\\":\\\"\\\",\\\"GoldBgType:num\\\":\\\"0\\\",\\\"GoldRect:func\\\":\\\"\\\\\\\"const rows = 1;\\\\\\\\nconst width = this.mainCommandWidth();\\\\\\\\nconst height = this.calcWindowHeight(rows, true);\\\\\\\\nconst x = this.isRightInputMode() ? Graphics.boxWidth - width : 0;\\\\\\\\nconst y = this.mainAreaBottom() - height;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"StatusWindow\\\":\\\"\\\",\\\"StatusBgType:num\\\":\\\"0\\\",\\\"StatusRect:func\\\":\\\"\\\\\\\"const width = Graphics.boxWidth - this.mainCommandWidth();\\\\\\\\nconst height = this.mainAreaHeight();\\\\\\\\nconst x = this.isRightInputMode() ? 0 : Graphics.boxWidth - width;\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\"}\",\"ItemMenu:struct\":\"{\\\"HelpWindow\\\":\\\"\\\",\\\"HelpBgType:num\\\":\\\"2\\\",\\\"HelpRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this.helpAreaTop();\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.helpAreaHeight();\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"CategoryWindow\\\":\\\"\\\",\\\"CategoryBgType:num\\\":\\\"2\\\",\\\"CategoryRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nconst rows = 1;\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.calcWindowHeight(rows, true);\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"ItemWindow\\\":\\\"\\\",\\\"ItemBgType:num\\\":\\\"2\\\",\\\"ItemRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this._categoryWindow.y + this._categoryWindow.height;\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.mainAreaBottom() - y;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"ActorWindow\\\":\\\"\\\",\\\"ActorBgType:num\\\":\\\"1\\\",\\\"ActorRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = 470;\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.mainAreaHeight();\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\"}\",\"SkillMenu:struct\":\"{\\\"HelpWindow\\\":\\\"\\\",\\\"HelpBgType:num\\\":\\\"0\\\",\\\"HelpRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this.helpAreaTop();\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.helpAreaHeight();\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"SkillTypeWindow\\\":\\\"\\\",\\\"SkillTypeBgType:num\\\":\\\"0\\\",\\\"SkillTypeRect:func\\\":\\\"\\\\\\\"const rows = 3;\\\\\\\\nconst width = this.mainCommandWidth();\\\\\\\\nconst height = this.calcWindowHeight(rows, true);\\\\\\\\nconst x = this.isRightInputMode() ? Graphics.boxWidth - width : 0;\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"StatusWindow\\\":\\\"\\\",\\\"StatusBgType:num\\\":\\\"0\\\",\\\"StatusRect:func\\\":\\\"\\\\\\\"const width = Graphics.boxWidth - this.mainCommandWidth();\\\\\\\\nconst height = this._skillTypeWindow.height;\\\\\\\\nconst x = this.isRightInputMode() ? 0 : Graphics.boxWidth - width;\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"ItemWindow\\\":\\\"\\\",\\\"ItemBgType:num\\\":\\\"0\\\",\\\"ItemRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this._statusWindow.y + this._statusWindow.height;\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.mainAreaHeight() - this._statusWindow.height;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"ActorWindow\\\":\\\"\\\",\\\"ActorBgType:num\\\":\\\"0\\\",\\\"ActorRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.mainAreaHeight();\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\"}\",\"EquipMenu:struct\":\"{\\\"HelpWindow\\\":\\\"\\\",\\\"HelpBgType:num\\\":\\\"0\\\",\\\"HelpRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this.helpAreaTop();\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.helpAreaHeight();\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"StatusWindow\\\":\\\"\\\",\\\"StatusBgType:num\\\":\\\"0\\\",\\\"StatusRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nconst width = this.statusWidth();\\\\\\\\nconst height = this.mainAreaHeight();\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"CommandWindow\\\":\\\"\\\",\\\"CommandBgType:num\\\":\\\"0\\\",\\\"CommandRect:func\\\":\\\"\\\\\\\"const x = this.statusWidth();\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nconst rows = 1;\\\\\\\\nconst width = Graphics.boxWidth - this.statusWidth();\\\\\\\\nconst height = this.calcWindowHeight(rows, true);\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"SlotWindow\\\":\\\"\\\",\\\"SlotBgType:num\\\":\\\"0\\\",\\\"SlotRect:func\\\":\\\"\\\\\\\"const commandWindowRect = this.commandWindowRect();\\\\\\\\nconst x = this.statusWidth();\\\\\\\\nconst y = commandWindowRect.y + commandWindowRect.height;\\\\\\\\nconst width = Graphics.boxWidth - this.statusWidth();\\\\\\\\nconst height = this.mainAreaHeight() - commandWindowRect.height;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"ItemWindow\\\":\\\"\\\",\\\"ItemBgType:num\\\":\\\"0\\\",\\\"ItemRect:func\\\":\\\"\\\\\\\"return this.slotWindowRect();\\\\\\\"\\\"}\",\"StatusMenu:struct\":\"{\\\"ProfileWindow\\\":\\\"\\\",\\\"ProfileBgType:num\\\":\\\"0\\\",\\\"ProfileRect:func\\\":\\\"\\\\\\\"const width = Graphics.boxWidth;\\\\\\\\nconst height = this.profileHeight();\\\\\\\\nconst x = 0;\\\\\\\\nconst y = this.mainAreaBottom() - height;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"StatusWindow\\\":\\\"\\\",\\\"StatusBgType:num\\\":\\\"0\\\",\\\"StatusRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.statusParamsWindowRect().y - y;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"StatusParamsWindow\\\":\\\"\\\",\\\"StatusParamsBgType:num\\\":\\\"0\\\",\\\"StatusParamsRect:func\\\":\\\"\\\\\\\"const width = this.statusParamsWidth();\\\\\\\\nconst height = this.statusParamsHeight();\\\\\\\\nconst x = 0;\\\\\\\\nconst y = this.mainAreaBottom() - this.profileHeight() - height;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"StatusEquipWindow\\\":\\\"\\\",\\\"StatusEquipBgType:num\\\":\\\"0\\\",\\\"StatusEquipRect:func\\\":\\\"\\\\\\\"const width = Graphics.boxWidth - this.statusParamsWidth();\\\\\\\\nconst height = this.statusParamsHeight();\\\\\\\\nconst x = this.statusParamsWidth();\\\\\\\\nconst y = this.mainAreaBottom() - this.profileHeight() - height;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\"}\",\"OptionsMenu:struct\":\"{\\\"OptionsWindow\\\":\\\"\\\",\\\"OptionsBgType:num\\\":\\\"0\\\",\\\"OptionsRect:func\\\":\\\"\\\\\\\"const n = Math.min(this.maxCommands(), this.maxVisibleCommands());\\\\\\\\nconst width = 400;\\\\\\\\nconst height = this.calcWindowHeight(n, true);\\\\\\\\nconst x = (Graphics.boxWidth - width) / 2;\\\\\\\\nconst y = (Graphics.boxHeight - height) / 2;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\"}\",\"SaveMenu:struct\":\"{\\\"HelpWindow\\\":\\\"\\\",\\\"HelpBgType:num\\\":\\\"0\\\",\\\"HelpRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nconst rows = 1;\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.calcWindowHeight(rows, false);\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"ListWindow\\\":\\\"\\\",\\\"ListBgType:num\\\":\\\"0\\\",\\\"ListRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this.mainAreaTop() + this._helpWindow.height;\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.mainAreaHeight() - this._helpWindow.height;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\"}\",\"LoadMenu:struct\":\"{\\\"HelpWindow\\\":\\\"\\\",\\\"HelpBgType:num\\\":\\\"0\\\",\\\"HelpRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nconst rows = 1;\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.calcWindowHeight(rows, false);\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"ListWindow\\\":\\\"\\\",\\\"ListBgType:num\\\":\\\"0\\\",\\\"ListRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this.mainAreaTop() + this._helpWindow.height;\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.mainAreaHeight() - this._helpWindow.height;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\"}\",\"GameEnd:struct\":\"{\\\"CommandList:arraystruct\\\":\\\"[\\\\\\\"{\\\\\\\\\\\\\\\"Symbol:str\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"toTitle\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"TextStr:str\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Untitled\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"TextJS:func\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"return TextManager.toTitle;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"ShowJS:func\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"return true;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"EnableJS:func\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"return true;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"ExtJS:func\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"return null;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"CallHandlerJS:func\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"SceneManager._scene.commandToTitle();\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"{\\\\\\\\\\\\\\\"Symbol:str\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"cancel\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"TextStr:str\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Untitled\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"TextJS:func\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"return TextManager.cancel;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"ShowJS:func\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"return true;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"EnableJS:func\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"return true;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"ExtJS:func\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"return null;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"CallHandlerJS:func\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"SceneManager._scene.popScene();\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\"]\\\",\\\"CommandBgType:num\\\":\\\"0\\\",\\\"CommandRect:func\\\":\\\"\\\\\\\"const rows = 2;\\\\\\\\nconst width = this.mainCommandWidth();\\\\\\\\nconst height = this.calcWindowHeight(rows, true);\\\\\\\\nconst x = (Graphics.boxWidth - width) / 2;\\\\\\\\nconst y = (Graphics.boxHeight - height) / 2;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\"}\",\"ShopMenu:struct\":\"{\\\"HelpWindow\\\":\\\"\\\",\\\"HelpBgType:num\\\":\\\"0\\\",\\\"HelpRect:func\\\":\\\"\\\\\\\"const wx = 0;\\\\\\\\nconst wy = this.helpAreaTop();\\\\\\\\nconst ww = Graphics.boxWidth;\\\\\\\\nconst wh = this.helpAreaHeight();\\\\\\\\nreturn new Rectangle(wx, wy, ww, wh);\\\\\\\"\\\",\\\"GoldWindow\\\":\\\"\\\",\\\"GoldBgType:num\\\":\\\"0\\\",\\\"GoldRect:func\\\":\\\"\\\\\\\"const rows = 1;\\\\\\\\nconst width = this.mainCommandWidth();\\\\\\\\nconst height = this.calcWindowHeight(rows, true);\\\\\\\\nconst x = Graphics.boxWidth - width;\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"CommandWindow\\\":\\\"\\\",\\\"CommandBgType:num\\\":\\\"0\\\",\\\"CommandRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this.mainAreaTop();\\\\\\\\nconst rows = 1;\\\\\\\\nconst width = this._goldWindow.x;\\\\\\\\nconst height = this.calcWindowHeight(rows, true);\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"DummyWindow\\\":\\\"\\\",\\\"DummyBgType:num\\\":\\\"0\\\",\\\"DummyRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this._commandWindow.y + this._commandWindow.height;\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.mainAreaHeight() - this._commandWindow.height;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"NumberWindow\\\":\\\"\\\",\\\"NumberBgType:num\\\":\\\"0\\\",\\\"NumberRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this._dummyWindow.y;\\\\\\\\nconst width = Graphics.boxWidth - this.statusWidth();\\\\\\\\nconst height = this._dummyWindow.height;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"StatusWindow\\\":\\\"\\\",\\\"StatusBgType:num\\\":\\\"0\\\",\\\"StatusRect:func\\\":\\\"\\\\\\\"const width = this.statusWidth();\\\\\\\\nconst height = this._dummyWindow.height;\\\\\\\\nconst x = Graphics.boxWidth - width;\\\\\\\\nconst y = this._dummyWindow.y;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"BuyWindow\\\":\\\"\\\",\\\"BuyBgType:num\\\":\\\"0\\\",\\\"BuyRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this._dummyWindow.y;\\\\\\\\nconst width = Graphics.boxWidth - this.statusWidth();\\\\\\\\nconst height = this._dummyWindow.height;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"CategoryWindow\\\":\\\"\\\",\\\"CategoryBgType:num\\\":\\\"0\\\",\\\"CategoryRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this._dummyWindow.y;\\\\\\\\nconst rows = 1;\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height = this.calcWindowHeight(rows, true);\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"SellWindow\\\":\\\"\\\",\\\"SellBgType:num\\\":\\\"0\\\",\\\"SellRect:func\\\":\\\"\\\\\\\"const x = 0;\\\\\\\\nconst y = this._categoryWindow.y + this._categoryWindow.height;\\\\\\\\nconst width = Graphics.boxWidth;\\\\\\\\nconst height =\\\\\\\\n    this.mainAreaHeight() -\\\\\\\\n    this._commandWindow.height -\\\\\\\\n    this._categoryWindow.height;\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\"}\",\"NameMenu:struct\":\"{\\\"EditWindow\\\":\\\"\\\",\\\"EditBgType:num\\\":\\\"0\\\",\\\"EditRect:func\\\":\\\"\\\\\\\"const rows = 9;\\\\\\\\nconst inputWindowHeight = this.calcWindowHeight(rows, true);\\\\\\\\nconst padding = $gameSystem.windowPadding();\\\\\\\\nconst width = 600;\\\\\\\\nconst height = Math.min(ImageManager.faceHeight + padding * 2, this.mainAreaHeight() - inputWindowHeight);\\\\\\\\nconst x = (Graphics.boxWidth - width) / 2;\\\\\\\\nconst y = (this.mainAreaHeight() - (height + inputWindowHeight)) / 2 + this.mainAreaTop();\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\",\\\"InputWindow\\\":\\\"\\\",\\\"InputBgType:num\\\":\\\"0\\\",\\\"InputRect:func\\\":\\\"\\\\\\\"const x = this._editWindow.x;\\\\\\\\nconst y = this._editWindow.y + this._editWindow.height;\\\\\\\\nconst rows = 9;\\\\\\\\nconst width = this._editWindow.width;\\\\\\\\nconst height = this.calcWindowHeight(rows, true);\\\\\\\\nreturn new Rectangle(x, y, width, height);\\\\\\\"\\\"}\"}","Param:struct":"{\"DisplayedParams:arraystr\":\"[\\\"ATK\\\",\\\"DEF\\\",\\\"MAT\\\",\\\"MDF\\\",\\\"AGI\\\",\\\"LUK\\\"]\",\"ExtDisplayedParams:arraystr\":\"[\\\"MaxHP\\\",\\\"MaxMP\\\",\\\"ATK\\\",\\\"DEF\\\",\\\"MAT\\\",\\\"MDF\\\",\\\"AGI\\\",\\\"LUK\\\"]\",\"BasicParameters\":\"\",\"CrisisRate:num\":\"0.20\",\"BasicParameterFormula:func\":\"\\\"// Determine the variables used in this calculation.\\\\nlet paramId = arguments[0];\\\\nlet base = this.paramBase(paramId);\\\\nlet plus = this.paramPlus(paramId);\\\\nlet paramRate = this.paramRate(paramId);\\\\nlet buffRate = this.paramBuffRate(paramId);\\\\nlet flatBonus = this.paramFlatBonus(paramId);\\\\n\\\\n// Formula to determine total parameter value.\\\\nlet value = (base + plus) * paramRate * buffRate + flatBonus;\\\\n\\\\n// Determine the limits\\\\nconst maxValue = this.paramMax(paramId);\\\\nconst minValue = this.paramMin(paramId);\\\\n\\\\n// Final value\\\\nreturn Math.round(value.clamp(minValue, maxValue));\\\"\",\"BasicParamCaps\":\"\",\"BasicActorParamCaps\":\"\",\"BasicActorParamMax0:str\":\"9999\",\"BasicActorParamMax1:str\":\"9999\",\"BasicActorParamMax2:str\":\"999\",\"BasicActorParamMax3:str\":\"999\",\"BasicActorParamMax4:str\":\"999\",\"BasicActorParamMax5:str\":\"999\",\"BasicActorParamMax6:str\":\"999\",\"BasicActorParamMax7:str\":\"999\",\"BasicEnemyParamCaps\":\"\",\"BasicEnemyParamMax0:str\":\"999999\",\"BasicEnemyParamMax1:str\":\"9999\",\"BasicEnemyParamMax2:str\":\"999\",\"BasicEnemyParamMax3:str\":\"999\",\"BasicEnemyParamMax4:str\":\"999\",\"BasicEnemyParamMax5:str\":\"999\",\"BasicEnemyParamMax6:str\":\"999\",\"BasicEnemyParamMax7:str\":\"999\",\"XParameters\":\"\",\"XParameterFormula:func\":\"\\\"// Determine the variables used in this calculation.\\\\nlet xparamId = arguments[0];\\\\nlet base = this.traitsSum(Game_BattlerBase.TRAIT_XPARAM, xparamId);\\\\nlet plus = this.xparamPlus(xparamId);\\\\nlet paramRate = this.xparamRate(xparamId);\\\\nlet flatBonus = this.xparamFlatBonus(xparamId);\\\\n\\\\n// Formula to determine total parameter value.\\\\nlet value = (base + plus) * paramRate + flatBonus;\\\\n\\\\n// Final value\\\\nreturn value;\\\"\",\"XParamVocab\":\"\",\"XParamVocab0:str\":\"Hit\",\"XParamVocab1:str\":\"Evasion\",\"XParamVocab2:str\":\"Critical Rate\",\"XParamVocab3:str\":\"Critical Evade\",\"XParamVocab4:str\":\"Magic Evade\",\"XParamVocab5:str\":\"Magic Reflect\",\"XParamVocab6:str\":\"Counter\",\"XParamVocab7:str\":\"HP Regen\",\"XParamVocab8:str\":\"MP Regen\",\"XParamVocab9:str\":\"TP Regen\",\"SParameters\":\"\",\"SParameterFormula:func\":\"\\\"// Determine the variables used in this calculation.\\\\nlet sparamId = arguments[0];\\\\nlet base = this.traitsPi(Game_BattlerBase.TRAIT_SPARAM, sparamId);\\\\nlet plus = this.sparamPlus(sparamId);\\\\nlet paramRate = this.sparamRate(sparamId);\\\\nlet flatBonus = this.sparamFlatBonus(sparamId);\\\\n\\\\n// Formula to determine total parameter value.\\\\nlet value = (base + plus) * paramRate + flatBonus;\\\\n\\\\n// Final value\\\\nreturn value;\\\"\",\"SParamVocab\":\"\",\"SParamVocab0:str\":\"Aggro\",\"SParamVocab1:str\":\"Guard\",\"SParamVocab2:str\":\"Recovery\",\"SParamVocab3:str\":\"Item Effect\",\"SParamVocab4:str\":\"MP Cost\",\"SParamVocab5:str\":\"TP Charge\",\"SParamVocab6:str\":\"Physical DMG\",\"SParamVocab7:str\":\"Magical DMG\",\"SParamVocab8:str\":\"Floor DMG\",\"SParamVocab9:str\":\"EXP Gain\",\"Icons\":\"\",\"DrawIcons:eval\":\"true\",\"IconParam0:str\":\"84\",\"IconParam1:str\":\"165\",\"IconParam2:str\":\"76\",\"IconParam3:str\":\"81\",\"IconParam4:str\":\"101\",\"IconParam5:str\":\"133\",\"IconParam6:str\":\"140\",\"IconParam7:str\":\"87\",\"IconXParam0:str\":\"102\",\"IconXParam1:str\":\"82\",\"IconXParam2:str\":\"78\",\"IconXParam3:str\":\"82\",\"IconXParam4:str\":\"171\",\"IconXParam5:str\":\"222\",\"IconXParam6:str\":\"77\",\"IconXParam7:str\":\"72\",\"IconXParam8:str\":\"72\",\"IconXParam9:str\":\"72\",\"IconSParam0:str\":\"5\",\"IconSParam1:str\":\"128\",\"IconSParam2:str\":\"72\",\"IconSParam3:str\":\"176\",\"IconSParam4:str\":\"165\",\"IconSParam5:str\":\"164\",\"IconSParam6:str\":\"76\",\"IconSParam7:str\":\"79\",\"IconSParam8:str\":\"141\",\"IconSParam9:str\":\"73\"}","CustomParam:arraystruct":"[\"{\\\"ParamName:str\\\":\\\"Strength\\\",\\\"Abbreviation:str\\\":\\\"str\\\",\\\"Icon:num\\\":\\\"77\\\",\\\"Type:str\\\":\\\"integer\\\",\\\"ValueJS:json\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this;\\\\\\\\n\\\\\\\\n// Calculations\\\\\\\\nreturn (user.atk * 0.75) + (user.def * 0.25);\\\\\\\"\\\"}\",\"{\\\"ParamName:str\\\":\\\"Dexterity\\\",\\\"Abbreviation:str\\\":\\\"dex\\\",\\\"Icon:num\\\":\\\"82\\\",\\\"Type:str\\\":\\\"integer\\\",\\\"ValueJS:json\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this;\\\\\\\\n\\\\\\\\n// Calculations\\\\\\\\nreturn (user.agi * 0.75) + (user.atk * 0.25);\\\\\\\"\\\"}\",\"{\\\"ParamName:str\\\":\\\"Constitution\\\",\\\"Abbreviation:str\\\":\\\"con\\\",\\\"Icon:num\\\":\\\"81\\\",\\\"Type:str\\\":\\\"integer\\\",\\\"ValueJS:json\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this;\\\\\\\\n\\\\\\\\n// Calculations\\\\\\\\nreturn (user.def * 0.75) + (user.mdf * 0.25);\\\\\\\"\\\"}\",\"{\\\"ParamName:str\\\":\\\"Intelligence\\\",\\\"Abbreviation:str\\\":\\\"int\\\",\\\"Icon:num\\\":\\\"79\\\",\\\"Type:str\\\":\\\"integer\\\",\\\"ValueJS:json\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this;\\\\\\\\n\\\\\\\\n// Calculations\\\\\\\\nreturn (user.mat * 0.75) + (user.mdf * 0.25);\\\\\\\"\\\"}\",\"{\\\"ParamName:str\\\":\\\"Wisdom\\\",\\\"Abbreviation:str\\\":\\\"wis\\\",\\\"Icon:num\\\":\\\"72\\\",\\\"Type:str\\\":\\\"integer\\\",\\\"ValueJS:json\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this;\\\\\\\\n\\\\\\\\n// Calculations\\\\\\\\nreturn (user.mdf * 0.75) + (user.luk * 0.25);\\\\\\\"\\\"}\",\"{\\\"ParamName:str\\\":\\\"Charisma\\\",\\\"Abbreviation:str\\\":\\\"cha\\\",\\\"Icon:num\\\":\\\"84\\\",\\\"Type:str\\\":\\\"integer\\\",\\\"ValueJS:json\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this;\\\\\\\\n\\\\\\\\n// Calculations\\\\\\\\nreturn (user.luk * 0.75) + (user.agi * 0.25);\\\\\\\"\\\"}\"]","ScreenResolution:struct":"{\"Troops\":\"\",\"RepositionActors:eval\":\"true\",\"RepositionEnemies:eval\":\"true\",\"RepositionEnemies130:eval\":\"false\"}","ScreenShake:struct":"{\"DefaultStyle:str\":\"random\",\"originalJS:func\":\"\\\"// Calculation\\\\nthis.x += Math.round($gameScreen.shake());\\\"\",\"randomJS:func\":\"\\\"// Calculation\\\\n// Original Formula by Aries of Sheratan\\\\nconst power = $gameScreen._shakePower * 0.75;\\\\nconst speed = $gameScreen._shakeSpeed * 0.60;\\\\nconst duration = $gameScreen._shakeDuration;\\\\nthis.x += Math.round(Math.randomInt(power) - Math.randomInt(speed)) * (Math.min(duration, 30) * 0.5);\\\\nthis.y += Math.round(Math.randomInt(power) - Math.randomInt(speed)) * (Math.min(duration, 30) * 0.5);\\\"\",\"horzJS:func\":\"\\\"// Calculation\\\\n// Original Formula by Aries of Sheratan\\\\nconst power = $gameScreen._shakePower * 0.75;\\\\nconst speed = $gameScreen._shakeSpeed * 0.60;\\\\nconst duration = $gameScreen._shakeDuration;\\\\nthis.x += Math.round(Math.randomInt(power) - Math.randomInt(speed)) * (Math.min(duration, 30) * 0.5);\\\"\",\"vertJS:func\":\"\\\"// Calculation\\\\n// Original Formula by Aries of Sheratan\\\\nconst power = $gameScreen._shakePower * 0.75;\\\\nconst speed = $gameScreen._shakeSpeed * 0.60;\\\\nconst duration = $gameScreen._shakeDuration;\\\\nthis.y += Math.round(Math.randomInt(power) - Math.randomInt(speed)) * (Math.min(duration, 30) * 0.5);\\\"\"}","TitleCommandList:arraystruct":"[\"{\\\"Symbol:str\\\":\\\"newGame\\\",\\\"TextStr:str\\\":\\\"Untitled\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"return \\\\\\\\\\\\\\\"Press Z\\\\\\\\\\\\\\\";\\\\\\\"\\\",\\\"ShowJS:func\\\":\\\"\\\\\\\"return true;\\\\\\\"\\\",\\\"EnableJS:func\\\":\\\"\\\\\\\"return true;\\\\\\\"\\\",\\\"ExtJS:func\\\":\\\"\\\\\\\"return null;\\\\\\\"\\\",\\\"CallHandlerJS:func\\\":\\\"\\\\\\\"SceneManager._scene.commandNewGame();\\\\\\\"\\\"}\"]","TitlePicButtons:arraystruct":"[]","UI:struct":"{\"UIArea\":\"\",\"FadeSpeed:num\":\"24\",\"BoxMargin:num\":\"4\",\"CommandWidth:num\":\"240\",\"BottomHelp:eval\":\"false\",\"RightMenus:eval\":\"true\",\"ShowButtons:eval\":\"false\",\"cancelShowButton:eval\":\"false\",\"menuShowButton:eval\":\"false\",\"pagedownShowButton:eval\":\"false\",\"numberShowButton:eval\":\"false\",\"ButtonHeight:num\":\"52\",\"BottomButtons:eval\":\"false\",\"SideButtons:eval\":\"true\",\"MenuObjects\":\"\",\"LvExpGauge:eval\":\"true\",\"ParamArrow:str\":\"→\",\"TextCodeSupport\":\"\",\"TextCodeClassNames:eval\":\"true\",\"TextCodeNicknames:eval\":\"true\"}","Window:struct":"{\"WindowDefaults\":\"\",\"EnableMasking:eval\":\"false\",\"LineHeight:num\":\"36\",\"ItemPadding:num\":\"8\",\"BackOpacity:num\":\"255\",\"TranslucentOpacity:num\":\"255\",\"OpenSpeed:num\":\"20\",\"ColSpacing:num\":\"8\",\"RowSpacing:num\":\"4\",\"SelectableItems\":\"\",\"ShowItemBackground:eval\":\"false\",\"ItemHeight:num\":\"8\",\"DrawItemBackgroundJS:func\":\"\\\"const rect = arguments[0];\\\\nconst c1 = ColorManager.itemBackColor1();\\\\nconst c2 = ColorManager.itemBackColor2();\\\\nconst x = rect.x;\\\\nconst y = rect.y;\\\\nconst w = rect.width;\\\\nconst h = rect.height;\\\\nthis.contentsBack.gradientFillRect(x, y, w, h, c1, c2, true);\\\\nthis.contentsBack.strokeRect(x, y, w, h, c1);\\\"\"}","jsQuickFunc:arraystruct":"[\"{\\\"FunctionName:str\\\":\\\"Example\\\",\\\"CodeJS:json\\\":\\\"\\\\\\\"// Insert this as a function anywhere you can input code\\\\\\\\n// such as Script Calls or Conditional Branch Scripts.\\\\\\\\n\\\\\\\\n// Process Code\\\\\\\\nreturn 'Example';\\\\\\\"\\\"}\",\"{\\\"FunctionName:str\\\":\\\"Bad  Code  Name\\\",\\\"CodeJS:json\\\":\\\"\\\\\\\"// If a function name has spaces in them, the spaces will\\\\\\\\n// be removed. \\\\\\\\\\\\\\\"Bad  Code  Name\\\\\\\\\\\\\\\" becomes \\\\\\\\\\\\\\\"BadeCodeName\\\\\\\\\\\\\\\".\\\\\\\\n\\\\\\\\n// Process Code\\\\\\\\nOhNoItsBadCode()\\\\\\\\n\\\\\\\\n// If a function has bad code, a fail safe will catch the\\\\\\\\n// error and display it in the console.\\\\\\\"\\\"}\",\"{\\\"FunctionName:str\\\":\\\"RandomNumber\\\",\\\"CodeJS:json\\\":\\\"\\\\\\\"// This generates a random number from 0 to itself.\\\\\\\\n// Example: RandomNumber(10)\\\\\\\\n\\\\\\\\n// Process Code\\\\\\\\nconst number = (arguments[0] || 0) + 1;\\\\\\\\nreturn Math.floor(number * Math.random());\\\\\\\"\\\"}\",\"{\\\"FunctionName:str\\\":\\\"RandomBetween\\\",\\\"CodeJS:json\\\":\\\"\\\\\\\"// This generates a random number between two arguments.\\\\\\\\n// Example: RandomNumber(5, 10)\\\\\\\\n\\\\\\\\n// Process Code\\\\\\\\nlet min = Math.min(arguments[0] || 0, arguments[1] || 0);\\\\\\\\nlet max = Math.max(arguments[0] || 0, arguments[1] || 0);\\\\\\\\nreturn Math.floor(Math.random() * (max - min + 1) + min);\\\\\\\"\\\"}\",\"{\\\"FunctionName:str\\\":\\\"RandomFrom\\\",\\\"CodeJS:json\\\":\\\"\\\\\\\"// Selects a number from the list of inserted numbers.\\\\\\\\n// Example: RandomFrom(5, 10, 15, 20)\\\\\\\\n\\\\\\\\n// Process Code\\\\\\\\nreturn arguments[Math.randomInt(arguments.length)];\\\\\\\"\\\"}\"]","BreakEnd1":"----------------------------------","End Of":"Plugin Parameters","BreakEnd2":"----------------------------------"}},
{"name":"VisuMZ_1_BattleCore","status":false,"description":"[RPG Maker MZ] [Tier 1] [Version 1.74] [BattleCore]","parameters":{"BreakHead":"----------------------------------","BattleCore":"Plugin Parameters","ATTENTION":"READ THE HELP FILE","BreakSettings":"----------------------------------","AutoBattle:struct":"{\"BattleDisplay\":\"\",\"AutoBattleMsg:str\":\"Press %1 or %2 to stop Auto Battle\",\"AutoBattleOK:str\":\"OK\",\"AutoBattleCancel:str\":\"Cancel\",\"AutoBattleBgType:num\":\"1\",\"AutoBattleRect:func\":\"\\\"const width = Graphics.width;\\\\nconst height = this.calcWindowHeight(1, false);\\\\nconst x = 0;\\\\nconst y = (Graphics.height - height) / 2;\\\\nreturn new Rectangle(x, y, width, height);\\\"\",\"Options\":\"\",\"AddOption:eval\":\"false\",\"AdjustRect:eval\":\"true\",\"StartName:str\":\"Auto Battle Start\",\"StyleName:str\":\"Auto Battle Style\",\"StyleOFF:str\":\"Attack\",\"StyleON:str\":\"Skills\"}","Damage:struct":"{\"DamageStyles\":\"\",\"DefaultDamageStyle:str\":\"Standard\",\"DamageStyleList:arraystruct\":\"[\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"Standard\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Declare Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Replace Formula\\\\\\\\\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Calculate Damage\\\\\\\\\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"Armor Scaling\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Declare Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Replace Formula\\\\\\\\\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Calculate Damage\\\\\\\\\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    // Calculate Base Armor\\\\\\\\\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    // Apply Armor to Damage\\\\\\\\\\\\\\\\n    if (armor >= 0) {\\\\\\\\\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\\\\\\\\\n    } else {\\\\\\\\\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"CT\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Multiplier\\\\\\\\\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare Values\\\\\\\\\\\\\\\\nlet value = 0;\\\\\\\\\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\\\\\\\\\nlet attackStat = 0;\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    attackStat = a.atk;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    attackStat =  a.mat;\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    attackStat =  a.def;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Calculate Damage\\\\\\\\\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\\\\\\\\\nvalue = attackStat * 4;\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\nvalue *= multiplier;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"D4\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Multiplier\\\\\\\\\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare Values\\\\\\\\\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\\\\\\\\\nlet stat = 0;\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    stat = a.atk;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    stat = a.mat;\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    stat = a.def;\\\\\\\\\\\\\\\\n    armor = 0;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    stat = a.mdf;\\\\\\\\\\\\\\\\n    armor = 0;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Calculate Damage \\\\\\\\\\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"DQ\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Multiplier\\\\\\\\\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Get Primary Stats\\\\\\\\\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\\\\\\\\\nlet stat = 1;\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    stat = a.atk;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    stat = a.mat;\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    stat = a.def;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    stat = a.mdf;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Check for Recovery\\\\\\\\\\\\\\\\nif (this.isRecover()) {\\\\\\\\\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Calculate Damage\\\\\\\\\\\\\\\\nlet value = 0;\\\\\\\\\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\\\\\\\\\n    // Plink Damage\\\\\\\\\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\\\\\\\\\n    value = baseline / 3;\\\\\\\\\\\\\\\\n} else {\\\\\\\\\\\\\\\\n    // Normal Damage\\\\\\\\\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\\\\\\\\\n    value = baseline / 2;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\nvalue *= multiplier;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"FF7\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Power\\\\\\\\\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare base Damage\\\\\\\\\\\\\\\\nlet baseDamage = 0;\\\\\\\\\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Calculate Final Damage\\\\\\\\\\\\\\\\nlet value = baseDamage;\\\\\\\\\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\\\\\\\\\nif (this.isRecover()) {\\\\\\\\\\\\\\\\n    value += 22 * power;\\\\\\\\\\\\\\\\n} else {\\\\\\\\\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    return formula;\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"FF8\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Power\\\\\\\\\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare Damage\\\\\\\\\\\\\\\\nlet Value = 0;\\\\\\\\\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\\\\\\\\\n    value *= power / 16;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value = a.mat + power;\\\\\\\\\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\\\\\\\\\n    value *= power / 256;\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    return formula;\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"FF9\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Damage Constant\\\\\\\\\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare Main Stats\\\\\\\\\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\\\\\\\\\nlet stat = 1;\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    stat = a.atk;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    stat = a.mat;\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    stat = a.def;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    stat = a.mdf;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare Base Damage\\\\\\\\\\\\\\\\nlet baseDamage = power;\\\\\\\\\\\\\\\\nif (this.isPhysical()) {\\\\\\\\\\\\\\\\n    baseDamage += stat;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\\\\\\\\\n    baseDamage -= armor;\\\\\\\\\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare Bonus Damage\\\\\\\\\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare Final Damage\\\\\\\\\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    return formula;\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"FF10\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Damage Constant\\\\\\\\\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Damage Offense Value\\\\\\\\\\\\\\\\nlet value = power;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Apply Damage Defense Value\\\\\\\\\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\\\\\\\\\n    value *= -1;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    return formula;\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"MK\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Multiplier\\\\\\\\\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare Values\\\\\\\\\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Calculate Damage \\\\\\\\\\\\\\\\nlet value = 0;\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\nvalue *= multiplier;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"MOBA\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Damage Value\\\\\\\\\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value *= a.atk;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value *= a.mat;\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    value *= a.def;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    value *= a.mdf;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    // Calculate Base Armor\\\\\\\\\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    // Apply Armor to Damage\\\\\\\\\\\\\\\\n    if (armor >= 0) {\\\\\\\\\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\\\\\\\\\n    } else {\\\\\\\\\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"PKMN\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Power\\\\\\\\\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare Values\\\\\\\\\\\\\\\\nlet value = 0;\\\\\\\\\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\\\\\\\\\nlet attackStat = 0;\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    attackStat = a.atk;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    attackStat =  a.mat;\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    attackStat =  a.def;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Calculate Damage\\\\\\\\\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    return formula;\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\"]\",\"Cap\":\"\",\"EnableDamageCap:eval\":\"false\",\"DefaultHardCap:num\":\"9999\",\"EnableSoftCap:eval\":\"false\",\"DefaultSoftCap:num\":\"0.80\",\"DefaultSoftScaler:num\":\"0.1275\",\"Popups\":\"\",\"PopupDuration:num\":\"128\",\"NewPopupBottom:eval\":\"true\",\"PopupPosition:str\":\"head\",\"PopupOffsetX:num\":\"0\",\"PopupOffsetY:num\":\"0\",\"PopupShiftX:num\":\"8\",\"PopupShiftY:num\":\"-28\",\"hpDamageFmt:str\":\"-%1\",\"hpHealingFmt:str\":\"+%1\",\"mpDamageFmt:str\":\"-%1 %2\",\"mpHealingFmt:str\":\"+%1 %2\",\"CriticalColor:eval\":\"[255, 0, 0, 160]\",\"CriticalDuration:num\":\"128\",\"Formulas\":\"\",\"OverallFormulaJS:func\":\"\\\"// Declare Constants\\\\nconst target = arguments[0];\\\\nconst critical = arguments[1];\\\\nconst item = this.item();\\\\n\\\\n// Get Base Damage\\\\nconst baseValue = this.evalDamageFormula(target);\\\\n\\\\n// Calculate Element Modifiers\\\\nlet value = baseValue * this.calcElementRate(target);\\\\n\\\\n// Calculate Physical and Magical Modifiers\\\\nif (this.isPhysical()) {\\\\n    value *= target.pdr;\\\\n}\\\\nif (this.isMagical()) {\\\\n    value *= target.mdr;\\\\n}\\\\n\\\\n// Apply Healing Modifiers\\\\nif (baseValue < 0) {\\\\n    value *= target.rec;\\\\n}\\\\n\\\\n// Apply Critical Modifiers\\\\nif (critical) {\\\\n    value = this.applyCritical(value);\\\\n}\\\\n\\\\n// Apply Variance and Guard Modifiers\\\\nvalue = this.applyVariance(value, item.damage.variance);\\\\nvalue = this.applyGuard(value, target);\\\\n\\\\n// Finalize Damage\\\\nvalue = Math.round(value);\\\\nreturn value;\\\"\",\"VarianceFormulaJS:func\":\"\\\"// Declare Constants\\\\nconst damage = arguments[0];\\\\nconst variance = arguments[1];\\\\n\\\\n// Calculate Variance\\\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\\\n\\\\n// Return Damage\\\\nreturn damage >= 0 ? damage + v : damage - v;\\\"\",\"GuardFormulaJS:func\":\"\\\"// Declare Constants\\\\nconst damage = arguments[0];\\\\nconst target = arguments[1];\\\\n\\\\n// Return Damage Early\\\\nconst note = this.item().note;\\\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\\\nif (!target.isGuard()) return damage;\\\\nif (damage < 0) return damage;\\\\n\\\\n// Declare Guard Rate\\\\nlet guardRate = 0.5;\\\\nguardRate /= target.grd;\\\\n\\\\n// Return Damage\\\\nreturn damage * guardRate;\\\"\",\"Critical\":\"\",\"CriticalHitRateJS:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\n\\\\n// Create Base Critical Rate\\\\nlet rate = this.subject().cri * (1 - target.cev);\\\\n\\\\n// Apply Notetags\\\\nconst note = this.item().note;\\\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\\\n    return 1;\\\\n}\\\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\\\\\d+)([%％])>/i)) {\\\\n    return Number(RegExp.$1) / 100;\\\\n}\\\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\\\\\d+)([%％])>/i)) {\\\\n    rate *= Number(RegExp.$1) / 100;\\\\n}\\\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\\\\\+\\\\\\\\-]\\\\\\\\d+)([%％])>/i)) {\\\\n    rate += Number(RegExp.$1) / 100;\\\\n}\\\\nif (note.match(/<JS CRITICAL RATE>\\\\\\\\s*([\\\\\\\\s\\\\\\\\S]*)\\\\\\\\s*<\\\\\\\\/JS CRITICAL RATE>/i)) {\\\\n    const code = String(RegExp.$1);\\\\n    try {\\\\n        eval(code);\\\\n    } catch (e) {\\\\n        if ($gameTemp.isPlaytest()) console.log(e);\\\\n    }\\\\n}\\\\n\\\\n// Apply LUK Buffs/Debuffs\\\\nconst lukStack = this.subject().buff(7);\\\\nrate *= 2 ** lukStack;\\\\n\\\\n// Return Rate\\\\nreturn rate;\\\"\",\"CriticalHitMultiplier:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nlet damage = arguments[0];\\\\nlet multiplier = 1.5;\\\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\\\nif (this.isHpRecover() || this.isMpRecover()) {\\\\n    bonusDamage *= -1;\\\\n}\\\\n\\\\n// Apply Notetags\\\\nconst note = this.item().note;\\\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\\\\\d+)([%％])>/i)) {\\\\n    multiplier = Number(RegExp.$1) / 100;\\\\n}\\\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\\\\\+\\\\\\\\-]\\\\\\\\d+)([%％])>/i)) {\\\\n    multiplier += Number(RegExp.$1) / 100;\\\\n}\\\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\\\\\d+)([%％])>/i)) {\\\\n    bonusDamage *= Number(RegExp.$1) / 100;\\\\n}\\\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\\\\\+\\\\\\\\-]\\\\\\\\d+)([%％])>/i)) {\\\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\\\n}\\\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\\\\\s*([\\\\\\\\s\\\\\\\\S]*)\\\\\\\\s*<\\\\\\\\/JS CRITICAL DAMAGE>/i)) {\\\\n    const code = String(RegExp.$1);\\\\n    try {\\\\n        eval(code);\\\\n    } catch (e) {\\\\n        if ($gameTemp.isPlaytest()) console.log(e);\\\\n    }\\\\n}\\\\n\\\\n// Return Damage\\\\nreturn damage * multiplier + bonusDamage;\\\"\"}","Mechanics:struct":"{\"ActionSpeed\":\"\",\"AllowRandomSpeed:eval\":\"true\",\"CalcActionSpeedJS:func\":\"\\\"// Declare Constants\\\\nconst agi = this.subject().agi;\\\\n\\\\n// Create Speed\\\\nlet speed = agi;\\\\nif (this.allowRandomSpeed()) {\\\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\\\n}\\\\nif (this.item()) {\\\\n    speed += this.item().speed;\\\\n}\\\\nif (this.isAttack()) {\\\\n    speed += this.subject().attackSpeed();\\\\n}\\\\n\\\\n// Return Speed\\\\nreturn speed;\\\"\",\"BaseTroop\":\"\",\"BaseTroopIDs:arraynum\":\"[\\\"1\\\"]\",\"CommonEvents\":\"\",\"BattleStartEvent:num\":\"0\",\"BattleEndEvent:num\":\"0\",\"VictoryEvent:num\":\"0\",\"DefeatEvent:num\":\"0\",\"EscapeSuccessEvent:num\":\"0\",\"EscapeFailEvent:num\":\"0\",\"Escape\":\"\",\"CalcEscapeRatioJS:func\":\"\\\"// Calculate Escape Ratio\\\\nlet ratio = 1;\\\\n\\\\n// Return Ratio\\\\nreturn ratio;\\\"\",\"CalcEscapeRaiseJS:func\":\"\\\"// Calculate Escape Ratio\\\\nlet value = 0.1;\\\\nvalue += $gameParty.aliveMembers().length;\\\\n\\\\n// Return Value\\\\nreturn value;\\\"\",\"Switches\":\"\",\"SwitchCritical:num\":\"0\",\"SwitchMissEvade:num\":\"0\",\"Variables\":\"\",\"VariableDmg:num\":\"0\",\"VariableHeal:num\":\"0\",\"BattleJS\":\"\",\"PreStartBattleJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PostStartBattleJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"BattleVictoryJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"EscapeSuccessJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"EscapeFailureJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"BattleDefeatJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PreEndBattleJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PostEndBattleJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"TurnJS\":\"\",\"PreStartTurnJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PostStartTurnJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PreEndTurnJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PostEndTurnJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PreRegenerateJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PostRegenerateJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"ActionJS\":\"\",\"PreStartActionJS:func\":\"\\\"// Declare Constants\\\\nconst value = arguments[0];\\\\nconst user = this.subject();\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\nconst action = this;\\\\nconst item = this.item();\\\\nconst skill = this.item();\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PostStartActionJS:func\":\"\\\"// Declare Constants\\\\nconst value = arguments[0];\\\\nconst user = this.subject();\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\nconst action = this;\\\\nconst item = this.item();\\\\nconst skill = this.item();\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PreApplyJS:func\":\"\\\"// Declare Constants\\\\nconst value = arguments[0];\\\\nconst target = arguments[1];\\\\nconst user = this.subject();\\\\nconst a = user;\\\\nconst b = target;\\\\nconst action = this;\\\\nconst item = this.item();\\\\nconst skill = this.item();\\\\n\\\\n// Perform Actions\\\\n\\\\n// Return Value\\\\nreturn value;\\\"\",\"PreDamageJS:func\":\"\\\"// Declare Constants\\\\nconst value = arguments[0];\\\\nconst target = arguments[1];\\\\nconst user = this.subject();\\\\nconst a = user;\\\\nconst b = target;\\\\nconst action = this;\\\\nconst item = this.item();\\\\nconst skill = this.item();\\\\n\\\\n// Perform Actions\\\\n\\\\n// Return Value\\\\nreturn value;\\\"\",\"PostDamageJS:func\":\"\\\"// Declare Constants\\\\nconst value = arguments[0];\\\\nconst target = arguments[1];\\\\nconst user = this.subject();\\\\nconst a = user;\\\\nconst b = target;\\\\nconst action = this;\\\\nconst item = this.item();\\\\nconst skill = this.item();\\\\n\\\\n// Perform Actions\\\\n\\\\n// Return Value\\\\nreturn value;\\\"\",\"PostApplyJS:func\":\"\\\"// Declare Constants\\\\nconst value = arguments[0];\\\\nconst target = arguments[1];\\\\nconst user = this.subject();\\\\nconst a = user;\\\\nconst b = target;\\\\nconst action = this;\\\\nconst item = this.item();\\\\nconst skill = this.item();\\\\n\\\\n// Perform Actions\\\\n\\\\n// Return Value\\\\nreturn value;\\\"\",\"PreEndActionJS:func\":\"\\\"// Declare Constants\\\\nconst value = arguments[0];\\\\nconst user = this.subject();\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\nconst action = this;\\\\nconst item = this.item();\\\\nconst skill = this.item();\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PostEndActionJS:func\":\"\\\"// Declare Constants\\\\nconst value = arguments[0];\\\\nconst user = this.subject();\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\nconst action = this;\\\\nconst item = this.item();\\\\nconst skill = this.item();\\\\n\\\\n// Perform Actions\\\\n\\\"\"}","CmdWindows":"----------------------------------","BattleLayout:struct":"{\"Style:str\":\"default\",\"ListStyle\":\"\",\"ShowFacesListStyle:eval\":\"false\",\"CommandWidth:num\":\"192\",\"XPStyle\":\"\",\"XPActorCommandLines:num\":\"4\",\"XPActorDefaultHeight:num\":\"1\",\"XPSpriteYLocation:str\":\"bottom\",\"PotraitStyle\":\"\",\"ShowPortraits:eval\":\"false\",\"PortraitScale:num\":\"0\",\"BorderStyle\":\"\",\"SkillItemBorderCols:num\":\"2\",\"ShowPortraitsBorderStyle:eval\":\"false\",\"PortraitScaleBorderStyle:num\":\"1.25\",\"SkillItemWindows\":\"\",\"SkillItemMiddleLayout:eval\":\"false\",\"SkillItemStandardCols:num\":\"2\",\"StatusWindow\":\"\",\"StatusWindowName\":\"\",\"NameOffsetX:num\":\"-100\",\"NameOffsetY:num\":\"+0\",\"StatusWindowHpGauge\":\"\",\"HpGaugeOffsetX:num\":\"-300\",\"HpGaugeOffsetY:num\":\"-300\",\"StatusWindowMpGauge\":\"\",\"MpGaugeOffsetX:num\":\"-300\",\"MpGaugeOffsetY:num\":\"+0\",\"StatusWindowTpGauge\":\"\",\"TpGaugeOffsetX:num\":\"-300\",\"TpGaugeOffsetY:num\":\"+0\",\"StatusWindowStateIcon\":\"\",\"StateIconOffsetX:num\":\"-300\",\"StateIconOffsetY:num\":\"+0\",\"StatusWindowTpbGauge\":\"\",\"TpbGaugeOffsetX:num\":\"-300\",\"TpbGaugeOffsetY:num\":\"+0\",\"StatusWindowSkin\":\"\",\"StatusWindowSkinFilename:str\":\"Window3\",\"StatusWindowSkinHide:eval\":\"true\",\"StatusWindowSelectBack\":\"\",\"StatusWindowSelectableBackHide:eval\":\"true\",\"StatusWindowAttachments\":\"\",\"StatusWindowBackAttachment\":\"\",\"StatusWindowAttachmentBack:str\":\"\",\"StatusWindowAttachmentBackOffsetX:num\":\"-300\",\"StatusWindowAttachmentBackOffsetY:num\":\"+4\",\"StatusWindowFrontAttachment\":\"\",\"StatusWindowAttachmentFront:str\":\"\",\"StatusWindowAttachmentFrontOffsetX:num\":\"-300\",\"StatusWindowAttachmentFrontOffsetY:num\":\"+0\",\"UiElements\":\"\",\"AntiTintUiElements:eval\":\"false\"}","BattleLog:struct":"{\"General\":\"\",\"BackColor:str\":\"#131516\",\"MaxLines:num\":\"1\",\"MessageWait:num\":\"60\",\"TextAlign:str\":\"center\",\"BattleLogRectJS:func\":\"\\\"const wx = 0;\\\\nconst wy = 0;\\\\nconst ww = Graphics.boxWidth;\\\\nconst wh = this.calcWindowHeight(2, false);\\\\nreturn new Rectangle(wx, wy, ww, wh);\\\"\",\"StartTurn\":\"\",\"StartTurnShow:eval\":\"false\",\"StartTurnMsg:str\":\"Turn %1\",\"StartTurnWait:num\":\"40\",\"DisplayAction\":\"\",\"ActionCenteredName:eval\":\"false\",\"ActionSkillMsg1:eval\":\"true\",\"ActionSkillMsg2:eval\":\"true\",\"ActionItemMsg:eval\":\"true\",\"ActionChanges\":\"\",\"ShowCounter:eval\":\"true\",\"ShowReflect:eval\":\"true\",\"ShowSubstitute:eval\":\"true\",\"ActionResults\":\"\",\"ShowFailure:eval\":\"false\",\"ShowCritical:eval\":\"true\",\"ShowMissEvasion:eval\":\"true\",\"ShowHpDmg:eval\":\"true\",\"ShowMpDmg:eval\":\"true\",\"ShowTpDmg:eval\":\"true\",\"DisplayStates\":\"\",\"ShowAddedState:eval\":\"true\",\"ShowRemovedState:eval\":\"true\",\"ShowCurrentState:eval\":\"true\",\"ShowAddedBuff:eval\":\"true\",\"ShowAddedDebuff:eval\":\"true\",\"ShowRemovedBuff:eval\":\"true\"}","BattlebackScale:struct":"{\"DefaultStyle:str\":\"MZ\",\"jsOneForOne:func\":\"\\\"// Adjust Size\\\\nthis.width = Graphics.width;\\\\nthis.height = Graphics.height;\\\\n\\\\n// Adjust Scale\\\\nconst scale = 1.0;\\\\nthis.scale.x = scale;\\\\nthis.scale.y = scale;\\\\n\\\\n// Adjust Coordinates\\\\nthis.x = 0;\\\\nthis.y = 0;\\\"\",\"jsScaleToFit:func\":\"\\\"// Adjust Size\\\\nthis.width = Graphics.width;\\\\nthis.height = Graphics.height;\\\\n\\\\n// Adjust Scale\\\\nconst ratioX = this.width / this.bitmap.width;\\\\nconst ratioY = this.height / this.bitmap.height;\\\\nconst scale = Math.max(ratioX, ratioY);\\\\nthis.scale.x = scale;\\\\nthis.scale.y = scale;\\\\n\\\\n// Adjust Coordinates\\\\nthis.x = (Graphics.width - this.width) / 2;\\\\nthis.y = Graphics.height - this.height;\\\"\",\"jsScaleDown:func\":\"\\\"// Adjust Size\\\\nthis.width = Graphics.width;\\\\nthis.height = Graphics.height;\\\\n\\\\n// Adjust Scale\\\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\\\nconst scale = Math.max(ratioX, ratioY);\\\\nthis.scale.x = scale;\\\\nthis.scale.y = scale;\\\\n\\\\n// Adjust Coordinates\\\\nthis.x = (Graphics.width - this.width) / 2;\\\\nthis.y = Graphics.height - this.height;\\\"\",\"jsScale Up:func\":\"\\\"// Adjust Size\\\\nthis.width = Graphics.width;\\\\nthis.height = Graphics.height;\\\\n\\\\n// Adjust Scale\\\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\\\nconst scale = Math.max(ratioX, ratioY);\\\\nthis.scale.x = scale;\\\\nthis.scale.y = scale;\\\\n\\\\n// Adjust Coordinates\\\\nthis.x = (Graphics.width - this.width) / 2;\\\\nthis.y = Graphics.height - this.height;\\\"\"}","PartyCmd:struct":"{\"Cmd\":\"\",\"CmdStyle:str\":\"text\",\"CmdTextAlign:str\":\"center\",\"CmdIconFight:num\":\"0\",\"CommandAddAutoBattle:eval\":\"false\",\"CmdIconAutoBattle:num\":\"0\",\"CmdTextAutoBattle:str\":\"Auto\",\"CommandAddOptions:eval\":\"false\",\"CmdIconOptions:num\":\"0\",\"ActiveTpbOptionsMessage:str\":\"Options Menu queued after action is complete.\",\"CmdIconEscape:num\":\"0\",\"Access\":\"\",\"SkipPartyCmd:eval\":\"true\",\"DisablePartyCmd:eval\":\"true\",\"HelpWindow\":\"\",\"HelpFight:str\":\"Select actions to fight.\",\"HelpAutoBattle:str\":\"Sets party to Auto Battle mode.\",\"HelpOptions:str\":\"Opens up the Options Menu.\",\"HelpEscape:str\":\"Attempt to escape the battle.\"}","ActorCmd:struct":"{\"Cmd\":\"\",\"CmdStyle:str\":\"text\",\"CmdTextAlign:str\":\"center\",\"CmdIconItem:num\":\"\",\"IconStypeNorm:num\":\"\",\"IconStypeMagic:num\":\"\",\"BattleCmd\":\"\",\"BattleCmdList:arraystr\":\"[\\\"attack\\\",\\\"skills\\\",\\\"item\\\",\\\"escape\\\"]\",\"ShowCosts:eval\":\"true\",\"HelpWindow\":\"\",\"HelpSkillType:str\":\"\",\"HelpItem:str\":\"\",\"HelpEscape:str\":\"\",\"HelpAutoBattle:str\":\"\",\"HelpParty:str\":\"Automatically choose an action suitable for combat.\"}","MultiTarget:struct":"{\"Properties\":\"\",\"WindowWidth:num\":\"280\",\"BgType:num\":\"2\",\"ShowButton:eval\":\"true\",\"Vocab\":\"\",\"AllActorsText:str\":\"All Allies\",\"AllEnemiesText:str\":\"All Enemies\",\"Offsets\":\"\",\"ActorOffsets\":\"\",\"ActorOffsetX:num\":\"+0\",\"ActorOffsetY:num\":\"+0\",\"EnemyOffsets\":\"\",\"EnemyOffsetX:num\":\"+0\",\"EnemyOffsetY:num\":\"+0\"}","VisualBreak":"----------------------------------","Actor:struct":"{\"Flinch\":\"\",\"FlinchDistanceX:num\":\"0\",\"FlinchDistanceY:num\":\"0\",\"FlinchDuration:num\":\"6\",\"SvBattlers\":\"\",\"AnchorX:num\":\"0.5\",\"AnchorY:num\":\"1.0\",\"ChantStyle:eval\":\"true\",\"OffsetX:num\":\"0\",\"OffsetY:num\":\"0\",\"MotionSpeed:num\":\"12\",\"PrioritySortActive:eval\":\"true\",\"PrioritySortActors:eval\":\"false\",\"Shadow:eval\":\"true\",\"SmoothImage:eval\":\"true\",\"HomePosJS:func\":\"\\\"// Declare Constants\\\\nconst sprite = this;\\\\nconst actor = this._actor;\\\\nconst index = arguments[0];\\\\n\\\\n// Make Calculations\\\\nlet x = Math.round((Graphics.width / 2) + 192)\\\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\\\nx += index * 32;\\\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\\\ny += index * 48;\\\\n\\\\n// Home Position Offsets\\\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\\\\\+\\\\\\\\-]\\\\\\\\d+),[ ]([\\\\\\\\+\\\\\\\\-]\\\\\\\\d+)>/i;\\\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\\\n\\\\n// Set Home Position\\\\nthis.setHome(x, y);\\\"\"}","Enemy:struct":"{\"Visual\":\"\",\"AttackAnimation:num\":\"2\",\"EmergeText:eval\":\"false\",\"OffsetX:num\":\"0\",\"OffsetY:num\":\"0\",\"SmoothImage:eval\":\"false\",\"SelectWindow\":\"\",\"LastSelected:eval\":\"true\",\"FrontViewSelect:eval\":\"false\",\"SideviewSelect:eval\":\"true\",\"Name\":\"\",\"NameLegacy:eval\":\"false\",\"NameFontSize:num\":\"22\",\"NamePosition\":\"\",\"NameOffsetX:num\":\"0\",\"NameOffsetY:num\":\"0\",\"NameAttachStateIcon:eval\":\"false\",\"AttachStateOffsetX:num\":\"+0\",\"AttachStateOffsetY:num\":\"+0\",\"NameVisibility\":\"\",\"NameAlwaysHidden:eval\":\"false\",\"NameAlwaysVisible:eval\":\"false\",\"NameAlwaysSelectOnly:eval\":\"false\",\"SvBattlers\":\"\",\"AllowCollapse:eval\":\"false\",\"AnchorX:num\":\"0.5\",\"AnchorY:num\":\"1.0\",\"MotionIdle:str\":\"walk\",\"Shadow:eval\":\"true\",\"Width:num\":\"64\",\"Height:num\":\"64\",\"WtypeId:num\":\"0\"}","HpGauge:struct":"{\"Display\":\"\",\"ShowActorGauge:eval\":\"false\",\"ShowEnemyGauge:eval\":\"true\",\"RequiresDefeat:eval\":\"false\",\"BTestBypass:eval\":\"true\",\"Settings\":\"\",\"AniDuration:num\":\"20\",\"AnchorX:num\":\"0.5\",\"AnchorY:num\":\"1.0\",\"Scale:num\":\"1\",\"OffsetX:num\":\"0\",\"OffsetY:num\":\"-3\",\"Options\":\"\",\"AddHpGaugeOption:eval\":\"false\",\"AdjustRect:eval\":\"false\",\"Name:str\":\"Show HP Gauge\"}","ActionSequence:struct":"{\"AutoSequences\":\"\",\"AutoMeleeSolo:eval\":\"true\",\"AutoMeleeAoE:eval\":\"true\",\"QoL\":\"\",\"AutoNotetag:eval\":\"false\",\"CastAnimations\":\"\",\"CastCertain:num\":\"0\",\"CastPhysical:num\":\"0\",\"CastMagical:num\":\"0\",\"CounterReflection\":\"\",\"CounterPlayback:eval\":\"true\",\"ReflectAnimation:num\":\"0\",\"ReflectPlayback:eval\":\"true\",\"Stepping\":\"\",\"MeleeDistance:num\":\"24\",\"StepDistanceX:num\":\"48\",\"StepDistanceY:num\":\"0\",\"StepDuration:num\":\"12\"}","BreakEnd1":"----------------------------------","End Of":"Plugin Parameters","BreakEnd2":"----------------------------------"}},
{"name":"VisuMZ_1_MessageCore","status":false,"description":"[RPG Maker MZ] [Tier 1] [Version 1.41] [MessageCore]","parameters":{"BreakHead":"----------------------------------","MessageCore":"Plugin Parameters","ATTENTION":"READ THE HELP FILE","BreakSettings":"----------------------------------","General:struct":"{\"MessageWindow\":\"\",\"MessageRows:num\":\"4\",\"MessageWidth:num\":\"816\",\"FastForwardKey:str\":\"none\",\"MessageTextDelay:num\":\"1\",\"MsgWindowOffsetX:num\":\"+0\",\"MsgWindowOffsetY:num\":\"+0\",\"StretchDimmedBg:eval\":\"true\",\"DefaultOutlineWidth:num\":\"4\",\"NameBoxWindow\":\"\",\"NameBoxWindowDefaultColor:num\":\"0\",\"NameBoxWindowOffsetX:num\":\"0\",\"NameBoxWindowOffsetY:num\":\"14\",\"ChoiceListWindow\":\"\",\"ChoiceWindowLineHeight:num\":\"36\",\"ChoiceWindowMaxRows:num\":\"8\",\"ChoiceWindowMaxCols:num\":\"1\",\"ChoiceWindowTextAlign:str\":\"default\",\"DefaultTextCodes\":\"\",\"RelativePXPY:eval\":\"true\",\"FontBiggerCap:eval\":\"108\",\"FontSmallerCap:eval\":\"12\",\"FontChangeValue:eval\":\"12\"}","AutoColor:struct":"{\"DatabaseHighlighting\":\"\",\"Actors:str\":\"0\",\"Classes:str\":\"0\",\"Skills:str\":\"0\",\"Items:str\":\"0\",\"Weapons:str\":\"0\",\"Armors:str\":\"0\",\"Enemies:str\":\"0\",\"States:str\":\"0\",\"WordHighlighting\":\"\",\"TextColor1:arraystr\":\"[]\",\"TextColor2:arraystr\":\"[]\",\"TextColor3:arraystr\":\"[]\",\"TextColor4:arraystr\":\"[]\",\"TextColor5:arraystr\":\"[]\",\"TextColor6:arraystr\":\"[]\",\"TextColor7:arraystr\":\"[]\",\"TextColor8:arraystr\":\"[]\",\"TextColor9:arraystr\":\"[]\",\"TextColor10:arraystr\":\"[]\",\"TextColor11:arraystr\":\"[]\",\"TextColor12:arraystr\":\"[]\",\"TextColor13:arraystr\":\"[]\",\"TextColor14:arraystr\":\"[]\",\"TextColor15:arraystr\":\"[]\",\"TextColor16:arraystr\":\"[]\",\"TextColor17:arraystr\":\"[]\",\"TextColor18:arraystr\":\"[]\",\"TextColor19:arraystr\":\"[]\",\"TextColor20:arraystr\":\"[]\",\"TextColor21:arraystr\":\"[]\",\"TextColor22:arraystr\":\"[]\",\"TextColor23:arraystr\":\"[]\",\"TextColor24:arraystr\":\"[]\",\"TextColor25:arraystr\":\"[]\",\"TextColor26:arraystr\":\"[]\",\"TextColor27:arraystr\":\"[]\",\"TextColor28:arraystr\":\"[]\",\"TextColor29:arraystr\":\"[]\",\"TextColor30:arraystr\":\"[]\",\"TextColor31:arraystr\":\"[]\"}","TextCodeActions:arraystruct":"[\"{\\\"Match:str\\\":\\\"ChangeFace\\\",\\\"Type:str\\\":\\\"\\\\\\\\<(.*?)\\\\\\\\>\\\",\\\"CommonEvent:num\\\":\\\"0\\\",\\\"ActionJS:func\\\":\\\"\\\\\\\"const textState = arguments[0];\\\\\\\\nconst data = this.obtainEscapeString(textState).split(',');\\\\\\\\nif (textState.drawing) {\\\\\\\\n    const filename = data[0].trim();\\\\\\\\n    const index = parseInt(data[1] || '0');\\\\\\\\n    $gameMessage.setFaceImage(filename, index);\\\\\\\\n    this.loadMessageFace();\\\\\\\\n    const rtl = $gameMessage.isRTL();\\\\\\\\n    const width = ImageManager.faceWidth;\\\\\\\\n    const height = this.innerHeight;\\\\\\\\n    const x = rtl ? this.innerWidth - width - 4 : 4;\\\\\\\\n    this.contents.clearRect(x, 0, width, height);\\\\\\\\n    this._faceBitmap.addLoadListener(this.drawMessageFace.bind(this));\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"FaceIndex\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"CommonEvent:num\\\":\\\"0\\\",\\\"ActionJS:func\\\":\\\"\\\\\\\"const textState = arguments[0];\\\\\\\\nconst index = this.obtainEscapeParam(textState);\\\\\\\\nif (textState.drawing) {\\\\\\\\n    const filename = $gameMessage.faceName();\\\\\\\\n    $gameMessage.setFaceImage(filename, index);\\\\\\\\n    this.loadMessageFace();\\\\\\\\n    const rtl = $gameMessage.isRTL();\\\\\\\\n    const width = ImageManager.faceWidth;\\\\\\\\n    const height = this.innerHeight;\\\\\\\\n    const x = rtl ? this.innerWidth - width - 4 : 4;\\\\\\\\n    this.contents.clearRect(x, 0, width, height);\\\\\\\\n    this._faceBitmap.addLoadListener(this.drawMessageFace.bind(this));\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"TextDelay\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"CommonEvent:num\\\":\\\"0\\\",\\\"ActionJS:func\\\":\\\"\\\\\\\"const textState = arguments[0];\\\\\\\\nconst delay = this.obtainEscapeParam(textState);\\\\\\\\nif (textState.drawing && this.constructor === Window_Message) {\\\\\\\\n    this.setTextDelay(delay);\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"NormalBG\\\",\\\"Type:str\\\":\\\"\\\",\\\"CommonEvent:num\\\":\\\"0\\\",\\\"ActionJS:func\\\":\\\"\\\\\\\"const textState = arguments[0];\\\\\\\\nif (textState.drawing) {\\\\\\\\n    this.setBackgroundType(0);\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"DimBG\\\",\\\"Type:str\\\":\\\"\\\",\\\"CommonEvent:num\\\":\\\"0\\\",\\\"ActionJS:func\\\":\\\"\\\\\\\"const textState = arguments[0];\\\\\\\\nif (textState.drawing) {\\\\\\\\n    this.setBackgroundType(1);\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"TransparentBG\\\",\\\"Type:str\\\":\\\"\\\",\\\"CommonEvent:num\\\":\\\"0\\\",\\\"ActionJS:func\\\":\\\"\\\\\\\"const textState = arguments[0];\\\\\\\\nif (textState.drawing) {\\\\\\\\n    this.setBackgroundType(2);\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"FontChange\\\",\\\"Type:str\\\":\\\"\\\\\\\\<(.*?)\\\\\\\\>\\\",\\\"CommonEvent:num\\\":\\\"0\\\",\\\"ActionJS:func\\\":\\\"\\\\\\\"const textState = arguments[0];\\\\\\\\nconst fontName = this.obtainEscapeString(textState);\\\\\\\\nthis.contents.fontFace = fontName;\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"ResetFont\\\",\\\"Type:str\\\":\\\"\\\",\\\"CommonEvent:num\\\":\\\"0\\\",\\\"ActionJS:func\\\":\\\"\\\\\\\"this.resetFontSettings();\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"ResetColor\\\",\\\"Type:str\\\":\\\"\\\",\\\"CommonEvent:num\\\":\\\"0\\\",\\\"ActionJS:func\\\":\\\"\\\\\\\"this.resetTextColor();\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"HexColor\\\",\\\"Type:str\\\":\\\"\\\\\\\\<(.*?)\\\\\\\\>\\\",\\\"CommonEvent:num\\\":\\\"0\\\",\\\"ActionJS:func\\\":\\\"\\\\\\\"const textState = arguments[0];\\\\\\\\nconst hexColor = this.obtainEscapeString(textState);\\\\\\\\nif (!this.isColorLocked() && textState.drawing) {\\\\\\\\n    this.changeTextColor(hexColor);\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"OutlineColor\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"CommonEvent:num\\\":\\\"0\\\",\\\"ActionJS:func\\\":\\\"\\\\\\\"const textState = arguments[0];\\\\\\\\nconst colorIndex = this.obtainEscapeParam(textState);\\\\\\\\nif (!this.isColorLocked() && textState.drawing) {\\\\\\\\n    this.changeOutlineColor(ColorManager.textColor(colorIndex));\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"OutlineHexColor\\\",\\\"Type:str\\\":\\\"\\\\\\\\<(.*?)\\\\\\\\>\\\",\\\"CommonEvent:num\\\":\\\"0\\\",\\\"ActionJS:func\\\":\\\"\\\\\\\"const textState = arguments[0];\\\\\\\\nconst hexColor = this.obtainEscapeString(textState);\\\\\\\\nif (!this.isColorLocked() && textState.drawing) {\\\\\\\\n    this.changeOutlineColor(hexColor);\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"OutlineWidth\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"CommonEvent:num\\\":\\\"0\\\",\\\"ActionJS:func\\\":\\\"\\\\\\\"const textState = arguments[0];\\\\\\\\nconst width = this.obtainEscapeParam(textState);\\\\\\\\nif (textState.drawing) {\\\\\\\\n    this.contents.outlineWidth = width;\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"WindowMoveTo\\\",\\\"Type:str\\\":\\\"\\\\\\\\<(.*?)\\\\\\\\>\\\",\\\"CommonEvent:num\\\":\\\"0\\\",\\\"ActionJS:func\\\":\\\"\\\\\\\"const textState = arguments[0];\\\\\\\\nconst data = this.obtainEscapeString(textState).split(',');\\\\\\\\nif (textState.drawing) {\\\\\\\\n    const x = !!data[0] ? Number(data[0].trim()) : this.x;\\\\\\\\n    const y = !!data[1] ? Number(data[1].trim()) : this.y;\\\\\\\\n    const width = !!data[2] ? Number(data[2].trim()) : this.width;\\\\\\\\n    const height = !!data[3] ? Number(data[3].trim()) : this.height;\\\\\\\\n    const duration = !!data[4] ? Number(data[4].trim()) : 20;\\\\\\\\n    const easingType = !!data[5] ? data[5].trim() : 0;\\\\\\\\n    this.moveTo(x, y, width, height, duration, easingType);\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"WindowMoveBy\\\",\\\"Type:str\\\":\\\"\\\\\\\\<(.*?)\\\\\\\\>\\\",\\\"CommonEvent:num\\\":\\\"0\\\",\\\"ActionJS:func\\\":\\\"\\\\\\\"const textState = arguments[0];\\\\\\\\nconst data = this.obtainEscapeString(textState).split(',');\\\\\\\\nif (textState.drawing) {\\\\\\\\n    const x = !!data[0] ? Number(data[0].trim()) : 0;\\\\\\\\n    const y = !!data[1] ? Number(data[1].trim()) : 0;\\\\\\\\n    const width = !!data[2] ? Number(data[2].trim()) : 0;\\\\\\\\n    const height = !!data[3] ? Number(data[3].trim()) : 0;\\\\\\\\n    const duration = !!data[4] ? Number(data[4].trim()) : 20;\\\\\\\\n    const easingType = !!data[5] ? data[5].trim() : 0;\\\\\\\\n    this.moveBy(x, y, width, height, duration, easingType);\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"WindowReset\\\",\\\"Type:str\\\":\\\"\\\",\\\"CommonEvent:num\\\":\\\"0\\\",\\\"ActionJS:func\\\":\\\"\\\\\\\"const textState = arguments[0];\\\\\\\\nif (textState.drawing) {\\\\\\\\n    const frames = 20;\\\\\\\\n    const easingType = 0;\\\\\\\\n    this.resetRect(frames, easingType);\\\\\\\\n}\\\\\\\"\\\"}\"]","TextCodeReplace:arraystruct":"[\"{\\\"Match:str\\\":\\\"ActorFace\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const actorId = parseInt(arguments[1]);\\\\\\\\nconst actor = $gameActors.actor(actorId);\\\\\\\\nif (this.constructor === Window_Message && actor) {\\\\\\\\n    $gameMessage.setFaceImage(\\\\\\\\n        actor.faceName(),\\\\\\\\n        actor.faceIndex()\\\\\\\\n    );\\\\\\\\n}\\\\\\\\nreturn '';\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"PartyFace\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const index = parseInt(arguments[1]) - 1;\\\\\\\\nconst actor = $gameParty.members()[index];\\\\\\\\nif (this.constructor === Window_Message && actor) {\\\\\\\\n    $gameMessage.setFaceImage(\\\\\\\\n        actor.faceName(),\\\\\\\\n        actor.faceIndex()\\\\\\\\n    );\\\\\\\\n}\\\\\\\\nreturn '';\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"Class\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const database = $dataClasses;\\\\\\\\nconst id = parseInt(arguments[1]);\\\\\\\\nconst icon = true;\\\\\\\\nreturn this.databaseObjectName(database, id, icon);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"ClassName\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const database = $dataClasses;\\\\\\\\nconst id = parseInt(arguments[1]);\\\\\\\\nconst icon = false;\\\\\\\\nreturn this.databaseObjectName(database, id, icon);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"Skill\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const database = $dataSkills;\\\\\\\\nconst id = parseInt(arguments[1]);\\\\\\\\nconst icon = true;\\\\\\\\nreturn this.databaseObjectName(database, id, icon);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"SkillName\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const database = $dataSkills;\\\\\\\\nconst id = parseInt(arguments[1]);\\\\\\\\nconst icon = false;\\\\\\\\nreturn this.databaseObjectName(database, id, icon);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"Item\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const database = $dataItems;\\\\\\\\nconst id = parseInt(arguments[1]);\\\\\\\\nconst icon = true;\\\\\\\\nreturn this.databaseObjectName(database, id, icon);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"ItemName\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const database = $dataItems;\\\\\\\\nconst id = parseInt(arguments[1]);\\\\\\\\nconst icon = false;\\\\\\\\nreturn this.databaseObjectName(database, id, icon);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"ItemQuantity\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const database = $dataItems;\\\\\\\\nconst id = parseInt(arguments[1]);\\\\\\\\nreturn $gameParty.numItems(database[id]);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"Weapon\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const database = $dataWeapons;\\\\\\\\nconst id = parseInt(arguments[1]);\\\\\\\\nconst icon = true;\\\\\\\\nreturn this.databaseObjectName(database, id, icon);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"WeaponName\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const database = $dataWeapons;\\\\\\\\nconst id = parseInt(arguments[1]);\\\\\\\\nconst icon = false;\\\\\\\\nreturn this.databaseObjectName(database, id, icon);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"WeaponQuantity\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const database = $dataWeapons;\\\\\\\\nconst id = parseInt(arguments[1]);\\\\\\\\nreturn $gameParty.numItems(database[id]);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"LastGainObj\\\",\\\"Type:str\\\":\\\"\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const icon = true;\\\\\\\\nreturn this.lastGainedObjectName(icon);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"LastGainObjName\\\",\\\"Type:str\\\":\\\"\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const icon = false;\\\\\\\\nreturn this.lastGainedObjectName(icon);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"LastGainObjQuantity\\\",\\\"Type:str\\\":\\\"\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"return this.lastGainedObjectQuantity();\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"Armor\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const database = $dataArmors;\\\\\\\\nconst id = parseInt(arguments[1]);\\\\\\\\nconst icon = true;\\\\\\\\nreturn this.databaseObjectName(database, id, icon);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"ArmorName\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const database = $dataArmors;\\\\\\\\nconst id = parseInt(arguments[1]);\\\\\\\\nconst icon = false;\\\\\\\\nreturn this.databaseObjectName(database, id, icon);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"ArmorQuantity\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const database = $dataArmors;\\\\\\\\nconst id = parseInt(arguments[1]);\\\\\\\\nreturn $gameParty.numItems(database[id]);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"State\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const database = $dataStates;\\\\\\\\nconst id = parseInt(arguments[1]);\\\\\\\\nconst icon = true;\\\\\\\\nreturn this.databaseObjectName(database, id, icon);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"StateName\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const database = $dataStates;\\\\\\\\nconst id = parseInt(arguments[1]);\\\\\\\\nconst icon = false;\\\\\\\\nreturn this.databaseObjectName(database, id, icon);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"Enemy\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const database = $dataEnemies;\\\\\\\\nconst id = parseInt(arguments[1]);\\\\\\\\nconst icon = true;\\\\\\\\nreturn this.databaseObjectName(database, id, icon);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"EnemyName\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const database = $dataEnemies;\\\\\\\\nconst id = parseInt(arguments[1]);\\\\\\\\nconst icon = false;\\\\\\\\nreturn this.databaseObjectName(database, id, icon);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"Troop\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const database = $dataTroops;\\\\\\\\nconst id = parseInt(arguments[1]);\\\\\\\\nconst icon = true;\\\\\\\\nreturn this.databaseObjectName(database, id, icon);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"TroopName\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const database = $dataTroops;\\\\\\\\nconst id = parseInt(arguments[1]);\\\\\\\\nconst icon = false;\\\\\\\\nreturn this.databaseObjectName(database, id, icon);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"TroopMember\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"if (!$gameParty.inBattle()) return \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\nconst index = (parseInt(arguments[1]) - 1) || 0;\\\\\\\\nconst member = $gameTroop.members()[index];\\\\\\\\nconst database = $dataEnemies;\\\\\\\\nconst id = member ? member.enemyId() : 0;\\\\\\\\nconst icon = true;\\\\\\\\nreturn this.databaseObjectName(database, id, icon);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"TroopMemberName\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"if (!$gameParty.inBattle()) return \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\nconst index = (parseInt(arguments[1]) - 1) || 0;\\\\\\\\nconst member = $gameTroop.members()[index];\\\\\\\\nconst database = $dataEnemies;\\\\\\\\nconst id = member ? member.enemyId() : 0;\\\\\\\\nconst icon = false;\\\\\\\\nreturn this.databaseObjectName(database, id, icon);\\\\\\\"\\\"}\"]","TextMacros:arraystruct":"[\"{\\\"Match:str\\\":\\\"Example Macro\\\",\\\"TextStr:str\\\":\\\"This is the text that will be displayed when you type [Example Macro].\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"return 'Text';\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"Leader\\\",\\\"TextStr:str\\\":\\\"\\\\\\\\P[1]\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"return 'Text';\\\\\\\"\\\"}\"]","TextSpeed:struct":"{\"AddOption:eval\":\"false\",\"AdjustRect:eval\":\"true\",\"Name:str\":\"Text Speed\",\"Default:num\":\"10\",\"Instant:str\":\"Instant\"}","WordWrap:struct":"{\"EnableWordWrap\":\"\",\"MessageWindow:eval\":\"false\",\"HelpWindow:eval\":\"false\",\"Rules\":\"\",\"LineBreakSpace:eval\":\"true\",\"TightWrap:eval\":\"false\",\"EndPadding:num\":\"0\"}","BreakEnd1":"----------------------------------","End Of":"Plugin Parameters","BreakEnd2":"----------------------------------"}},
{"name":"VisuMZ_2_HorrorEffects","status":false,"description":"[RPG Maker MZ] [Tier 2] [Version 1.01] [HorrorEffects]","parameters":{"BreakHead":"----------------------------------","HorrorEffects":"Plugin Parameters","ATTENTION":"READ THE HELP FILE","BreakSettings":"----------------------------------","Title1Settings:struct":"{\"FilterNoise\":\"\",\"Noise:eval\":\"false\",\"NoiseRate:num\":\"0.3\",\"NoiseAni:eval\":\"true\",\"FilterGlitch\":\"\",\"Glitch:eval\":\"false\",\"GlitchSlices:num\":\"10\",\"GlitchOffset:num\":\"100\",\"GlitchAni:eval\":\"true\",\"GlitchAniFreq:num\":\"300\",\"GlitchAniStr:num\":\"30\",\"FilterTV\":\"\",\"TV:eval\":\"false\",\"TVLineThickness:num\":\"5\",\"TVCorner:num\":\"0.3\",\"TVAni:eval\":\"true\",\"TVAniSpeed:num\":\"0.25\"}","Title2Settings:struct":"{\"FilterNoise\":\"\",\"Noise:eval\":\"false\",\"NoiseRate:num\":\"0.3\",\"NoiseAni:eval\":\"true\",\"FilterGlitch\":\"\",\"Glitch:eval\":\"false\",\"GlitchSlices:num\":\"10\",\"GlitchOffset:num\":\"100\",\"GlitchAni:eval\":\"true\",\"GlitchAniFreq:num\":\"300\",\"GlitchAniStr:num\":\"30\",\"FilterTV\":\"\",\"TV:eval\":\"false\",\"TVLineThickness:num\":\"5\",\"TVCorner:num\":\"0.3\",\"TVAni:eval\":\"true\",\"TVAniSpeed:num\":\"0.25\"}","BreakEnd1":"----------------------------------","End Of":"Plugin Parameters","BreakEnd2":"----------------------------------"}},
{"name":"VisuMZ_2_WeatherEffects","status":false,"description":"[RPG Maker MZ] [Tier 2] [Version 1.03] [WeatherEffects]","parameters":{"BreakHead":"----------------------------------","WeatherEffects":"Plugin Parameters","ATTENTION":"READ THE HELP FILE","BreakSettings":"----------------------------------","General:struct":"{\"PreRenderGenImage:eval\":\"false\",\"RenderVariations:num\":\"16\",\"SmoothIcons:eval\":\"true\"}","Options:struct":"{\"Options\":\"\",\"AddWeatherDensityOption:eval\":\"true\",\"AdjustRect:eval\":\"true\",\"Name:str\":\"Weather Density\"}","BreakEnd1":"----------------------------------","End Of":"Plugin Parameters","BreakEnd2":"----------------------------------"}},
{"name":"VisuMZ_3_MsgLetterSounds","status":false,"description":"[RPG Maker MZ] [Tier 3] [Version 1.02] [MsgLetterSounds]","parameters":{"BreakHead":"----------------------------------","MessageSounds":"Plugin Parameters","ATTENTION":"READ THE HELP FILE","BreakSettings":"----------------------------------","Enable":"","EnableSound:eval":"true","BlackList:arraystr":"[]","Default":"","name:str":"ALPH_talk2","Interval:num":"2","volume:num":"90","VolVariance:num":"10","pitch:num":"100","PitchVariance:num":"20","pan:num":"0","PanVariance:num":"5","BreakEnd1":"----------------------------------","End Of":"Plugin Parameters","BreakEnd2":"----------------------------------"}},
{"name":"VisuMZ_3_ActSeqImpact","status":false,"description":"[RPG Maker MZ] [Tier 3] [Version 1.05] [ActSeqImpact]","parameters":{"BreakHead":"----------------------------------","ActSeqImpact":"Plugin Parameters","ATTENTION":"READ THE HELP FILE","BreakSettings":"----------------------------------","CriticalColorBreak:struct":"{\"Enable:eval\":\"true\",\"Intensity:num\":\"60\",\"Duration:num\":\"60\",\"EasingType:str\":\"OutBack\"}","DodgeMotionBlur:struct":"{\"Enable:eval\":\"false\",\"Rate:eval\":\"0.5\",\"Duration:num\":\"30\",\"EasingType:str\":\"InOutSine\"}","GuardShockWave:struct":"{\"Enable:eval\":\"false\",\"Amp:num\":\"30\",\"Wave:num\":\"160\",\"Duration:num\":\"30\"}","BreakEnd1":"----------------------------------","End Of":"Plugin Parameters","BreakEnd2":"----------------------------------"}},
{"name":"VisuMZ_4_ButtonCmnEvts","status":false,"description":"[RPG Maker MZ] [Tier 4] [Version 1.04] [ButtonCommonEvents]","parameters":{"BreakHead":"----------------------------------","ButtonCommonEvents":"Plugin Parameters","ATTENTION":"READ THE HELP FILE","BreakSettings":"----------------------------------","General:struct":"{\"ForbidInputKeys:eval\":\"false\",\"Buttons\":\"\",\"ShowButtonsOnScreen:eval\":\"false\",\"ChangeTone:eval\":\"false\",\"HoverTone:eval\":\"[128, 128, 128, 0]\",\"ButtonWidth:num\":\"60\",\"ButtonHeight:num\":\"60\",\"ButtonFilename:str\":\"\",\"IconsUsed:arraynum\":\"[\\\"160\\\",\\\"161\\\",\\\"162\\\",\\\"163\\\",\\\"164\\\",\\\"165\\\"]\",\"DrawJS:func\":\"\\\"// Declare Constants\\\\nconst w = this.width;\\\\nconst h = this.height;\\\\n\\\\n// Draw Background\\\\nconst c1 = ColorManager.itemBackColor1();\\\\nconst c2 = ColorManager.itemBackColor2();\\\\nthis.bitmap.gradientFillRect(1, 1, w-2, h-2, c1, c2, true);\\\\nthis.bitmap.strokeRect(1, 1, w-2, h-2, '#000000');\\\\n\\\\n// Draw Picture\\\\nif (this.pictureBitmap()) {\\\\n    const picBitmap = this.pictureBitmap();\\\\n    const pw = picBitmap.width;\\\\n    const ph = picBitmap.height;\\\\n    this.bitmap.blt(picBitmap, 0, 0, pw, ph, 0, 0, w, h);\\\\n}\\\\n\\\\n// Draw Icon\\\\nconst iconIndex = this.buttonIcon();\\\\nconst iconBitmap = ImageManager.loadSystem(\\\\\\\"IconSet\\\\\\\");\\\\nconst iw = ImageManager.iconWidth;\\\\nconst ih = ImageManager.iconHeight;\\\\nconst ix = (iconIndex % 16) * iw;\\\\nconst iy = Math.floor(iconIndex / 16) * ih;\\\\nconst jw = Math.floor(this.width / iw) * iw;\\\\nconst jh = Math.floor(this.height / ih) * ih;\\\\nconst jx = Math.floor((this.width - jw) / 2);\\\\nconst jy = Math.floor((this.height - jh) / 2);\\\\nthis.bitmap._context.imageSmoothingEnabled = false;\\\\nthis.bitmap.blt(iconBitmap, ix, iy, iw, ih, jx, jy, jw, jh);\\\\nthis.bitmap._context.imageSmoothingEnabled = true;\\\\n\\\\n// Draw Button Label\\\\nconst text = this.buttonLabel();\\\\nthis.bitmap.fontFace = $gameSystem.numberFontFace();\\\\nthis.bitmap.fontSize = $gameSystem.mainFontSize();\\\\nthis.bitmap.drawText(text, 0, 0, w, this.bitmap.fontSize + 4, 'center');\\\"\",\"Positions\":\"\",\"BottomPointJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = Math.floor(container.width / 2) - buttonWidth * 5;\\\\nlet y = container.height - buttonHeight;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\",\"AbovePointJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = Math.floor(container.width / 2) - Math.floor(buttonWidth * 1.5);\\\\nlet y = container.y;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\",\"LeftPointJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = container.x;\\\\nlet y = Math.floor(container.height / 2) - Math.floor(buttonHeight * 1.5);\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\",\"RightPointJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = container.width;\\\\nlet y = Math.floor(container.height / 2) - Math.floor(buttonHeight * 1.5);\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","Assign:struct":"{\"Vocab\":\"\",\"Instruction:str\":\"Assign to which button slot?\",\"Window\":\"\",\"AssignWindow_KeyAlign:str\":\"center\",\"AssignWindow_RectJS:func\":\"\\\"// Declare Constants\\\\nconst slots = arguments[0];\\\\nconst cellSize = (Window_Base.prototype.lineHeight() * 2) + 8;\\\\n\\\\n// Calculate X, Y, W, H\\\\nlet ww = ($gameSystem.windowPadding() * 2) + (slots.length * cellSize);\\\\nww = ww.clamp(Graphics.boxWidth / 3, Graphics.boxWidth);\\\\nlet wh = this.calcWindowHeight(3, true);\\\\nlet wx = Math.round((Graphics.boxWidth - ww) / 2);\\\\nlet wy = Math.round((Graphics.boxHeight - wh) / 2);\\\\n\\\\n// Create Window Rectangle\\\\nreturn new Rectangle(wx, wy, ww, wh);\\\"\"}","NumberKeys":"","KeyCode49:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"true\",\"ShowOnlyIfCePresent:eval\":\"false\",\"ButtonText:str\":\"1\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = bottomPoint.x + buttonWidth * 0;\\\\nlet y = bottomPoint.y;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode50:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"true\",\"ShowOnlyIfCePresent:eval\":\"false\",\"ButtonText:str\":\"2\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = bottomPoint.x + buttonWidth * 1;\\\\nlet y = bottomPoint.y;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode51:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"true\",\"ShowOnlyIfCePresent:eval\":\"false\",\"ButtonText:str\":\"3\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = bottomPoint.x + buttonWidth * 2;\\\\nlet y = bottomPoint.y;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode52:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"true\",\"ShowOnlyIfCePresent:eval\":\"false\",\"ButtonText:str\":\"4\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = bottomPoint.x + buttonWidth * 3;\\\\nlet y = bottomPoint.y;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode53:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"true\",\"ShowOnlyIfCePresent:eval\":\"false\",\"ButtonText:str\":\"5\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = bottomPoint.x + buttonWidth * 4;\\\\nlet y = bottomPoint.y;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode54:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"true\",\"ShowOnlyIfCePresent:eval\":\"false\",\"ButtonText:str\":\"6\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = bottomPoint.x + buttonWidth * 5;\\\\nlet y = bottomPoint.y;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode55:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"true\",\"ShowOnlyIfCePresent:eval\":\"false\",\"ButtonText:str\":\"7\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = bottomPoint.x + buttonWidth * 6;\\\\nlet y = bottomPoint.y;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode56:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"true\",\"ShowOnlyIfCePresent:eval\":\"false\",\"ButtonText:str\":\"8\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = bottomPoint.x + buttonWidth * 7;\\\\nlet y = bottomPoint.y;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode57:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"true\",\"ShowOnlyIfCePresent:eval\":\"false\",\"ButtonText:str\":\"9\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = bottomPoint.x + buttonWidth * 8;\\\\nlet y = bottomPoint.y;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode48:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"true\",\"ShowOnlyIfCePresent:eval\":\"false\",\"ButtonText:str\":\"0\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = bottomPoint.x + buttonWidth * 9;\\\\nlet y = bottomPoint.y;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","LetterKeys":"","KeyCode65:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"A\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = leftPoint.x + buttonWidth  * 0;\\\\nlet y = leftPoint.y + buttonHeight * 1;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode66:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"B\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = leftPoint.x + buttonWidth  * 4;\\\\nlet y = leftPoint.y + buttonHeight * 2;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode67:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"C\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = leftPoint.x + buttonWidth  * 2;\\\\nlet y = leftPoint.y + buttonHeight * 2;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode68:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"D\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = leftPoint.x + buttonWidth  * 2;\\\\nlet y = leftPoint.y + buttonHeight * 1;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode69:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"E\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = leftPoint.x + buttonWidth  * 2;\\\\nlet y = leftPoint.y + buttonHeight * 0;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode70:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"F\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = leftPoint.x + buttonWidth  * 3;\\\\nlet y = leftPoint.y + buttonHeight * 1;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode71:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"G\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = leftPoint.x + buttonWidth  * 4;\\\\nlet y = leftPoint.y + buttonHeight * 1;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode72:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"H\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = leftPoint.x + buttonWidth  * 5;\\\\nlet y = leftPoint.y + buttonHeight * 1;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode73:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"I\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = leftPoint.x + buttonWidth  * 7;\\\\nlet y = leftPoint.y + buttonHeight * 0;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode74:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"J\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = leftPoint.x + buttonWidth  * 6;\\\\nlet y = leftPoint.y + buttonHeight * 1;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode75:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"K\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = leftPoint.x + buttonWidth  * 7;\\\\nlet y = leftPoint.y + buttonHeight * 1;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode76:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"L\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = leftPoint.x + buttonWidth  * 8;\\\\nlet y = leftPoint.y + buttonHeight * 1;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode77:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"M\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = leftPoint.x + buttonWidth  * 6;\\\\nlet y = leftPoint.y + buttonHeight * 2;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode78:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"N\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = leftPoint.x + buttonWidth  * 5;\\\\nlet y = leftPoint.y + buttonHeight * 2;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode79:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"O\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = leftPoint.x + buttonWidth  * 8;\\\\nlet y = leftPoint.y + buttonHeight * 0;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode80:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"P\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = leftPoint.x + buttonWidth  * 9;\\\\nlet y = leftPoint.y + buttonHeight * 0;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode81:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"Q\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = leftPoint.x + buttonWidth  * 0;\\\\nlet y = leftPoint.y + buttonHeight * 0;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode82:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"R\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = leftPoint.x + buttonWidth  * 3;\\\\nlet y = leftPoint.y + buttonHeight * 0;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode83:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"S\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = leftPoint.x + buttonWidth  * 1;\\\\nlet y = leftPoint.y + buttonHeight * 1;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode84:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"T\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = leftPoint.x + buttonWidth  * 4;\\\\nlet y = leftPoint.y + buttonHeight * 0;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode85:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"U\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = leftPoint.x + buttonWidth  * 6;\\\\nlet y = leftPoint.y + buttonHeight * 0;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode86:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"V\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = leftPoint.x + buttonWidth  * 3;\\\\nlet y = leftPoint.y + buttonHeight * 2;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode87:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"W\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = leftPoint.x + buttonWidth  * 1;\\\\nlet y = leftPoint.y + buttonHeight * 0;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode88:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"X\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = leftPoint.x + buttonWidth  * 1;\\\\nlet y = leftPoint.y + buttonHeight * 2;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode89:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"Y\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = leftPoint.x + buttonWidth  * 5;\\\\nlet y = leftPoint.y + buttonHeight * 0;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode90:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"Z\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = leftPoint.x + buttonWidth  * 0;\\\\nlet y = leftPoint.y + buttonHeight * 2;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","SymbolKeys":"","KeyCode192:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"~\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = bottomPoint.x - buttonWidth * 1;\\\\nlet y = bottomPoint.y;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode189:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"-\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = bottomPoint.x + buttonWidth * 10;\\\\nlet y = bottomPoint.y;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode187:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"+\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = bottomPoint.x + buttonWidth * 11;\\\\nlet y = bottomPoint.y;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode219:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"[\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = leftPoint.x + buttonWidth  * 10;\\\\nlet y = leftPoint.y + buttonHeight * 0;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode221:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"]\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = leftPoint.x + buttonWidth  * 11;\\\\nlet y = leftPoint.y + buttonHeight * 0;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode220:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"\\\\\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = leftPoint.x + buttonWidth  * 12;\\\\nlet y = leftPoint.y + buttonHeight * 0;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode186:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\";\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = leftPoint.x + buttonWidth  * 9;\\\\nlet y = leftPoint.y + buttonHeight * 1;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode222:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"\\\"\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = leftPoint.x + buttonWidth  * 10;\\\\nlet y = leftPoint.y + buttonHeight * 1;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode188:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"<\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = leftPoint.x + buttonWidth  * 7;\\\\nlet y = leftPoint.y + buttonHeight * 2;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode190:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\">\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = leftPoint.x + buttonWidth  * 8;\\\\nlet y = leftPoint.y + buttonHeight * 2;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode191:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"?\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = leftPoint.x + buttonWidth  * 9;\\\\nlet y = leftPoint.y + buttonHeight * 2;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","MiscKeys":"","KeyCode32:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"Space\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = container.x;\\\\nlet y = container.height - buttonHeight * 1;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode37:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"<<\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = container.width - buttonWidth   * 3;\\\\nlet y = container.height - buttonHeight * 1;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode38:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"^\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = container.width - buttonWidth   * 2;\\\\nlet y = container.height - buttonHeight * 2;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode39:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\">>\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = container.width - buttonWidth   * 1;\\\\nlet y = container.height - buttonHeight * 1;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode40:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"v\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = container.width - buttonWidth   * 2;\\\\nlet y = container.height - buttonHeight * 1;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode45:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"Ins\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = abovePoint.x + buttonWidth  * 0;\\\\nlet y = abovePoint.y + buttonHeight * 0;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode46:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"Del\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = abovePoint.x + buttonWidth  * 0;\\\\nlet y = abovePoint.y + buttonHeight * 1;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode36:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"Home\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = abovePoint.x + buttonWidth  * 1;\\\\nlet y = abovePoint.y + buttonHeight * 0;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode35:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"End\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = abovePoint.x + buttonWidth  * 1;\\\\nlet y = abovePoint.y + buttonHeight * 1;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode33:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"PgUp\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = abovePoint.x + buttonWidth  * 2;\\\\nlet y = abovePoint.y + buttonHeight * 0;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode34:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"PgDn\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = abovePoint.x + buttonWidth  * 2;\\\\nlet y = abovePoint.y + buttonHeight * 1;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","NumPadKeys":"","KeyCode96:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"0\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = rightPoint.x - buttonWidth  * 3;\\\\nlet y = rightPoint.y + buttonHeight * 3;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode97:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"1\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = rightPoint.x - buttonWidth  * 3;\\\\nlet y = rightPoint.y + buttonHeight * 2;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode98:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"2\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = rightPoint.x - buttonWidth  * 2;\\\\nlet y = rightPoint.y + buttonHeight * 2;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode99:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"3\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = rightPoint.x - buttonWidth  * 1;\\\\nlet y = rightPoint.y + buttonHeight * 2;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode100:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"4\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = rightPoint.x - buttonWidth  * 3;\\\\nlet y = rightPoint.y + buttonHeight * 1;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode101:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"5\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = rightPoint.x - buttonWidth  * 2;\\\\nlet y = rightPoint.y + buttonHeight * 1;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode102:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"6\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = rightPoint.x - buttonWidth  * 1;\\\\nlet y = rightPoint.y + buttonHeight * 1;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode103:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"7\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = rightPoint.x - buttonWidth  * 3;\\\\nlet y = rightPoint.y + buttonHeight * 0;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode104:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"8\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = rightPoint.x - buttonWidth  * 2;\\\\nlet y = rightPoint.y + buttonHeight * 0;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode105:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"9\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = rightPoint.x - buttonWidth  * 1;\\\\nlet y = rightPoint.y + buttonHeight * 0;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode110:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\".\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = rightPoint.x - buttonWidth  * 2;\\\\nlet y = rightPoint.y + buttonHeight * 3;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode107:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"+\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = rightPoint.x - buttonWidth  * 1;\\\\nlet y = rightPoint.y + buttonHeight * 3;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode109:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"-\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = rightPoint.x - buttonWidth  * 1;\\\\nlet y = rightPoint.y - buttonHeight * 1;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode106:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"*\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = rightPoint.x - buttonWidth  * 2;\\\\nlet y = rightPoint.y - buttonHeight * 1;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","KeyCode111:struct":"{\"CommonEventID:num\":\"0\",\"Buttons\":\"\",\"ShowButton:eval\":\"false\",\"ShowOnlyIfCePresent:eval\":\"true\",\"ButtonText:str\":\"/\",\"ButtonIcon:num\":\"0\",\"PositionJS:func\":\"\\\"// Declare Constants\\\\nconst container = this;\\\\nconst buttonWidth = this.buttonWidth();\\\\nconst buttonHeight = this.buttonHeight();\\\\n\\\\nconst bottomPoint = this.bottomPoint();\\\\nconst abovePoint = this.abovePoint();\\\\nconst leftPoint = this.leftPoint();\\\\nconst rightPoint = this.rightPoint();\\\\n\\\\n// Calculate Coordinates\\\\nlet x = rightPoint.x - buttonWidth  * 3;\\\\nlet y = rightPoint.y - buttonHeight * 1;\\\\n\\\\n// Return Coordinates\\\\nreturn new Point(x, y);\\\"\"}","BreakEnd1":"----------------------------------","End Of":"Plugin Parameters","BreakEnd2":"----------------------------------"}},
{"name":"VisuMZ_4_EncounterEffects","status":false,"description":"[RPG Maker MZ] [Tier 4] [Version 1.08] [EncounterEffects]","parameters":{"BreakHead":"----------------------------------","EncounterEffects":"Plugin Parameters","ATTENTION":"READ THE HELP FILE","BreakSettings":"----------------------------------","Advantage:struct":"{\"Preemptive:num\":\"0\",\"Surprise:num\":\"0\",\"Normal:num\":\"0\"}","Alert:struct":"{\"Alert\":\"\",\"AlertRange:num\":\"3\",\"AlertDash:eval\":\"true\",\"AlertLock:num\":\"200\",\"FoV\":\"\",\"FovAngle:num\":\"360\",\"ShowFoV:eval\":\"false\",\"FovColor1:str\":\"rgba(255, 0, 0, 0)\",\"FovColor2:str\":\"rgba(255, 0, 0, 0.5)\",\"Response\":\"\",\"ResponseType:str\":\"chase\",\"ResponseBalloon:str\":\"User-defined 1\",\"CommonEvent:num\":\"0\",\"ReactDelay:num\":\"1\",\"Sound\":\"\",\"SoundName:str\":\"ALPH_enemysight\",\"SoundVolume:num\":\"100\",\"SoundPitch:num\":\"120\",\"SoundPan:num\":\"0\",\"Return\":\"\",\"ReturnHome:eval\":\"true\",\"ReturnWait:num\":\"60\",\"ReturnStartBalloon:str\":\"User-defined 1\",\"ReturnEndBalloon:str\":\"User-defined 1\"}","EncounterMultiplier:struct":"{\"BushMultiplier:num\":\"2.00\",\"BoatMultiplier:num\":\"1.00\",\"ShipMultiplier:num\":\"0.50\"}","RepelLure:struct":"{\"RepelVariable:num\":\"0\",\"RepelEvent:num\":\"0\",\"LureVariable:num\":\"32\",\"LureEvent:num\":\"0\",\"LureRate:num\":\"4.0\",\"LureFlat:num\":\"1\"}","BreakEnd1":"----------------------------------","End Of":"Plugin Parameters","BreakEnd2":"----------------------------------"}},
{"name":"GALV_EventSpawnerMZ","status":false,"description":"(v.1.2) Spawn events from a specified spawn map to a desired location.","parameters":{"mId":"023"}},
{"name":"Cyclone-Movement","status":true,"description":"Adds new movement features to the game v1.01.02\n\n<pluginName:CycloneMovement>","parameters":{"stepCount":"4","collisionStepCount":"4","followerStepsBehind":"7","triggerAllEvents":"false","ignoreEmptyEvents":"false","autoLeaveVehicles":"false","diagonalPathfinding":"false","disableMouseMovement":"false","maxOffset":"0.25","sidestepEvents":"false","playerHitbox":"{\"x\":\"0\",\"y\":\"24\",\"width\":\"36\",\"height\":\"18\"}"}},
{"name":"Ramza_PreTitleSplash_MZ","status":false,"description":"v1.02 Enables a configurable splash screen which shows images, or plays videos in sequence prior to the title screen.","parameters":{"SkipMode":"Current","Screens":"[\"{\\\"Type\\\":\\\"Video\\\",\\\"File\\\":\\\"/movies/splash-improved.webm\\\",\\\"CustomHold\\\":\\\"\\\"}\"]","WaitFrames":"120","FadeInFrames":"30","FadeOutFrames":"0","HoldFrames":"360"}},
{"name":"ODUE_scripts","status":false,"description":"omat scriptit","parameters":{"OS":"lin"}},
{"name":"Cyclone-Map-Editor","status":false,"description":"Live Map Editor - v1.12.01\n\n<pluginName:CycloneMapEditor>","parameters":{"regionIcons":"","Status Bar":"","showMapId":"true","showTilesetId":"true","showPosition":"true","showCellTiles":"true","showRegionId":"true","showTag":"true","showCollision":"true","showLadder":"true","showBush":"true","showCounter":"true","showDamageFloor":"true","collisionStepCount":"4"}},
{"name":"MPP_EncounterEffect","status":false,"description":"Change the effect at the time of encounter to a special effect.","parameters":{"Effect Type":"3","Effect Color":"255,255,255"}},
{"name":"SRD_UltraBase","status":false,"description":"Contains code required for HUD Maker Ultra. Does not affect the RPG Maker codebase.","parameters":{}},
{"name":"SRD_HUDMakerUltra","status":false,"description":"Allows you to create and use HUDs for the map and battles.\nRequires the HUD Maker Ultra editor.","parameters":{"Auto-Reload HUD Data":"false","Enable Screenshots":"false","Hide Battle Status Window":"true","Hide Battle Selection Window":"true","Fade During Events":"false","Event Fade Opacity":"125","Fade Duration":"10","Map Visibility Code":"return true;","Battle Visibility Code":"return true;"}},
{"name":"MPP_SmoothBattleLog2","status":false,"description":"Change the display method and behavior of the battle log to speed up the progress of the battle.","parameters":{"Log Type":"1-line","Max Lines":"2","Message Speed":"8","View Duration":"0","Font Size":"26","Wait New Line?":"false","Start Messages On Log?":"false","Log Command":"Battle Log"}},
{"name":"MOG_BattlebackEX","status":false,"description":"(v1.0) Adiciona multiplos battlebacks no campo de batalha.","parameters":{}},
{"name":"Cae_DisableEventStart","status":false,"description":"v1.5 - Can stop events from starting and/or apply visual freeze while a switch is on.","parameters":{"Switch ID":"90","--- Disable Options ---":"","Trigger Disable":"true","Disable Exception":"&&","--- Freeze Options ---":"","Freeze Effect":"Instant","Freeze Exception":"##","Ignore Frozen Moves":"true"}},
{"name":"TextPicture","status":true,"description":"Displays text as a picture.","parameters":{}},
{"name":"MOG_BattleHud","status":false,"description":"(v1.1) Permite customizar o layout de batalha.","parameters":{"-> MAIN <<<<<<<<<<<<<<<<<<<<<<<":"","Hud X-Axis":"-470","Hud Y-Axis":"480","Hud Space X":"0","Hud Space Y":"0","Hud Slide X":"0","Hud Slide Y":"250","Vertical Mode":"false","Max Battle Members":"4","":"","-> LAYOUT OVERLAY <<<<<<<<<<<<<<<<<<<<<<<":"","Layout2 Visible":"false","Layout2 X-Axis":"0","Layout2 Y-Axis":"-15","-> TURN <<<<<<<<<<<<<<<<<<<<<<<":"","Turn Visible":"false","Turn X-Axis":"-5","Turn Y-Axis":"-160","Turn Rotation Speed":"0","Turn Zoom Animation":"true","-> FACE <<<<<<<<<<<<<<<<<<<<<<<":"","Face Visible":"true","Face X-Axis":"30","Face Y-Axis":"40","Face Shake Animation":"true","Face Zoom Animation":"true","Face Frame Animation":"true","Face Priority":"0","-> NAME <<<<<<<<<<<<<<<<<<<<<<<":"","Name Visible":"true","Name X-Axis":"-65","Name Y-Axis":"84","Name Align":"1","Name Font Size":"20","Name Bold Size":"4","Name Font Italic":"false","-> HP <<<<<<<<<<<<<<<<<<<<<<<":"","HP Meter Visible":"true","HP Meter X-Axis":"105","HP Meter Y-Axis":"81","HP Meter Angle":"-90","HP Meter Flow Anime":"true","HP Number Visible":"true","HP Number Align type":"1","HP Number X-Axis":"114","HP Number Y-Axis":"89","MaxHP Number Visible":"true","MaxHP Number X-Axis":"114","MaxHP Number Y-Axis":"105","-> MP <<<<<<<<<<<<<<<<<<<<<<<":"","MP Meter Visible":"true","MP Meter X-Axis":"140","MP Meter Y-Axis":"81","MP Meter Angle":"-90","MP Meter Flow Anime":"true","MP Number Visible":"true","MP Number Align type":"1","MP Number X-Axis":"149","MP Number Y-Axis":"89","MaxMP Number Visible":"true","MaxMP Number X-Axis":"149","MaxMP Number Y-Axis":"105","-> TP <<<<<<<<<<<<<<<<<<<<<<<":"","TP Meter Visible":"false","TP Meter X-Axis":"104","TP Meter Y-Axis":"59","TP Meter Angle":"0","TP Meter Flow Anime":"true","TP Number Visible":"false","TP Number Align type":"0","TP Number X-Axis":"187","TP Number Y-Axis":"43","MaxTP Number Visible":"false","MaxTP Number X-Axis":"0","MaxTP Number Y-Axis":"0","-> ATB <<<<<<<<<<<<<<<<<<<<<<<":"","ATB Meter Visible":"false","ATB Meter X-Axis":"69","ATB Meter Y-Axis":"117","ATB Meter Angle":"0","ATB Meter Flow Anime":"true","-> STATES <<<<<<<<<<<<<<<<<<<<<<<":"","States Visible":"false","States X-Axis":"102","States Y-Axis":"76","States Mode":"0","States Max":"4","States Align":"0","-> W COMMAND <<<<<<<<<<<<<<<<<<<<<<<":"","Command Auto Adjust":"0","W Command X-Axis":"800","W Command Y-Axis":"120","W Command Width":"0","W Command Height":"0","W Command Slide X":"0","W Command Slide Y":"240","Layout Command":"true","L Command X-Axis":"-20","L Command Y-Axis":"-25","-> W PARTY <<<<<<<<<<<<<<<<<<<<<<<":"","W Party X-Axis":"325","W Party Y-Axis":"170","W Party Width":"0","W Party Height":"0","W Party Slide X":"0","W Party Slide Y":"-100","Layout Party":"true","L Party X-Axis":"-325","L Party Y-Axis":"-42","-> W HELP <<<<<<<<<<<<<<<<<<<<<<<":"","W Help X-Axis":"0","W Help Y-Axis":"-15","W Help Width":"0","W Help Height":"0","W Help Slide X":"0","W Help Slide Y":"-110","Layout Help":"true","L Help X-Axis":"0","L Help Y-Axis":"0","-> W SKILL <<<<<<<<<<<<<<<<<<<<<<<":"","W Skill X-Axis":"0","W Skill Y-Axis":"0","W Skill Width":"0","W Skill Height":"0","W Skill maxCols":"2","W Skill Slide X":"0","W Skill Slide Y":"250","Layout Skill":"true","L Skill X-Axis":"0","L Skill Y-Axis":"-67","-> W ITEM <<<<<<<<<<<<<<<<<<<<<<<":"","W Item X-Axis":"0","W Item Y-Axis":"0","W Item Width":"0","W Item Height":"0","W Item maxCols":"2","W Item Slide X":"0","W Item Slide Y":"250","Layout Item":"true","L Item X-Axis":"0","L Item Y-Axis":"-67","-> W ACTOR <<<<<<<<<<<<<<<<<<<<<<<":"","W Actor X-Axis":"0","W Actor Y-Axis":"0","W Actor Width":"200","W Actor Height":"0","W Actor maxCols":"1","W Actor Slide X":"0","W Actor Slide Y":"50","Layout Actor":"true","L Actor X-Axis":"0","L Actor Y-Axis":"-67","-> W ENEMY <<<<<<<<<<<<<<<<<<<<<<<":"","W Enemy X-Axis":"0","W Enemy Y-Axis":"0","W Enemy Width":"200","W Enemy Height":"0","W Enemy maxCols":"2","W Enemy Slide X":"0","W Enemy Slide Y":"50","Layout Enemy":"true","L Enemy X-Axis":"0","L Enemy Y-Axis":"-67","-> SCREEN LAYOUT <<<<<<<<<<<<<<<<<<<<<<<":"","Screen Layout":"true","Screen X-Axis":"0","Screen Y-Axis":"0","-> CUSTOM POSITION <<<<<<<<<<<<<<<<<<<<<<<":"","Custom Position 1":"","Custom Position 2":"","Custom Position 3":"","Custom Position 4":"","Custom Position 5":"","Custom Position 6":"","Custom Position 7":"","Custom Position 8":""}},
{"name":"MOG_BattlerMotion","status":false,"description":"(v1.0) Adiciona efeitos animados nos battlers.","parameters":{"Default Damage Motion":"0","Damage Motion Actor":"false","Damage Motion Enemy":"true","Disable Blink Damage":"true","Actor Action Motion":"true","Enemy Action Motion":"true","Shadow (Float Motion)":"false","Shadow Opacity":"170","Shadow Zoom Effect":"true","Battleback Ground Height":"200"}},
{"name":"EST_ENEMY_IMAGE_CONTROL_MZ","status":false,"description":"Changing enemy image when below certain %mhp\n<EST ENEMY IMAGE CONTROL MZ>","parameters":{"suffixList":"[\"{\\\"suffix\\\":\\\"h\\\",\\\"stateAffected\\\":\\\"[]\\\",\\\"percentHP\\\":\\\"50\\\",\\\"percentMP\\\":\\\"100\\\",\\\"priority\\\":\\\"7\\\"}\",\"{\\\"suffix\\\":\\\"weak_30\\\",\\\"stateAffected\\\":\\\"[]\\\",\\\"percentHP\\\":\\\"30\\\",\\\"percentMP\\\":\\\"100\\\",\\\"priority\\\":\\\"6\\\"}\",\"{\\\"suffix\\\":\\\"d\\\",\\\"stateAffected\\\":\\\"[]\\\",\\\"percentHP\\\":\\\"20\\\",\\\"percentMP\\\":\\\"100\\\",\\\"priority\\\":\\\"5\\\"}\"]"}},
{"name":"MOG_EmergeMotion","status":false,"description":"(v1.0) Adiciona a animação dos inimigos emergindo.","parameters":{"Initial Wait":"60","Wait for the Next":"15"}},
{"name":"MOG_BattleCursor","status":false,"description":"(v1.0) Adiciona o cursor do alvo.","parameters":{"-> GENERAL":"","Target Window":"false","Slide Effect":"true","Move Speed":"200","Float Effect":"true","Align for Actor":"Above","Align for Enemy":"Above","X-Axis Offset Actor":"0","Y-Axis Offset Actor":"0","X-Axis Offset Enemy":"0","Y-Axis Offset Enemy":"-250","-----------------------":"","-> NAME":"","Name Visible":"false","Font Size":"18","Font Bold":"false","Font Italic":"false","Name X-Axis Actor":"0","Name Y-Axis Actor":"0","Name X-Axis Enemy":"0","Name Y-Axis Enemy":"0","------------------------":"","-> ANIMATED":"","Animated":"true","Frames":"3","Animation Speed":"8"}}
];
