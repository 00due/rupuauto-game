//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.74;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.74] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 *
 * ---
 * 
 * <Target: Ally or Enemy>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target allies or enemies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to allies first.
 * - Ignored when used by enemies and will be treated as an ally scope.
 * - Auto-battle actors will also treat this action as an ally scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Target: Enemy or Ally>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target enemies or allies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to enemies first.
 * - Ignored when used by enemies and will be treated as an enemy scope.
 * - Auto-battle actors will also treat this action as an enemy scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Single or Multiple Select>
 * 
 * - Used for: Skill, Item Notetags
 * - Requires an original scope that can select individual targets.
 * - This will allow the skill/item to be able to select either single targets
 *   or multiple targets at once.
 *   - In order to select "all enemies", the player must press the "Page Up"
 *     keyboard button or the visual on screen "All Enemies" button.
 *   - In order to select "all allies", the player must press the "Page Down"
 *     keyboard button or the visual on screen "All Allies" button.
 *   - Those wondering why this isn't regulated to a command left or right of
 *     the enemies and actors is because mouse controls and touch controls
 *     would not be able to select all enemies or all allies that way.
 *   - This can NOT be used with single dead ally scopes.
 * - If there is an enemy with Taunt or Provoke, the option to select
 *   "All Enemies" does not become possible.
 * - The enemy AI and Auto-Battle actor AI will NOT make use of the ability to
 *   toggle between single and multiple target scopes. They will only use the
 *   single target versions of these skills.
 * 
 * ---
 * 
 * <Disperse Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause any damage dealt by this skill to be split equally amongst
 *   all targets of the skill including repeats.
 *   - For basic attacks, any damage reduction added attack trait totals will
 *     by reverted.
 * - This does NOT have to be used with <Single or Multiple Select> notetag and
 *   can be used by itself for an "All" scope, making the skill/item deal less
 *   damage if there's more enemies and more damage if there's less enemies.
 * 
 * ---
 * 
 * <Cannot Target User>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause the action to be unable to select the user as the target.
 * - This is not a targeting scope. Instead, it is used in addition to any
 *   other targeting scopes out there.
 * - When used with "All" scopes, the user is removed from the target pool.
 * - This is also applied outside of battle.
 * - If the user somehow enters the target pool, the user is then replaced by
 *   a random ally found in the party.
 * 
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - Those with VisuMZ_3_FrontviewBattleUI can use 'frontview'.
 * - Those with VisuMZ_3_SideviewBattleUI can use 'sideview'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags and Troop Comment Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 * 
 * === Action Sequences - Cutins ===
 * 
 * Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Add Visual Cutin Effect
 * - Adds the Visual Cutin Effect using these desired settings.
 * - Only one of each cutin-style type can be present at a time.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Basic Settings:
 * 
 *     Cutin Style Type:
 *     - What Visual Cutin Effect style type do you wish to use?
 *     - Only one of each cutin-style type can be present.
 *     - Refer to VisuMZ wiki for visuals on styles.
 * 
 *     Portrait Target:
 *     - Select unit(s) to grab the Visual Cutin Effect portrait data from.
 *     - First unit will be used to make portrait.
 * 
 *     Parallax Filename:
 *     - Pick a parallax to use for the Visual Cutin Effect.
 *     - Pick (None) to not use a parallax.
 * 
 *     Background Color:
 *     - Use #rrggbb for custom colors or regular numbers for text colors from
 *       the Window Skin.
 *
 *   Extra Settings:
 *   - Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 *   - An explanation for these settings are found in the Visual Cutin Effect
 *     help file and documentation.
 *   - Extra parameters are added for Parallax Scroll Inversion when the target
 *     is an enemy.
 * 
 *   Wait for Entrance:
 *   - Wait until cutin entrance is finished before performing the next
 *     event command?
 * 
 * ---
 *
 * CUTIN: End Visual Cutin Effect (All)
 * - Ends all Visual Cutin Effects currently present.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 *
 * CUTIN: End Visual Cutin Effect (Type)
 * - Ends the Visual Cutin Effect with the matching type.
 * - Requires VisuMZ_3_VisualCutinEffect!
 *
 *   Cutin Style Type:
 *   - What Visual Cutin Effect style type do you wish to end?
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 * 
 * CUTIN: Wait for Cutin Entrance
 * - Wait until all cutin entrances are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Wait for Cutin Exit
 * - Wait until all cutin exits are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 * 
 * MECH: Active Chain Input Disable
 * - Disables input for Active Chain Skills at this time.
 * - Requires VisuMZ_3_ActiveChainSkills!
 * 
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   End Battle Show?:
 *   - Show or hide popups upon victory or escape?
 *   - Used to hide battle-state removal popups.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Multi-Target Windows Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters adjust how the Multi-Target Windows appear
 * in battle. These windows are visible when selecting an enemy or actor while
 * using a skill/item that has the <Single or Multiple Select> notetag.
 * 
 * Those wondering why this isn't regulated to a command left or right of the
 * enemies and actors is because mouse controls and touch controls would not be
 * able to select all enemies or all allies that way.
 *
 * ---
 * 
 * Properties
 * 
 *   Window Width:
 *   - What is the width used for the Multi-Target Window?
 * 
 *   Background Type:
 *   - Select background type for these windows.
 * 
 *   Show Button:
 *   - Shows the keyboard/controller button to press?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 * ---
 * 
 * Vocab
 * 
 *   All Actors:
 *   - What is the text used for the "All Actors" button?
 * 
 *   All Enemies:
 *   - What is the text used for the "All Enemies" button?
 * 
 * ---
 * 
 * Offsets > Actor Offsets
 * Offsets > Enemy Offsets
 * 
 *   Offset X:
 *   - Offsets the button's x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the button's y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 * 
 *   Shake Flinch:
 *   - Perform a shake flinch when taking damage?
 * 
 *     Max Duration:
 *     - Maximum duration a shake flinch can have.
 *     - This is reduced relative to the amount of damage taken.
 * 
 *     Max Power:
 *     - The power rating of a shake flinch at full damage.
 *     - This is reduced relative to the amount of damage taken.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Animation Duration:
 *   - How many frames should gauges animate themselves?
 *   - Default: 20 frames.
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.74: February 16, 2023
 * * Bug Fixes!
 * ** Fixed a bug that would cause a crash if your basic attack skill somehow
 *    manages to target neither an enemy nor an actor. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Auto-action sequence for jumping forward and attacking is now reinstated
 *    so that it's only disabled when the target and user are on the same side.
 *    If there is no target, a jump still occurs for visual player feedback.
 *    Update made by Olivia.
 * * New Features!
 * ** New notetag effect added by Olivia and sponsored by AndyL:
 * *** <Cannot Target User>
 * **** This will cause the action to be unable to select the user as target.
 * **** This is not a targeting scope. Instead, it is used in addition to any
 *      other targeting scopes out there.
 * 
 * Version 1.73: January 20, 2023
 * * Bug Fixes!
 * ** Active TPB custom action sequences will no longer play differently due to
 *    queued inputting actors causing motion refreshes. Fix made by Arisu.
 * ** Corrected and updated Anti-Tint UI animation offsets for MV animations.
 *    Fix made by Irina.
 * ** Fixed a problem with Sideview Battlers not working properly. Fix made
 *    by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for to add the following text to the <Target: x>
 *    notetag entries in order to avoid confusion.
 * *** This will overwrite the existing database scope and ignore the
 *     database's existing scope in favor of this.
 * * Feature Update!
 * ** <Extend: x> Troop Name Tag is now also usable as a Troop Comment Tag.
 * ** Action Sequence targeting has been updated with two new types "special"
 *    and "special x", to be used for future plugins.
 * * New Features!
 * ** New Notetags added by Irina and sponsored by AndyL:
 * *** <Target: Ally or Enemy>
 * *** <Target: Enemy or Ally>
 * **** Allows the player to target allies or enemies with the skill/item.
 * **** See help file for more information.
 * *** <Single or Multiple Select>
 * **** This will allow the skill/item to be able to select either single
 *      targets or multiple targets at once.
 * **** See help file for more information.
 * *** <Disperse Damage>
 * **** This will cause any damage dealt by this skill to be split equally
 *      amongst all targets of the skill including repeats.
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Multi-Target Windows
 * **** Settings that alter the Multi-Target Windows in battle.
 * 
 * Version 1.72: December 15, 2022
 * * Bug Fixes!
 * ** Fixed a transformation of a sideview enemy to a static enemy and back not
 *    working properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Feature!
 * ** New Plugin Parameter added by Irina!
 * *** Plugin Parameters > HP Gauges > Settings > Animation Duration
 * **** How many frames should gauges animate themselves? Default: 20 frames.
 * ** New Plugin Parameters added by Yanfly!
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Power
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Duration
 * **** These new plugin parameters will cause targets that take HP damage to
 *      shake (in addition to a regular flinch) to provide better visual
 *      feedback to the player.
 * **** Shake Flinch will be kept disabled by default and only turned on when
 *      you want it to be.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.71: November 10, 2022
 * ** Fixed a problem with repeating animations from Visual State Effects
 *    causing softlocks. Fix made by Olivia.
 * 
 * Version 1.70: October 6, 2022
 * * Bug Fixes!
 * ** Fixed a problem with the "Border" style where if a battle portrait
 *    changed midway through the battle, the portrait shown didn't actually
 *    update properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** MECH: Active Chain Input Disable
 * **** Disables input for Active Chain Skills at this time.
 * **** Requires VisuMZ_3_ActiveChainSkills!
 * ** New Plugin Parameter added by Olivia and sponsored by Anon:
 * *** Plugin Parameters > Damage Settings > Popups > End Battle Show?
 * **** Show or hide popups upon victory or escape?
 * **** Used to hide battle-state removal popups.
 * 
 * Version 1.69: September 7, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Documentation Update!
 * ** Added notes to the following Action Sequences:
 * *** MOTION: Clear Freeze Frame and MOTION: Freeze Motion Frame
 * **** Only applies to sprite sheets.
 * **** Does NOT work with Dragonbones.
 * **** Use "DB: Dragonbones Time Scale" instead.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCutin
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCutin
 * @text Action Sequences - Cutins
 * @desc Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_AddVisualCutinEffect
 * @text CUTIN: Add Visual Cutin Effect
 * @desc Adds the Visual Cutin Effect using these desired settings.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg Basic
 * @text Basic Settings
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @parent Basic
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to use?
 * Only one of each cutin-style type can be present.
 * @default CenterHorzSpan
 * 
 * @arg Targets:arraystr
 * @text Portrait Target
 * @parent Basic
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to grab the Visual Cutin Effect portrait
 * data from. First unit will be used to make portrait.
 * @default ["user"]
 *
 * @arg parallaxFilename:str
 * @text Parallax Filename
 * @parent Basic
 * @type file
 * @dir img/parallaxes/
 * @require 1
 * @desc Pick a parallax to use for the Visual Cutin Effect.
 * Pick (None) to not use a parallax.
 * @default >>>ATTENTION<<<
 *
 * @arg bgColor:str
 * @text Background Color
 * @parent Basic
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #888888
 *
 * @arg ExtraSettings:struct
 * @text Extra Settings
 * @type struct<VisualCutinEffect>
 * @desc Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 * @default {}
 * 
 * @arg WaitForEntrance:eval
 * @text Wait For Entrance
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin entrance is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectAll
 * @text CUTIN: End Visual Cutin Effect (All)
 * @desc Ends all Visual Cutin Effects currently present.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectType
 * @text CUTIN: End Visual Cutin Effect (Type)
 * @desc Ends the Visual Cutin Effect with the matching type.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to end?
 * @default CenterHorzSpan
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForEntrance
 * @text CUTIN: Wait for Cutin Entrance
 * @desc Wait until all cutin entrances are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForExit
 * @text CUTIN: Wait for Cutin Exit
 * @desc Wait until all cutin exits are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 360
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActiveChainInputDisable
 * @text MECH: Active Chain Input Disable
 * @desc Disables input for Active Chain Skills at this time.
 * Requires VisuMZ_3_ActiveChainSkills!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 * 
 * @param MultiTarget:struct
 * @text Multi-Target Windows
 * @type struct<MultiTarget>
 * @desc Settings that alter the Multi-Target Windows in battle.
 * @default {"Properties":"","WindowWidth:num":"280","BgType:num":"2","ShowButton:eval":"true","Vocab":"","AllActorsText:str":"All Allies","AllEnemiesText:str":"All Enemies","Offsets":"","ActorOffsets":"","ActorOffsetX:num":"+0","ActorOffsetY:num":"+0","EnemyOffsets":"","EnemyOffsetX:num":"+0","EnemyOffsetY:num":"+0"}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param EndBattlePopups:eval
 * @text End Battle Show?
 * @parent Popups
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide popups upon victory or escape?
 * Used to hide battle-state removal popups.
 * @default true
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Frontview Battle UI - Requires VisuMZ_3_FrontviewBattleUI
 * @value frontview_ui
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Multi-Target Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~MultiTarget:
 *
 * @param Properties
 * 
 * @param WindowWidth:num
 * @text Window Width
 * @parent Properties
 * @type number
 * @min 1
 * @desc What is the width used for the Multi-Target Window?
 * @default 280
 *
 * @param BgType:num
 * @text Background Type
 * @parent Properties
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for these windows.
 * @default 2
 *
 * @param ShowButton:eval
 * @text Show Button
 * @parent Properties
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the keyboard/controller button to press?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @param Vocab
 *
 * @param AllActorsText:str
 * @text All Actors
 * @parent Vocab
 * @desc What is the text used for the "All Actors" button?
 * @default All Allies
 *
 * @param AllEnemiesText:str
 * @text All Enemies
 * @parent Vocab
 * @desc What is the text used for the "All Enemies" button?
 * @default All Enemies
 * 
 * @param Offsets
 * 
 * @param ActorOffsets
 * @text Actor Offsets
 * @parent Offsets
 *
 * @param ActorOffsetX:num
 * @text Offset X
 * @parent ActorOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param ActorOffsetY:num
 * @text Offset Y
 * @parent ActorOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @param EnemyOffsets
 * @text Enemy Offsets
 * @parent Offsets
 *
 * @param EnemyOffsetX:num
 * @text Offset X
 * @parent EnemyOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param EnemyOffsetY:num
 * @text Offset Y
 * @parent EnemyOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param ShakeFlinch:eval
 * @text Shake Flinch
 * @parent Flinch
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Perform a shake flinch when taking damage?
 * @default false
 *
 * @param ShakeFlinchDuration:num
 * @text Max Duration
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc Maximum duration a shake flinch can have.
 * This is reduced relative to the amount of damage taken.
 * @default 24
 *
 * @param ShakeFlinchPower:num
 * @text Max Power
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc The power rating of a shake flinch at full damage.
 * This is reduced relative to the amount of damage taken.
 * @default 48
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AniDuration:num
 * @text Animation Duration
 * @parent Settings
 * @type number
 * @min 1
 * @desc How many frames should gauges animate themselves?
 * Default: 20 frames.
 * @default 20
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Visual Cutin Effect Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~VisualCutinEffect:
 *
 * @param Transition
 * 
 * @param enterDuration:num
 * @text Entrance Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully enter?
 * Used when a Visual Cutin Effect starts.
 * @default 12
 * 
 * @param exitDuration:num
 * @text Exit Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully exit?
 * Used when a Visual Cutin Effect ends.
 * @default 12
 *
 * @param Cutin
 * @text Cutin Settings
 *
 * @param bgShow:eval
 * @text Show BG Color?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Add a background color for this cutin?
 * Background colors appear behind the parallax.
 * @default true
 *
 * @param outlineShow:eval
 * @text Show Outline?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show the cutin outline?
 * @default true
 *
 * @param Portrait
 * @text Portrait Settings
 *
 * @param PortraitBase
 * @text Base Properties
 * @parent Portrait
 * 
 * @param portraitAnchorX:num
 * @text Anchor X
 * @parent PortraitBase
 * @desc Determines the sprite anchor X alignment.
 * 0.0: Left, 0.5: Center, 1.0: Right.
 * @default 0.5
 * 
 * @param portraitAnchorY:num
 * @text Anchor Y
 * @parent PortraitBase
 * @desc Determines the sprite anchor Y alignment.
 * 0.0: Top, 0.5: Middle, 1.0: Bottom.
 * @default 0.5
 *
 * @param portraitHue:num
 * @text Hue
 * @parent PortraitBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's portrait hue?
 * @default 0
 * 
 * @param portraitOpacity:num
 * @text Opacity
 * @parent PortraitBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's portrait?
 * @default 255
 * 
 * @param portraitOffsetX:num
 * @text Offset X
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's X location.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @param portraitOffsetY:num
 * @text Offset Y
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's Y location.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PortraitEnter
 * @text Entrance Properties
 * @parent Portrait
 * 
 * @param portraitEnterX:num
 * @text Entrance X
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's X entrance.
 * Negative: from left. Positive: from right.
 * @default +0
 * 
 * @param portraitEnterY:num
 * @text Entrance Y
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's Y entrance.
 * Negative: from up. Positive: from down.
 * @default +0
 *
 * @param portraitEnterEasingType:str
 * @text Entrance Easing
 * @parent PortraitEnter
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitExit
 * @text Exit Properties
 * @parent Portrait
 * 
 * @param portraitExitX:num
 * @text Exit X
 * @parent PortraitExit
 * @desc Sets the cutin portrait's X exit.
 * Negative: to left. Positive: to right.
 * @default +0
 * 
 * @param portraitExitY:num
 * @text Exit Y
 * @parent PortraitExit
 * @desc Sets the cutin portrait's Y exit.
 * Negative: to up. Positive: to down.
 * @default +0
 *
 * @param portraitExitEasingType:str
 * @text Exit Easing
 * @parent PortraitExit
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitFlip
 * @text Flip Properties
 * @parent Portrait
 *
 * @param portraitFlipHorz:eval
 * @text Flip Horizontally?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait horizontally?
 * @default false
 *
 * @param portraitFlipVert:eval
 * @text Flip Vertically?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait vertically?
 * @default false
 *
 * @param PortraitScale
 * @text Scaling Properties
 * @parent Portrait
 * 
 * @param portraitForcedScale:num
 * @text Forced Scaling
 * @parent PortraitScale
 * @desc Do you want to force a scaling ratio?
 * Leave as 0 for none. Disables "Fit to Scale?".
 * @default 0.0
 *
 * @param portraitScaleToFit:eval
 * @text Fit to Scale?
 * @parent PortraitScale
 * @type boolean
 * @on Fit to Scale
 * @off Don't Scale
 * @desc Scale the cutin portrait to fit the cutin style?
 * Cannot be used with "Forced Scaling".
 * @default true
 *
 * @param portraitScaleMax:eval
 * @text Scale Max?
 * @parent portraitScaleToFit:eval
 * @type boolean
 * @on Scale Maximum
 * @off Scale Minimum
 * @desc Scale the cutin portrait to the maximum fit or
 * scale the cutin portrait to the minimum fit.
 * @default false
 *
 * @param PortraitAni
 * @text Animated Portraits
 * @parent Portrait
 *
 * @param animatedPortraitLooping:eval
 * @text Loop?
 * @parent PortraitAni
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Will loop back to beginning once ended.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default true
 *
 * @param animatedPortraitWaitFrames:num
 * @text Wait Frames
 * @parent PortraitAni
 * @type number
 * @min 1
 * @desc Frames to wait before moving to next cell.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default 4
 *
 * @param Parallax
 * @text Parallax Settings
 *
 * @param ParallaxBase
 * @text Base Settings
 * @parent Parallax
 *
 * @param parallaxBlendMode:num
 * @text Blend Mode
 * @parent ParallaxBase
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the cutin?
 * @default 0
 *
 * @param parallaxHue:num
 * @text Hue
 * @parent ParallaxBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's parallax hue?
 * @default 0
 *
 * @param parallaxHueEnemyModifier:num
 * @text Enemy Modifier
 * @parent parallaxHue:num
 * @desc Adjust the hue value by this if the cutin target is an enemy.
 * @default +0
 * 
 * @param parallaxOpacity:num
 * @text Opacity
 * @parent ParallaxBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's parallax?
 * @default 255
 *
 * @param ParallaxScroll
 * @text Scrolling Settings
 * @parent Parallax
 * 
 * @param parallaxOffsetX:num
 * @text Offset X
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's X location.
 * Negative: left. Positive: right.
 * @default +0.0
 * 
 * @param parallaxOffsetY:num
 * @text Offset Y
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's Y location.
 * Negative: up. Positive: down.
 * @default +0.0
 * 
 * @param parallaxScrollX:num
 * @text Scroll X
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll horizontally?
 * Negative: Scroll to right. Positive: Scroll to left.
 * @default +0.0
 *
 * @param parallaxScrollXinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollX:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the X scroll direction if the cutin target is an enemy?
 * @default false
 * 
 * @param parallaxScrollY:num
 * @text Scroll Y
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll vertically?
 * Negative: Scroll to down. Positive: Scroll to up.
 * @default +0.0
 *
 * @param parallaxScrollYinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollY:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the Y scroll direction if the cutin target is an enemy?
 * @default false
 *
 */
//=============================================================================

const _0x4fbf70=_0x401f;(function(_0x5596bb,_0xa8c150){const _0x22c09e=_0x401f,_0x444de1=_0x5596bb();while(!![]){try{const _0x2e7c67=parseInt(_0x22c09e(0xad5))/0x1*(-parseInt(_0x22c09e(0x7c9))/0x2)+parseInt(_0x22c09e(0x6d7))/0x3*(parseInt(_0x22c09e(0xd16))/0x4)+-parseInt(_0x22c09e(0x480))/0x5+-parseInt(_0x22c09e(0x838))/0x6*(-parseInt(_0x22c09e(0x501))/0x7)+-parseInt(_0x22c09e(0xb31))/0x8*(-parseInt(_0x22c09e(0xaef))/0x9)+-parseInt(_0x22c09e(0x2d1))/0xa+parseInt(_0x22c09e(0x63b))/0xb*(parseInt(_0x22c09e(0x5ed))/0xc);if(_0x2e7c67===_0xa8c150)break;else _0x444de1['push'](_0x444de1['shift']());}catch(_0x5ebf4a){_0x444de1['push'](_0x444de1['shift']());}}}(_0x1e75,0x41302));function _0x401f(_0x3ea300,_0x1805b9){const _0x1e7597=_0x1e75();return _0x401f=function(_0x401f6c,_0x2aa47a){_0x401f6c=_0x401f6c-0x192;let _0x51503f=_0x1e7597[_0x401f6c];return _0x51503f;},_0x401f(_0x3ea300,_0x1805b9);}var label=_0x4fbf70(0xae2),tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x4fbf70(0xa29)](function(_0x58103a){const _0x1c263e=_0x4fbf70;return _0x58103a['status']&&_0x58103a[_0x1c263e(0x9a3)][_0x1c263e(0x6e3)]('['+label+']');})[0x0];VisuMZ[label][_0x4fbf70(0x837)]=VisuMZ[label][_0x4fbf70(0x837)]||{},VisuMZ[_0x4fbf70(0x334)]=function(_0x152f96,_0x5a4af6){const _0x5ae126=_0x4fbf70;for(const _0x8fecf9 in _0x5a4af6){if('QBpyc'!=='QBpyc')this['isNonSubmenuCancel']()?(this[_0x5ae126(0x9e4)][_0x5ae126(0x9c9)](),this[_0x5ae126(0x569)][_0x5ae126(0x7aa)](),this[_0x5ae126(0xd49)][_0x5ae126(0xd3e)]()):_0x374772['BattleCore'][_0x5ae126(0x77d)][_0x5ae126(0xc4a)](this),this[_0x5ae126(0x43d)](),this['_enemyWindow'][_0x5ae126(0x6ce)]();else{if(_0x8fecf9[_0x5ae126(0xc4b)](/(.*):(.*)/i)){if('CFPpb'!==_0x5ae126(0xa98))return this[_0x5ae126(0x2be)]||this[_0x5ae126(0xb1b)]||this;else{const _0x38dcb1=String(RegExp['$1']),_0x11ba58=String(RegExp['$2'])[_0x5ae126(0x7a4)]()[_0x5ae126(0xcda)]();let _0x25137d,_0x9e0bff,_0x339322;switch(_0x11ba58){case _0x5ae126(0xbc1):_0x25137d=_0x5a4af6[_0x8fecf9]!==''?Number(_0x5a4af6[_0x8fecf9]):0x0;break;case'ARRAYNUM':_0x9e0bff=_0x5a4af6[_0x8fecf9]!==''?JSON[_0x5ae126(0x339)](_0x5a4af6[_0x8fecf9]):[],_0x25137d=_0x9e0bff[_0x5ae126(0x990)](_0x146e6e=>Number(_0x146e6e));break;case _0x5ae126(0x7e8):_0x25137d=_0x5a4af6[_0x8fecf9]!==''?eval(_0x5a4af6[_0x8fecf9]):null;break;case _0x5ae126(0xc57):_0x9e0bff=_0x5a4af6[_0x8fecf9]!==''?JSON[_0x5ae126(0x339)](_0x5a4af6[_0x8fecf9]):[],_0x25137d=_0x9e0bff['map'](_0x5f5597=>eval(_0x5f5597));break;case _0x5ae126(0xa76):_0x25137d=_0x5a4af6[_0x8fecf9]!==''?JSON[_0x5ae126(0x339)](_0x5a4af6[_0x8fecf9]):'';break;case _0x5ae126(0x4b1):_0x9e0bff=_0x5a4af6[_0x8fecf9]!==''?JSON[_0x5ae126(0x339)](_0x5a4af6[_0x8fecf9]):[],_0x25137d=_0x9e0bff[_0x5ae126(0x990)](_0x3c0f97=>JSON[_0x5ae126(0x339)](_0x3c0f97));break;case _0x5ae126(0xd63):_0x25137d=_0x5a4af6[_0x8fecf9]!==''?new Function(JSON[_0x5ae126(0x339)](_0x5a4af6[_0x8fecf9])):new Function(_0x5ae126(0x629));break;case _0x5ae126(0xa34):_0x9e0bff=_0x5a4af6[_0x8fecf9]!==''?JSON[_0x5ae126(0x339)](_0x5a4af6[_0x8fecf9]):[],_0x25137d=_0x9e0bff[_0x5ae126(0x990)](_0x51312c=>new Function(JSON[_0x5ae126(0x339)](_0x51312c)));break;case _0x5ae126(0x3f7):_0x25137d=_0x5a4af6[_0x8fecf9]!==''?String(_0x5a4af6[_0x8fecf9]):'';break;case _0x5ae126(0xa2d):_0x9e0bff=_0x5a4af6[_0x8fecf9]!==''?JSON[_0x5ae126(0x339)](_0x5a4af6[_0x8fecf9]):[],_0x25137d=_0x9e0bff[_0x5ae126(0x990)](_0xef3a1f=>String(_0xef3a1f));break;case _0x5ae126(0xd57):_0x339322=_0x5a4af6[_0x8fecf9]!==''?JSON[_0x5ae126(0x339)](_0x5a4af6[_0x8fecf9]):{},_0x152f96[_0x38dcb1]={},VisuMZ['ConvertParams'](_0x152f96[_0x38dcb1],_0x339322);continue;case'ARRAYSTRUCT':_0x9e0bff=_0x5a4af6[_0x8fecf9]!==''?JSON[_0x5ae126(0x339)](_0x5a4af6[_0x8fecf9]):[],_0x25137d=_0x9e0bff[_0x5ae126(0x990)](_0x471aaf=>VisuMZ['ConvertParams']({},JSON['parse'](_0x471aaf)));break;default:continue;}_0x152f96[_0x38dcb1]=_0x25137d;}}}}return _0x152f96;},(_0x3387a9=>{const _0x397b39=_0x4fbf70,_0x2d75f8=_0x3387a9[_0x397b39(0x27a)];for(const _0x23434a of dependencies){if(!Imported[_0x23434a]){if(_0x397b39(0xa3c)!==_0x397b39(0xa3c))this[_0x397b39(0x7ff)][_0x397b39(0x3f0)]=_0x4959eb[_0x397b39(0x92c)][_0x397b39(0xa3a)][_0x397b39(0xc4a)](this);else{alert('%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.'[_0x397b39(0x946)](_0x2d75f8,_0x23434a)),SceneManager['exit']();break;}}}const _0x39e14c=_0x3387a9[_0x397b39(0x9a3)];if(_0x39e14c[_0x397b39(0xc4b)](/\[Version[ ](.*?)\]/i)){if('KFciE'===_0x397b39(0x7a6))_0x3b7f5d[_0x397b39(0x2ce)]=!![],_0x5c84aa[_0x397b39(0x42e)](),this[_0x397b39(0xbb2)](),_0x3bd787['isTpb']()&&(_0x3c2018[_0x397b39(0x6eb)]=![]);else{const _0x429550=Number(RegExp['$1']);_0x429550!==VisuMZ[label][_0x397b39(0x1a8)]&&(alert('%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.'[_0x397b39(0x946)](_0x2d75f8,_0x429550)),SceneManager['exit']());}}if(_0x39e14c[_0x397b39(0xc4b)](/\[Tier[ ](\d+)\]/i)){if(_0x397b39(0x955)===_0x397b39(0x847))this[_0x397b39(0x3e4)]=_0x397b39(0x6bd);else{const _0x32d1b2=Number(RegExp['$1']);_0x32d1b2<tier?_0x397b39(0x9b8)===_0x397b39(0xa4b)?this[_0x397b39(0x25b)]('performMiss',_0x57ac5c):(alert('%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.'[_0x397b39(0x946)](_0x2d75f8,_0x32d1b2,tier)),SceneManager['exit']()):tier=Math['max'](_0x32d1b2,tier);}}VisuMZ['ConvertParams'](VisuMZ[label][_0x397b39(0x837)],_0x3387a9['parameters']);})(pluginData),VisuMZ[_0x4fbf70(0x938)]=function(_0x3cedab){const _0x2729e1=_0x4fbf70;let _0x3dce4c=[];for(const _0x3ec75c of _0x3cedab){_0x3dce4c=_0x3dce4c['concat'](VisuMZ[_0x2729e1(0x327)](_0x3ec75c));}return _0x3dce4c[_0x2729e1(0xa29)](_0x77b49c=>_0x77b49c);},VisuMZ[_0x4fbf70(0x327)]=function(_0x24ce93){const _0x56a9f0=_0x4fbf70,_0x47406c=BattleManager[_0x56a9f0(0xafc)]()[_0x56a9f0(0xa29)](_0x439470=>_0x439470&&_0x439470['isAppeared']()),_0x1552ff=BattleManager[_0x56a9f0(0xb38)],_0x22f4a9=BattleManager['_target'],_0xfcd1e4=BattleManager[_0x56a9f0(0x5de)]?BattleManager[_0x56a9f0(0x5de)][_0x56a9f0(0xb12)](0x0):_0x47406c;_0x24ce93=_0x24ce93['toLowerCase']()[_0x56a9f0(0xcda)]();if(_0x24ce93===_0x56a9f0(0xc5d)){if('JUDbR'!==_0x56a9f0(0x58a))this[_0x56a9f0(0x818)]=this[_0x56a9f0(0xbd3)](this[_0x56a9f0(0x818)],this[_0x56a9f0(0xd21)],_0x4f7128,_0x2d12a7,_0xe18ff5),this[_0x56a9f0(0xd1d)]=this[_0x56a9f0(0xbd3)](this[_0x56a9f0(0xd1d)],this[_0x56a9f0(0x449)],_0x4c5b06,_0x39a3c8,_0x174bd5);else return[_0x1552ff];}else{if(_0x24ce93===_0x56a9f0(0xb8d))return[_0x22f4a9];else{if(_0x24ce93===_0x56a9f0(0x9af)){if(_0x22f4a9){if(_0x56a9f0(0x6ef)!==_0x56a9f0(0x6ef)){let _0x1744e3=_0x56a9f0(0xb74);if(this[_0x56a9f0(0x607)](_0x1744e3))return this['_cache'][_0x1744e3];return this[_0x56a9f0(0x7ff)][_0x1744e3]=this['createBattleUIOffsetY'](this['actor']()),this[_0x56a9f0(0x7ff)][_0x1744e3];}else{const _0x26b219=_0xfcd1e4[_0x56a9f0(0xd48)](_0x22f4a9);return _0x26b219>=0x0?[_0xfcd1e4[_0x26b219-0x1]||_0x22f4a9]:[_0x22f4a9];}}}else{if(_0x24ce93===_0x56a9f0(0x2d3)){if(_0x22f4a9){const _0xb11289=_0xfcd1e4[_0x56a9f0(0xd48)](_0x22f4a9);return _0xb11289>=0x0?[_0xfcd1e4[_0xb11289+0x1]||_0x22f4a9]:[_0x22f4a9];}}else{if(_0x24ce93===_0x56a9f0(0x21e)){if(_0x56a9f0(0x1ef)===_0x56a9f0(0x24d))this['_mainSprite']=new _0x2db54b(),this[_0x56a9f0(0xb1b)]['anchor']['x']=0.5,this['_mainSprite'][_0x56a9f0(0x951)]['y']=0x1,this[_0x56a9f0(0x52a)](this[_0x56a9f0(0xb1b)]),this['attachSpritesToDistortionSprite']();else return _0xfcd1e4;}else{if(_0x24ce93===_0x56a9f0(0x2c7))return[_0x1552ff][_0x56a9f0(0xc9b)](_0xfcd1e4);else{if(_0x24ce93===_0x56a9f0(0x23e))return _0x47406c[_0x56a9f0(0xa29)](_0x1b33b0=>_0x1b33b0!==_0x1552ff&&!_0xfcd1e4[_0x56a9f0(0x6e3)](_0x1b33b0)&&_0x1b33b0[_0x56a9f0(0x304)]());else{if(_0x24ce93===_0x56a9f0(0x2f8)){if('IgsPh'==='IgsPh')return[VisuMZ[_0x56a9f0(0x9fe)]()];else _0x28655f[_0x56a9f0(0xae2)]['Game_Battler_onBattleEnd']['call'](this),this[_0x56a9f0(0x8f1)]();}else{if(_0x24ce93[_0x56a9f0(0xc4b)](/SPECIAL (.*)>/i)){if('qhrmM'!==_0x56a9f0(0x7cc)){const _0x2a690a=String(RegExp['$1'])[_0x56a9f0(0x94a)](',')[_0x56a9f0(0x990)](_0x59b00d=>_0x59b00d[_0x56a9f0(0xcda)]());return[VisuMZ[_0x56a9f0(0xce1)](_0x2a690a)];}else _0x36b78f+=_0x582dcb;}}}}}}}}}if(_0x1552ff){if(_0x24ce93===_0x56a9f0(0x6c2)){if(_0x56a9f0(0xbd8)!==_0x56a9f0(0xbd8)){if(this[_0x56a9f0(0x371)]){if(!_0x358c48['SkillsStatesCore']['CheckVisibleBattleNotetags'](this[_0x56a9f0(0x371)],_0x5744b9))return!![];if(!_0x3476fb['SkillsStatesCore'][_0x56a9f0(0x7ae)](this[_0x56a9f0(0x371)],_0x3cdced))return!![];if(!_0x4d8277[_0x56a9f0(0x9e1)][_0x56a9f0(0x7de)](this[_0x56a9f0(0x371)],_0x3a7dc0))return!![];}}else return _0x1552ff[_0x56a9f0(0x4e8)]()['aliveMembers']();}else{if(_0x24ce93===_0x56a9f0(0x9b1)){if(_0x56a9f0(0x685)===_0x56a9f0(0x685))return _0x1552ff[_0x56a9f0(0x4e8)]()[_0x56a9f0(0x1c3)]()[_0x56a9f0(0xa29)](_0x58eb01=>_0x58eb01!==_0x1552ff);else _0x2b561b['BattleCore']['Window_BattleLog_performReflection'][_0x56a9f0(0xc4a)](this,_0x4f07cb),this[_0x56a9f0(0x91e)]();}else{if(_0x24ce93===_0x56a9f0(0x96b))return _0x1552ff[_0x56a9f0(0x4e8)]()[_0x56a9f0(0x1c3)]()[_0x56a9f0(0xa29)](_0x191312=>_0x191312!==_0x22f4a9);else{if(_0x24ce93==='dead\x20friends'){if(_0x56a9f0(0x263)!==_0x56a9f0(0x251))return _0x1552ff[_0x56a9f0(0x4e8)]()['deadMembers']();else this[_0x56a9f0(0x800)](),this['_currentActor']=null,this['_inputting']=![];}else{if(_0x24ce93[_0x56a9f0(0xc4b)](/FRIEND INDEX (\d+)/i)){if(_0x56a9f0(0xbd0)==='pQmpN'){const _0xc87ca4=Number(RegExp['$1']);return[_0x1552ff[_0x56a9f0(0x4e8)]()[_0x56a9f0(0x9d7)]()[_0xc87ca4]];}else this[_0x56a9f0(0x1f4)](_0x56a9f0(0xcdb));}}}}}if(_0x24ce93===_0x56a9f0(0x7df)){if('PWjNr'!==_0x56a9f0(0x5b0))return _0x1552ff[_0x56a9f0(0xa93)]()['aliveMembers']();else _0x5dda75+=_0x401132(_0x59f2a7['$2']);}else{if(_0x24ce93===_0x56a9f0(0xc25))return _0x1552ff[_0x56a9f0(0xa93)]()['aliveMembers']()['filter'](_0x1fbba8=>_0x1fbba8!==_0x22f4a9);else{if(_0x24ce93===_0x56a9f0(0x1e3)){if('JRLPI'==='RrluP')_0x521bdc[_0x56a9f0(0xae2)]['ParseItemNotetags']&&_0x1db416['BattleCore'][_0x56a9f0(0xd01)][_0x56a9f0(0xc4a)](this,_0x2a6998),_0x413a6f[_0x56a9f0(0xae2)][_0x56a9f0(0x56a)](_0x2f65e2),_0x1ebd96[_0x56a9f0(0xae2)][_0x56a9f0(0x684)](_0x166cf0);else return _0x1552ff[_0x56a9f0(0xa93)]()['deadMembers']();}else{if(_0x24ce93[_0x56a9f0(0xc4b)](/OPPONENT INDEX (\d+)/i)){if(_0x56a9f0(0xc9e)==='yMWMs')this['regenerateAllBattleCore'](),this['processBattleCoreJS'](_0x56a9f0(0x666));else{const _0x46cf1a=Number(RegExp['$1']);return[_0x1552ff[_0x56a9f0(0xa93)]()[_0x56a9f0(0x9d7)]()[_0x46cf1a]];}}}}}}if(_0x24ce93===_0x56a9f0(0xd38))return $gameParty[_0x56a9f0(0x1c3)]();else{if(_0x24ce93===_0x56a9f0(0xc47))return $gameParty[_0x56a9f0(0x1c3)]()[_0x56a9f0(0xa29)](_0x1055cd=>_0x1055cd!==_0x1552ff);else{if(_0x24ce93===_0x56a9f0(0xccc)){if(_0x56a9f0(0xa87)!==_0x56a9f0(0xa87))this['push']('setActiveWeaponSet',_0x5d5d2b,_0x96a28);else return $gameParty['aliveMembers']()['filter'](_0x2a8626=>_0x2a8626!==_0x22f4a9);}else{if(_0x24ce93==='dead\x20actors')return $gameParty[_0x56a9f0(0x47d)]();else{if(_0x24ce93[_0x56a9f0(0xc4b)](/ACTOR INDEX (\d+)/i)){const _0x369d4b=Number(RegExp['$1']);return[$gameParty[_0x56a9f0(0x9d7)]()[_0x369d4b]];}else{if(_0x24ce93[_0x56a9f0(0xc4b)](/ACTOR ID (\d+)/i)){const _0x31f4ee=Number(RegExp['$1']);return[$gameActors[_0x56a9f0(0x55a)](_0x31f4ee)];}}}}}}if(_0x24ce93==='alive\x20enemies')return $gameTroop[_0x56a9f0(0x1c3)]();else{if(_0x24ce93===_0x56a9f0(0x682)){if(_0x56a9f0(0x771)==='JlAnq')_0x4e1af3[_0x56a9f0(0x3fa)](_0x2fbe4e,_0x556dc8,_0xa081d0,_0x438c42,_0x43a35f,-0x1),this['callNextMethod']();else return $gameTroop['aliveMembers']()[_0x56a9f0(0xa29)](_0x14cb25=>_0x14cb25!==_0x1552ff);}else{if(_0x24ce93===_0x56a9f0(0x504))return $gameTroop[_0x56a9f0(0x1c3)]()[_0x56a9f0(0xa29)](_0x2048fa=>_0x2048fa!==_0x22f4a9);else{if(_0x24ce93==='dead\x20enemies')return $gameTroop[_0x56a9f0(0x47d)]();else{if(_0x24ce93[_0x56a9f0(0xc4b)](/ENEMY INDEX (\d+)/i)){if(_0x56a9f0(0x657)===_0x56a9f0(0x657)){const _0x43343e=Number(RegExp['$1']);return[$gameTroop[_0x56a9f0(0x9d7)]()[_0x43343e]];}else{if(!_0x4be4d2[_0x56a9f0(0x90d)]())return;_0x54625d[_0x56a9f0(0x334)](_0x2f45df,_0x362158);const _0x1670ab=_0x203fc4[_0x56a9f0(0xc52)](),_0x298767=_0x1d09d0[_0x56a9f0(0xb15)],_0x4e4df0=_0x25d126[_0x56a9f0(0xb38)],_0x6af281=_0x5d730b[_0x56a9f0(0x5de)]?_0x2d5e4e['_allTargets']['slice'](0x0):[],_0x1864df=_0x2cfbad[_0x56a9f0(0x2e0)];if(!_0x1670ab||!_0x298767||!_0x4e4df0)return;if(!_0x298767['item']())return;if(_0x15132c['ApplyImmortal'])_0x1864df[_0x56a9f0(0x25b)]('applyImmortal',_0x4e4df0,_0x6af281,![]);if(_0x43cfcc[_0x56a9f0(0xd23)])_0x1864df[_0x56a9f0(0x25b)](_0x56a9f0(0x6fd));if(_0x2d4874[_0x56a9f0(0x47e)])_0x1864df['push'](_0x56a9f0(0x404));if(_0x48e914[_0x56a9f0(0xbdc)])_0x1864df[_0x56a9f0(0x25b)](_0x56a9f0(0xb36));if(_0x49e1c2[_0x56a9f0(0x1f9)])_0x1864df[_0x56a9f0(0x25b)](_0x56a9f0(0x287),_0x4e4df0);if(_0x1fcb6d[_0x56a9f0(0x85c)])_0x1864df[_0x56a9f0(0x25b)](_0x56a9f0(0xcba));_0x1670ab['setWaitMode'](_0x56a9f0(0x60b));}}else{if(_0x24ce93['match'](/ENEMY ID (\d+)/i)){if(_0x56a9f0(0x2f9)!==_0x56a9f0(0xb69)){const _0x5c25fe=Number(RegExp['$1']);return $gameTroop[_0x56a9f0(0x1c3)]()['filter'](_0x34749b=>_0x34749b[_0x56a9f0(0x3ea)]()===_0x5c25fe);}else return _0xcb0200[_0x11f51b];}}}}}}if(_0x24ce93===_0x56a9f0(0x242)){if(_0x56a9f0(0x618)!=='WHUgv')return _0x47406c[_0x56a9f0(0xa29)](_0x5c7620=>_0x5c7620['isAlive']());else _0x194581+=_0x59a28a,_0xd75f38+=_0x243f05[_0x56a9f0(0xc9f)]()?-_0x3b2ae3:_0x1990c3;}else{if(_0x24ce93==='alive\x20battlers\x20not\x20user')return _0x47406c[_0x56a9f0(0xa29)](_0x328c8c=>_0x328c8c[_0x56a9f0(0x4e4)]()&&_0x328c8c!==_0x1552ff);else{if(_0x24ce93==='alive\x20battlers\x20not\x20target'){if(_0x56a9f0(0x917)!=='KOldw'){const _0xc98bc2=this[_0x56a9f0(0xbb5)](_0x87f33);if(_0xc98bc2[_0x56a9f0(0xc4b)](/\\I\[(\d+)\]/i)){const _0x3aa250=this['itemLineRect'](_0x27ab76),_0x82d0c5=this[_0x56a9f0(0x69d)](_0xc98bc2)[_0x56a9f0(0x606)];return _0x82d0c5<=_0x3aa250[_0x56a9f0(0x606)]?'iconText':_0x56a9f0(0x587);}}else return _0x47406c[_0x56a9f0(0xa29)](_0x9e5472=>_0x9e5472[_0x56a9f0(0x4e4)]()&&_0x9e5472!==_0x22f4a9);}else{if(_0x24ce93===_0x56a9f0(0x53e))return _0x47406c[_0x56a9f0(0xa29)](_0x13df64=>_0x13df64[_0x56a9f0(0x521)]());}}}return[];},VisuMZ[_0x4fbf70(0x9fe)]=function(){const _0x52ade3=_0x4fbf70;return BattleManager[_0x52ade3(0x97e)];},VisuMZ[_0x4fbf70(0xce1)]=function(_0x3afe0b){return BattleManager['_target'];},PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x778),_0x732a5b=>{const _0x4feedf=_0x4fbf70;if(!SceneManager[_0x4feedf(0x90d)]())return;VisuMZ[_0x4feedf(0x334)](_0x732a5b,_0x732a5b);const _0x27542d=$gameTemp[_0x4feedf(0xc52)](),_0x1493e5=BattleManager['_action'],_0x41f0b5=BattleManager[_0x4feedf(0xb38)],_0x5dccf2=BattleManager[_0x4feedf(0x5de)]?BattleManager[_0x4feedf(0x5de)]['slice'](0x0):[],_0x41eea8=BattleManager[_0x4feedf(0x2e0)];if(!_0x27542d||!_0x1493e5||!_0x41f0b5)return;if(!_0x1493e5[_0x4feedf(0x98d)]())return;if(_0x732a5b[_0x4feedf(0x763)])_0x41eea8[_0x4feedf(0xc91)](_0x41f0b5,_0x1493e5[_0x4feedf(0x98d)]());_0x732a5b[_0x4feedf(0x4ea)]&&_0x41eea8[_0x4feedf(0x25b)](_0x4feedf(0xa09),_0x41f0b5,_0x5dccf2,!![]);if(_0x732a5b[_0x4feedf(0x5cd)])_0x41eea8['push'](_0x4feedf(0x297),_0x41f0b5,_0x1493e5);if(_0x732a5b[_0x4feedf(0x85c)])_0x41eea8[_0x4feedf(0x25b)]('waitForMovement');if(_0x732a5b[_0x4feedf(0x5a5)])_0x41eea8['push']('performCastAnimation',_0x41f0b5,_0x1493e5);if(_0x732a5b['WaitForAnimation'])_0x41eea8[_0x4feedf(0x25b)](_0x4feedf(0x7a1));_0x27542d[_0x4feedf(0x645)](_0x4feedf(0x60b));}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x7a5),_0x2aaf8c=>{const _0x308c3e=_0x4fbf70;if(!SceneManager[_0x308c3e(0x90d)]())return;VisuMZ[_0x308c3e(0x334)](_0x2aaf8c,_0x2aaf8c);const _0x4c728b=$gameTemp[_0x308c3e(0xc52)](),_0x2b221f=BattleManager[_0x308c3e(0xb15)],_0xa49cf5=BattleManager[_0x308c3e(0xb38)],_0x171e4b=BattleManager[_0x308c3e(0x5de)]?BattleManager[_0x308c3e(0x5de)][_0x308c3e(0xb12)](0x0):[],_0x524c1b=BattleManager[_0x308c3e(0x2e0)],_0x55bba1=_0x2aaf8c[_0x308c3e(0xbf9)]??![];if(!_0x4c728b||!_0x2b221f||!_0xa49cf5)return;if(!_0x2b221f[_0x308c3e(0x98d)]())return;let _0x13dd7f=_0x55bba1?_0x524c1b[_0x308c3e(0xa96)](_0xa49cf5):0x1;for(let _0x232eee=0x0;_0x232eee<_0x13dd7f;_0x232eee++){_0x55bba1&&_0xa49cf5[_0x308c3e(0xc9f)]()&&_0x524c1b['push'](_0x308c3e(0x55f),_0xa49cf5,_0x232eee);if(_0x2aaf8c[_0x308c3e(0xbbd)])_0x524c1b[_0x308c3e(0x25b)](_0x308c3e(0x377),_0xa49cf5,_0x2b221f);if(_0x2aaf8c[_0x308c3e(0x398)]>0x0)_0x524c1b[_0x308c3e(0x25b)](_0x308c3e(0x857),_0x2aaf8c[_0x308c3e(0x398)]);if(_0x2aaf8c['ActionAnimation'])_0x524c1b['push']('showAnimation',_0xa49cf5,_0x171e4b,_0x2b221f[_0x308c3e(0x98d)]()[_0x308c3e(0x475)]);if(_0x2aaf8c[_0x308c3e(0x413)])_0x524c1b[_0x308c3e(0x25b)](_0x308c3e(0x7a1));for(const _0x206394 of _0x171e4b){if(!_0x206394)continue;if(_0x2aaf8c[_0x308c3e(0xd3b)])_0x524c1b[_0x308c3e(0x25b)](_0x308c3e(0x31f),_0xa49cf5,_0x206394);}}_0x55bba1&&_0xa49cf5['isActor']()&&_0x524c1b[_0x308c3e(0x25b)](_0x308c3e(0x781),_0xa49cf5);if(_0x2aaf8c['ApplyImmortal'])_0x524c1b[_0x308c3e(0x25b)](_0x308c3e(0xa09),_0xa49cf5,_0x171e4b,![]);_0x4c728b[_0x308c3e(0x645)](_0x308c3e(0x60b));}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],'ActSeq_Set_TargetActionSet',_0x161838=>{const _0x3be59b=_0x4fbf70;if(!SceneManager[_0x3be59b(0x90d)]())return;VisuMZ['ConvertParams'](_0x161838,_0x161838);const _0x3e644a=$gameTemp[_0x3be59b(0xc52)](),_0x32b1ee=BattleManager[_0x3be59b(0xb15)],_0x4185d2=BattleManager['_subject'],_0x26f157=BattleManager['_allTargets']?BattleManager[_0x3be59b(0x5de)][_0x3be59b(0xb12)](0x0):[],_0x4c6196=BattleManager[_0x3be59b(0x2e0)],_0x353703=_0x161838[_0x3be59b(0xbf9)]??![];if(!_0x3e644a||!_0x32b1ee||!_0x4185d2)return;if(!_0x32b1ee['item']())return;let _0x370335=_0x353703?_0x4c6196[_0x3be59b(0xa96)](_0x4185d2):0x1;for(let _0x2b6c8=0x0;_0x2b6c8<_0x370335;_0x2b6c8++){if(_0x3be59b(0x8a3)!==_0x3be59b(0xd56))for(const _0x20e893 of _0x26f157){if(!_0x20e893)continue;if(_0x353703&&_0x4185d2[_0x3be59b(0xc9f)]()){if(_0x3be59b(0x549)!==_0x3be59b(0x5f7))_0x4c6196[_0x3be59b(0x25b)](_0x3be59b(0x55f),_0x4185d2,_0x2b6c8);else{const _0x4505fa=_0xa342a3[_0x256b58];if(!_0x4505fa)return![];if(_0x4505fa['list'][_0x3be59b(0x9d2)]<=0x1)return![];return!![];}}if(_0x161838[_0x3be59b(0xbbd)])_0x4c6196[_0x3be59b(0x25b)](_0x3be59b(0x377),_0x4185d2,_0x32b1ee);if(_0x161838[_0x3be59b(0x774)]>0x0)_0x4c6196[_0x3be59b(0x25b)](_0x3be59b(0x857),_0x161838[_0x3be59b(0x774)]);if(_0x161838['ActionAnimation'])_0x4c6196[_0x3be59b(0x25b)](_0x3be59b(0x600),_0x4185d2,[_0x20e893],_0x32b1ee[_0x3be59b(0x98d)]()[_0x3be59b(0x475)]);if(_0x161838[_0x3be59b(0x8b9)]>0x0)_0x4c6196[_0x3be59b(0x25b)]('waitCount',_0x161838['WaitCount2']);if(_0x161838['ActionEffect'])_0x4c6196['push']('actionEffect',_0x4185d2,_0x20e893);}else this[_0x3be59b(0xc21)]()[_0x3be59b(0xa48)](_0xb7a711);}_0x353703&&_0x4185d2[_0x3be59b(0xc9f)]()&&(_0x3be59b(0x9cb)!==_0x3be59b(0x9cb)?(this[_0x3be59b(0x5c6)]=this[_0x3be59b(0x8a7)],this[_0x3be59b(0x373)]&&(this[_0x3be59b(0x8a7)]=0x0,this['_currentAngle']=0x0)):_0x4c6196[_0x3be59b(0x25b)](_0x3be59b(0x781),_0x4185d2));if(_0x161838[_0x3be59b(0x4ea)])_0x4c6196[_0x3be59b(0x25b)](_0x3be59b(0xa09),_0x4185d2,_0x26f157,![]);_0x3e644a[_0x3be59b(0x645)]('battlelog');}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x2ed),_0x18444d=>{const _0x3d7208=_0x4fbf70;if(!SceneManager[_0x3d7208(0x90d)]())return;VisuMZ[_0x3d7208(0x334)](_0x18444d,_0x18444d);const _0x4c7636=$gameTemp[_0x3d7208(0xc52)](),_0x250d35=BattleManager[_0x3d7208(0xb15)],_0x14bcfc=BattleManager[_0x3d7208(0xb38)],_0x582f8b=BattleManager[_0x3d7208(0x5de)]?BattleManager['_allTargets'][_0x3d7208(0xb12)](0x0):[],_0x512966=BattleManager['_logWindow'];if(!_0x4c7636||!_0x250d35||!_0x14bcfc)return;if(!_0x250d35['item']())return;if(_0x18444d[_0x3d7208(0x4ea)])_0x512966[_0x3d7208(0x25b)](_0x3d7208(0xa09),_0x14bcfc,_0x582f8b,![]);if(_0x18444d[_0x3d7208(0xd23)])_0x512966[_0x3d7208(0x25b)]('waitForNewLine');if(_0x18444d[_0x3d7208(0x47e)])_0x512966[_0x3d7208(0x25b)]('waitForEffect');if(_0x18444d[_0x3d7208(0xbdc)])_0x512966[_0x3d7208(0x25b)](_0x3d7208(0xb36));if(_0x18444d[_0x3d7208(0x1f9)])_0x512966[_0x3d7208(0x25b)](_0x3d7208(0x287),_0x14bcfc);if(_0x18444d['WaitForMovement'])_0x512966[_0x3d7208(0x25b)]('waitForMovement');_0x4c7636[_0x3d7208(0x645)](_0x3d7208(0x60b));}),PluginManager['registerCommand'](pluginData[_0x4fbf70(0x27a)],'ActSeq_ChangeAngle',_0x9156b4=>{const _0x150606=_0x4fbf70;if(!SceneManager[_0x150606(0x90d)]())return;if(!Imported[_0x150606(0x524)])return;VisuMZ[_0x150606(0x334)](_0x9156b4,_0x9156b4);const _0x1a63de=$gameTemp['getLastPluginCommandInterpreter'](),_0x58ddb6=_0x9156b4[_0x150606(0xc40)];if(!_0x1a63de)return;$gameScreen[_0x150606(0x543)](_0x9156b4['Angle'],_0x9156b4[_0x150606(0x590)],_0x9156b4[_0x150606(0x483)]);if(_0x58ddb6)_0x1a63de[_0x150606(0x645)](_0x150606(0x81e));}),PluginManager['registerCommand'](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x75a),_0x2fb68f=>{const _0x33175f=_0x4fbf70;if(!SceneManager[_0x33175f(0x90d)]())return;if(!Imported[_0x33175f(0x524)])return;VisuMZ[_0x33175f(0x334)](_0x2fb68f,_0x2fb68f);const _0x4231bb=$gameTemp['getLastPluginCommandInterpreter'](),_0x3db564=_0x2fb68f[_0x33175f(0xc40)];if(!_0x4231bb)return;$gameScreen[_0x33175f(0x543)](0x0,_0x2fb68f[_0x33175f(0x590)],_0x2fb68f[_0x33175f(0x483)]);if(_0x3db564)_0x4231bb[_0x33175f(0x645)]('battleAngle');}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0xc34),_0x183a3e=>{const _0x98fe6=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x98fe6(0x524)])return;const _0x24d7b0=$gameTemp[_0x98fe6(0xc52)]();if(!_0x24d7b0)return;_0x24d7b0['setWaitMode'](_0x98fe6(0x81e));}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0xb72),_0xfbde2b=>{const _0x481125=_0x4fbf70;if(!SceneManager[_0x481125(0x90d)]())return;VisuMZ['ConvertParams'](_0xfbde2b,_0xfbde2b);const _0x4a68bc=$gameTemp[_0x481125(0xc52)](),_0x3048ee=BattleManager['_action'],_0x2ce55d=BattleManager[_0x481125(0xb38)],_0x4828d0=VisuMZ[_0x481125(0x938)](_0xfbde2b[_0x481125(0x2c9)]),_0x3aeea5=_0xfbde2b['Mirror'],_0x537a19=BattleManager[_0x481125(0x2e0)];if(!_0x4a68bc||!_0x3048ee||!_0x2ce55d)return;if(!_0x3048ee['item']())return;let _0x2407f4=_0x3048ee['item']()[_0x481125(0x475)];if(_0x2407f4<0x0)_0x2407f4=_0x2ce55d['attackAnimationId1']();$gameTemp[_0x481125(0x889)](_0x4828d0,_0x2407f4,_0x3aeea5),_0xfbde2b[_0x481125(0x413)]&&_0x4a68bc[_0x481125(0x645)](_0x481125(0x505));}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x72b),_0x56b0e0=>{const _0x3c5f89=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3c5f89(0x334)](_0x56b0e0,_0x56b0e0);const _0x3045c0=$gameTemp[_0x3c5f89(0xc52)](),_0x4e4ec2=BattleManager[_0x3c5f89(0xb38)],_0xf440cd=VisuMZ['CreateActionSequenceTargets'](_0x56b0e0['Targets']),_0x377d1f=_0x56b0e0[_0x3c5f89(0x76e)],_0x5ad7cb=BattleManager[_0x3c5f89(0x2e0)];if(!_0x3045c0||!_0x4e4ec2)return;const _0x31f938=_0x4e4ec2[_0x3c5f89(0x9f1)]();$gameTemp[_0x3c5f89(0x889)](_0xf440cd,_0x31f938,_0x377d1f);if(_0x56b0e0[_0x3c5f89(0x413)]){if(_0x3c5f89(0x94d)===_0x3c5f89(0x94d))_0x3045c0[_0x3c5f89(0x645)](_0x3c5f89(0x505));else{const _0x3e448e=_0x55f131[_0x3c5f89(0x32c)][_0x3c5f89(0x9e4)];_0x3e448e[_0x3c5f89(0xbfa)]['y']=0x0;}}}),PluginManager[_0x4fbf70(0xb86)](pluginData['name'],_0x4fbf70(0x8c5),_0xf6cb05=>{const _0x2304ae=_0x4fbf70;if(!SceneManager[_0x2304ae(0x90d)]())return;VisuMZ['ConvertParams'](_0xf6cb05,_0xf6cb05);const _0x19680c=_0x4fe205[_0x2304ae(0xd5a)](_0xf6cb05[_0x2304ae(0x704)]);if(_0x19680c<=0x0)return;const _0x3e9e79=$gameTemp[_0x2304ae(0xc52)](),_0x4fe205=BattleManager['_subject'],_0x419271=VisuMZ['CreateActionSequenceTargets'](_0xf6cb05[_0x2304ae(0x2c9)]),_0x229634=_0xf6cb05[_0x2304ae(0x76e)],_0x4cdafb=BattleManager['_logWindow'];if(!_0x3e9e79||!_0x4fe205)return;$gameTemp[_0x2304ae(0x889)](_0x419271,_0x19680c,_0x229634),_0xf6cb05[_0x2304ae(0x413)]&&_0x3e9e79[_0x2304ae(0x645)](_0x2304ae(0x505));}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],'ActSeq_Animation_CastAnimation',_0x45236c=>{const _0x36cb06=_0x4fbf70;if(!SceneManager[_0x36cb06(0x90d)]())return;VisuMZ[_0x36cb06(0x334)](_0x45236c,_0x45236c);const _0x5df633=$gameTemp[_0x36cb06(0xc52)](),_0x31068f=BattleManager[_0x36cb06(0xb15)],_0x5ba355=_0x45236c['Mirror'],_0x53364a=VisuMZ[_0x36cb06(0x938)](_0x45236c[_0x36cb06(0x2c9)]);if(!_0x5df633||!_0x31068f)return;if(!_0x31068f[_0x36cb06(0x98d)]())return;for(const _0x9a276c of _0x53364a){if(!_0x9a276c)continue;_0x9a276c[_0x36cb06(0xbfb)](_0x31068f,_0x5ba355);}if(_0x45236c['WaitForAnimation'])_0x5df633[_0x36cb06(0x645)](_0x36cb06(0x505));}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],'ActSeq_Animation_ChangeBattlePortrait',_0x2156a1=>{const _0x254ddd=_0x4fbf70;VisuMZ[_0x254ddd(0x334)](_0x2156a1,_0x2156a1);const _0x1d8a1e=$gameTemp[_0x254ddd(0xc52)](),_0x28be1a=VisuMZ['CreateActionSequenceTargets'](_0x2156a1[_0x254ddd(0x2c9)]),_0x2a8ba2=_0x2156a1['Filename'];if(!_0x2a8ba2)return;for(const _0x446e9f of _0x28be1a){if('gPRGB'==='ivTwQ')this['drawGauge']();else{if(!_0x446e9f)continue;if(!_0x446e9f[_0x254ddd(0xc9f)]())continue;_0x446e9f[_0x254ddd(0x865)](_0x2a8ba2);}}}),PluginManager['registerCommand'](pluginData['name'],_0x4fbf70(0xc95),_0x5cf60d=>{const _0x1916e4=_0x4fbf70;if(!SceneManager[_0x1916e4(0x32c)])return;if(!SceneManager['_scene'][_0x1916e4(0x7cf)])return;if(!Imported[_0x1916e4(0xcaf)])return;VisuMZ[_0x1916e4(0x334)](_0x5cf60d,_0x5cf60d);const _0x23599c=$gameTemp[_0x1916e4(0xc52)](),_0x2d2fed=Math[_0x1916e4(0xbec)](_0x5cf60d[_0x1916e4(0x5c5)]),_0x3803=Math[_0x1916e4(0xbec)](_0x5cf60d[_0x1916e4(0x7a0)]);$gameTemp[_0x1916e4(0x699)](_0x2d2fed,_0x3803,_0x5cf60d['AnimationID'],_0x5cf60d[_0x1916e4(0x76e)],_0x5cf60d[_0x1916e4(0x77c)]);if(_0x5cf60d['WaitComplete']&&_0x23599c){if(_0x1916e4(0x2d8)!==_0x1916e4(0x407))SceneManager['_scene'][_0x1916e4(0x7cf)][_0x1916e4(0x43f)](),_0x23599c[_0x1916e4(0x645)]('battleAnimation');else{const _0x1ef8e5=this[_0x1916e4(0x80d)]&&this[_0x1916e4(0x80d)]['isBattlerFlipped']();this[_0x1916e4(0x46c)]=(_0x1ef8e5?-0x1:0x1)*_0xe20756['abs'](this['scale']['x']);}}}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x5a3),_0x35cd2b=>{const _0x3e5752=_0x4fbf70;if(!SceneManager[_0x3e5752(0x90d)]())return;VisuMZ[_0x3e5752(0x334)](_0x35cd2b,_0x35cd2b);const _0x232719=$gameTemp['getLastPluginCommandInterpreter'](),_0x253ace=VisuMZ[_0x3e5752(0x938)](_0x35cd2b['Targets']),_0x494365=_0x35cd2b[_0x3e5752(0x7d7)],_0x112f75=_0x35cd2b['Mirror'];if(!_0x232719)return;$gameTemp[_0x3e5752(0x889)](_0x253ace,_0x494365,_0x112f75);if(_0x35cd2b[_0x3e5752(0x413)])_0x232719[_0x3e5752(0x645)](_0x3e5752(0x505));}),PluginManager['registerCommand'](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0xc36),_0x462135=>{const _0x41706d=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;const _0x13337b=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x13337b)return;_0x13337b[_0x41706d(0x645)](_0x41706d(0x505));}),PluginManager['registerCommand'](pluginData[_0x4fbf70(0x27a)],'ActSeq_BattleLog_AddText',_0x5f5132=>{const _0x1db704=_0x4fbf70;if(!SceneManager[_0x1db704(0x90d)]())return;VisuMZ[_0x1db704(0x334)](_0x5f5132,_0x5f5132);const _0x35c34b=BattleManager[_0x1db704(0x2e0)],_0x26d792=_0x5f5132[_0x1db704(0x661)]&&Imported[_0x1db704(0x855)];_0x35c34b[_0x1db704(0xb70)](_0x5f5132[_0x1db704(0xcca)]),_0x26d792&&Imported[_0x1db704(0x855)]&&$gameSystem['addTextToCombatLog'](_0x5f5132[_0x1db704(0xcca)]||'',_0x5f5132['CombatLogIcon']||0x0);}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],'ActSeq_BattleLog_Clear',_0x45eb1c=>{const _0x5a73ba=_0x4fbf70;if(!SceneManager[_0x5a73ba(0x90d)]())return;const _0x12b6f4=BattleManager['_logWindow'];_0x12b6f4[_0x5a73ba(0xb36)]();}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],'ActSeq_BattleLog_DisplayAction',_0x3eab11=>{const _0x27f33c=_0x4fbf70;if(!SceneManager[_0x27f33c(0x90d)]())return;const _0x2c2560=$gameTemp[_0x27f33c(0xc52)](),_0x216011=BattleManager['_action'],_0xa4878a=BattleManager[_0x27f33c(0xb38)],_0x11b7ed=BattleManager[_0x27f33c(0x2e0)];if(!_0x2c2560||!_0x216011||!_0xa4878a)return;if(!_0x216011['item']())return;_0x11b7ed[_0x27f33c(0xc91)](_0xa4878a,_0x216011[_0x27f33c(0x98d)]()),_0x2c2560[_0x27f33c(0x645)](_0x27f33c(0x60b));}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0xbc9),_0xe8ce55=>{const _0x5aa061=_0x4fbf70;if(!SceneManager[_0x5aa061(0x90d)]())return;const _0x4f6f1b=BattleManager[_0x5aa061(0x2e0)];_0x4f6f1b[_0x5aa061(0x941)]();}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x1ac),_0x4d15a1=>{const _0x45b1bf=_0x4fbf70;if(!SceneManager[_0x45b1bf(0x90d)]())return;const _0x4f2353=BattleManager['_logWindow'];_0x4f2353[_0x45b1bf(0xc49)]();}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0xaea),_0x2f79c3=>{const _0x43b310=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;const _0x476f73=BattleManager[_0x43b310(0x2e0)];_0x476f73[_0x43b310(0x1e5)]();}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x290),_0x13d225=>{const _0x3b766f=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x13d225,_0x13d225),SceneManager[_0x3b766f(0x32c)][_0x3b766f(0x7b7)](_0x13d225['ShowHide']);}),PluginManager[_0x4fbf70(0xb86)](pluginData['name'],_0x4fbf70(0x839),_0x49bca7=>{const _0x1afed5=_0x4fbf70;if(!SceneManager[_0x1afed5(0x90d)]())return;const _0x3d7fec=$gameTemp['getLastPluginCommandInterpreter']();_0x3d7fec[_0x1afed5(0x645)](_0x1afed5(0x60b));}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x62e),_0x33ec25=>{const _0xa40095=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;const _0x244d56=$gameTemp[_0xa40095(0xc52)](),_0x11b21f=BattleManager['_logWindow'];_0x11b21f[_0xa40095(0x6fd)](),_0x244d56[_0xa40095(0x645)](_0xa40095(0x60b));}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x5c4),_0x10436b=>{const _0x16361a=_0x4fbf70;if(!SceneManager[_0x16361a(0x90d)]())return;if(!Imported[_0x16361a(0x524)])return;VisuMZ['ConvertParams'](_0x10436b,_0x10436b);const _0xe9e5d1=$gameScreen['battleCameraData']();_0xe9e5d1['cameraClamp']=_0x10436b['Setting'];}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0xb30),_0x3df8ab=>{const _0x567be9=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x567be9(0x524)])return;VisuMZ[_0x567be9(0x334)](_0x3df8ab,_0x3df8ab);const _0x484797=$gameTemp[_0x567be9(0xc52)](),_0x5a5c7d=_0x3df8ab[_0x567be9(0x554)];$gameScreen[_0x567be9(0xc1e)](_0x3df8ab['FocusX'],_0x3df8ab['FocusY'],_0x3df8ab['Duration'],_0x3df8ab[_0x567be9(0x483)]);if(_0x5a5c7d)_0x484797[_0x567be9(0x645)](_0x567be9(0x716));}),PluginManager['registerCommand'](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0xa69),_0x763a6d=>{const _0x1bedec=_0x4fbf70;if(!SceneManager[_0x1bedec(0x90d)]())return;if(!Imported[_0x1bedec(0x524)])return;VisuMZ[_0x1bedec(0x334)](_0x763a6d,_0x763a6d);const _0x33621d=$gameTemp[_0x1bedec(0xc52)](),_0x51c9d0=VisuMZ[_0x1bedec(0x938)](_0x763a6d[_0x1bedec(0x2c9)]),_0x46ea7f=_0x763a6d[_0x1bedec(0x554)];$gameScreen[_0x1bedec(0xd42)](_0x51c9d0,_0x763a6d['Duration'],_0x763a6d['EasingType']);if(_0x46ea7f)_0x33621d[_0x1bedec(0x645)](_0x1bedec(0x716));}),PluginManager[_0x4fbf70(0xb86)](pluginData['name'],_0x4fbf70(0x1fa),_0x53b87c=>{const _0x2266a0=_0x4fbf70;if(!SceneManager[_0x2266a0(0x90d)]())return;if(!Imported[_0x2266a0(0x524)])return;VisuMZ[_0x2266a0(0x334)](_0x53b87c,_0x53b87c);const _0x517684=$gameTemp[_0x2266a0(0xc52)](),_0x176c9d=_0x53b87c[_0x2266a0(0x554)];$gameScreen['setBattleCameraOffset'](_0x53b87c[_0x2266a0(0x259)],_0x53b87c[_0x2266a0(0x764)],_0x53b87c[_0x2266a0(0x590)],_0x53b87c[_0x2266a0(0x483)]);if(_0x176c9d)_0x517684[_0x2266a0(0x645)](_0x2266a0(0x716));}),PluginManager['registerCommand'](pluginData[_0x4fbf70(0x27a)],'ActSeq_Camera_Reset',_0x4c99a3=>{const _0x58bcb8=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x58bcb8(0x524)])return;VisuMZ['ConvertParams'](_0x4c99a3,_0x4c99a3);const _0x5c7b02=$gameTemp[_0x58bcb8(0xc52)](),_0x490782=_0x4c99a3[_0x58bcb8(0x3ab)],_0x3dbf68=_0x4c99a3[_0x58bcb8(0x536)],_0xfb5e4f=_0x4c99a3[_0x58bcb8(0x554)];if(_0x490782){if(_0x58bcb8(0x75b)===_0x58bcb8(0x75b)){const _0x589b2c=Math['round'](Graphics[_0x58bcb8(0x606)]/0x2),_0xd3d1f5=Math[_0x58bcb8(0xbec)](Graphics[_0x58bcb8(0x389)]/0x2);$gameScreen['setBattleCameraPoint'](_0x589b2c,_0xd3d1f5,_0x4c99a3['Duration'],_0x4c99a3[_0x58bcb8(0x483)]);}else{let _0x24fbe6='battleUIOffsetY';if(this['checkCacheKey'](_0x24fbe6))return this[_0x58bcb8(0x7ff)][_0x24fbe6];return this[_0x58bcb8(0x7ff)][_0x24fbe6]=this[_0x58bcb8(0xa46)](this[_0x58bcb8(0xbb3)]()),this[_0x58bcb8(0x7ff)][_0x24fbe6];}}_0x3dbf68&&$gameScreen[_0x58bcb8(0x291)](0x0,0x0,_0x4c99a3['Duration'],_0x4c99a3[_0x58bcb8(0x483)]);if(_0xfb5e4f)_0x5c7b02[_0x58bcb8(0x645)](_0x58bcb8(0x716));}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x56e),_0x37ea9e=>{const _0x44d91c=_0x4fbf70;if(!SceneManager[_0x44d91c(0x90d)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x1ee12e=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x1ee12e)return;_0x1ee12e[_0x44d91c(0x645)](_0x44d91c(0x716));}),VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x79e)]=function(_0x7bdc70){const _0x230826=_0x4fbf70;_0x7bdc70[_0x230826(0xb1e)]='';const _0x847ea0=VisuMZ['VisualCutinEffect'][_0x230826(0x79e)](_0x7bdc70),_0x3ec20c=VisuMZ[_0x230826(0x938)](_0x7bdc70[_0x230826(0x2c9)])[0x0]||null;if(_0x3ec20c){if('yEfYQ'!=='yEfYQ')return![];else{_0x847ea0['portraitFilename']=_0x3ec20c[_0x230826(0x248)](),_0x847ea0[_0x230826(0xb37)]=_0x3ec20c[_0x230826(0x9e6)](),_0x847ea0[_0x230826(0xc90)]=_0x3ec20c[_0x230826(0x6c7)](),_0x847ea0['portraitType']=_0x3ec20c[_0x230826(0x3db)]();if(_0x3ec20c[_0x230826(0x923)]()){_0x3ec20c['flipVisualCutinHorz']()&&(_0x847ea0[_0x230826(0x48f)]=!_0x847ea0[_0x230826(0x48f)]);_0x3ec20c[_0x230826(0xcf9)]()&&(_0x847ea0[_0x230826(0x1a6)]=!_0x847ea0['portraitFlipVert']);_0x847ea0[_0x230826(0x446)]===_0x230826(0x810)&&(_0x847ea0[_0x230826(0x48f)]=!_0x847ea0[_0x230826(0x48f)]);if(_0x7bdc70[_0x230826(0x4c6)][_0x230826(0x6b6)]){if(_0x230826(0xc39)===_0x230826(0x386))return![];else _0x847ea0[_0x230826(0xaf0)]*=-0x1;}_0x7bdc70[_0x230826(0x4c6)][_0x230826(0x76c)]&&(_0x847ea0[_0x230826(0x7b5)]*=-0x1),_0x847ea0[_0x230826(0x90f)]+=_0x7bdc70['ExtraSettings']['parallaxHueEnemyModifier']??0x0;}}}return _0x847ea0;},PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x3c8),_0x4d5e19=>{const _0x3bce50=_0x4fbf70;if(!SceneManager[_0x3bce50(0x90d)]())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;VisuMZ['ConvertParams'](_0x4d5e19,_0x4d5e19);const _0x19ba04=VisuMZ[_0x3bce50(0xae2)][_0x3bce50(0x79e)](_0x4d5e19);SceneManager[_0x3bce50(0x32c)][_0x3bce50(0xae1)](_0x19ba04);const _0x3cad7a=$gameTemp[_0x3bce50(0xc52)]();_0x3cad7a&&_0x4d5e19[_0x3bce50(0x705)]&&_0x3cad7a[_0x3bce50(0x645)](_0x3bce50(0x7bc));}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x54f),_0x20e04c=>{const _0x4fe904=_0x4fbf70;if(!SceneManager[_0x4fe904(0x90d)]())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;VisuMZ[_0x4fe904(0x334)](_0x20e04c,_0x20e04c),SceneManager['_scene']['clearAllVisualCutins']();const _0x75cca1=$gameTemp['getLastPluginCommandInterpreter']();_0x75cca1&&_0x20e04c[_0x4fe904(0x2c4)]&&(_0x4fe904(0x76a)===_0x4fe904(0x76a)?_0x75cca1['setWaitMode'](_0x4fe904(0x630)):_0x1458a9[_0x4fe904(0xae2)]['Window_BattleLog_displayEvasion']['call'](this,_0x2b56c5));}),PluginManager[_0x4fbf70(0xb86)](pluginData['name'],'ActSeq_Cutin_EndVisualCutinEffectType',_0x33c28f=>{const _0x30b893=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;VisuMZ['ConvertParams'](_0x33c28f,_0x33c28f);const _0x238d4a=_0x33c28f['type']['toLowerCase']()[_0x30b893(0xcda)]();SceneManager['_scene'][_0x30b893(0x638)](_0x238d4a);const _0x2c1c4f=$gameTemp[_0x30b893(0xc52)]();_0x2c1c4f&&_0x33c28f[_0x30b893(0x2c4)]&&('wVaiz'==='wVaiz'?_0x2c1c4f['setWaitMode']('cutinExit'):_0x593871[_0x30b893(0x813)](_0x30b893(0xc2c)));}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x893),_0x22e334=>{const _0x5b4d64=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5b4d64(0x3b4)])return;const _0x509000=$gameTemp[_0x5b4d64(0xc52)]();_0x509000[_0x5b4d64(0x645)]('cutinEnter');}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x6d3),_0x272248=>{const _0x55aad6=_0x4fbf70;if(!SceneManager[_0x55aad6(0x90d)]())return;if(!Imported[_0x55aad6(0x3b4)])return;const _0x456650=$gameTemp[_0x55aad6(0xc52)]();_0x456650[_0x55aad6(0x645)](_0x55aad6(0x630));}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x4f3),_0x3581df=>{const _0x1a5ca0=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1a5ca0(0x715)])return;VisuMZ[_0x1a5ca0(0x334)](_0x3581df,_0x3581df);const _0x5eb306=VisuMZ[_0x1a5ca0(0x938)](_0x3581df['Targets']),_0x59047b=_0x3581df[_0x1a5ca0(0x4bb)][_0x1a5ca0(0x39e)]()[_0x1a5ca0(0xcda)]();for(const _0x4998e9 of _0x5eb306){if('ZApnw'!==_0x1a5ca0(0x249)){if(!_0x5bab1b[_0x1a5ca0(0x90d)]())return;if(!_0x455ca9[_0x1a5ca0(0xcf4)])return;_0x439414[_0x1a5ca0(0x334)](_0x58fbcb,_0x3628de);const _0x1d250e=_0x16956f[_0x1a5ca0(0xb15)],_0x2fc392=_0x3cb901[_0x1a5ca0(0xaed)];if(!_0x1d250e)return;_0x1d250e[_0x1a5ca0(0xb05)]=_0x2fc392;}else{if(!_0x4998e9)continue;_0x4998e9[_0x1a5ca0(0x9a2)](_0x59047b);}}}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x9bd),_0x4ba189=>{const _0x21dc0c=_0x4fbf70;if(!SceneManager[_0x21dc0c(0x90d)]())return;if(!Imported[_0x21dc0c(0x715)])return;VisuMZ['ConvertParams'](_0x4ba189,_0x4ba189);const _0x1b740b=VisuMZ[_0x21dc0c(0x938)](_0x4ba189['Targets']),_0x115fbb=_0x4ba189[_0x21dc0c(0xb4c)];for(const _0x1212a7 of _0x1b740b){if(!_0x1212a7)continue;_0x1212a7['dragonbonesData']()['timeScale']=_0x115fbb;}}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x7fd),_0x26216f=>{const _0x2af263=_0x4fbf70;if(!SceneManager[_0x2af263(0x90d)]())return;if(!Imported[_0x2af263(0xcf4)])return;VisuMZ[_0x2af263(0x334)](_0x26216f,_0x26216f);const _0x4d8076=BattleManager['_action'],_0x36aab8=_0x26216f[_0x2af263(0xaed)];if(!_0x4d8076)return;_0x4d8076[_0x2af263(0x2b1)]=_0x36aab8;}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0xd41),_0x52a94b=>{const _0x41df02=_0x4fbf70;if(!SceneManager[_0x41df02(0x90d)]())return;if(!Imported[_0x41df02(0xcf4)])return;const _0x420783=BattleManager['_action'];if(!_0x420783)return;_0x420783[_0x41df02(0xc72)]();}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x588),_0x42581d=>{const _0x196c43=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;VisuMZ[_0x196c43(0x334)](_0x42581d,_0x42581d);const _0x44fda1=BattleManager[_0x196c43(0xb15)],_0x4a1fdc=_0x42581d['Elements'];if(!_0x44fda1)return;_0x44fda1['_battleCoreForcedElements']=_0x4a1fdc;}),PluginManager['registerCommand'](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x498),_0x20f10f=>{const _0xdf1e41=_0x4fbf70;if(!SceneManager[_0xdf1e41(0x90d)]())return;if(!Imported[_0xdf1e41(0xcf4)])return;const _0x564722=BattleManager[_0xdf1e41(0xb15)];if(!_0x564722)return;_0x564722[_0xdf1e41(0xa57)]=!![];}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x803),_0x2e8cd7=>{const _0x1b8c3c=_0x4fbf70;if(!Imported[_0x1b8c3c(0x2bf)])return;if(!SceneManager[_0x1b8c3c(0x90d)]())return;VisuMZ['ConvertParams'](_0x2e8cd7,_0x2e8cd7);const _0x4a4e13=VisuMZ['CreateActionSequenceTargets'](_0x2e8cd7[_0x1b8c3c(0x2c9)]);for(const _0x27e4d2 of _0x4a4e13){if('GEchE'!==_0x1b8c3c(0x1ba)){if(!_0x27e4d2)continue;_0x27e4d2[_0x1b8c3c(0x9b3)](_0x1b8c3c(0x4b7)),_0x27e4d2[_0x1b8c3c(0x9b3)]('glitch'),_0x27e4d2[_0x1b8c3c(0x9b3)]('tv'),_0x27e4d2[_0x1b8c3c(0xcee)]();}else{let _0x4e0aa6=0x0;return this[_0x1b8c3c(0x80d)]&&!this[_0x1b8c3c(0x80d)]['isBattlerGrounded']()&&(_0x4e0aa6-=this[_0x1b8c3c(0x6c4)],_0x4e0aa6-=this['_jumpHeight']),_0x4e0aa6;}}$gamePlayer[_0x1b8c3c(0x1e5)]();}),PluginManager['registerCommand'](pluginData[_0x4fbf70(0x27a)],'ActSeq_Horror_GlitchCreate',_0x3b85ba=>{const _0x35a88e=_0x4fbf70;if(!Imported[_0x35a88e(0x2bf)])return;if(!SceneManager[_0x35a88e(0x90d)]())return;VisuMZ[_0x35a88e(0x334)](_0x3b85ba,_0x3b85ba);const _0x5cd0bd=VisuMZ['CreateActionSequenceTargets'](_0x3b85ba['Targets']),_0x196b43=_0x35a88e(0x405);_0x3b85ba['sliceMin']=Math[_0x35a88e(0x745)](_0x3b85ba[_0x35a88e(0x42c)]/0x2),_0x3b85ba[_0x35a88e(0xb87)]=_0x3b85ba[_0x35a88e(0x42c)],_0x3b85ba[_0x35a88e(0x891)]=!![];for(const _0x41642a of _0x5cd0bd){if(!_0x41642a)continue;_0x41642a[_0x35a88e(0x8b6)](_0x196b43,_0x3b85ba);}$gamePlayer[_0x35a88e(0x1e5)]();}),PluginManager['registerCommand'](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0xac1),_0x946b50=>{const _0x21f42d=_0x4fbf70;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x21f42d(0x90d)]())return;VisuMZ['ConvertParams'](_0x946b50,_0x946b50);const _0x5ef0fd=VisuMZ[_0x21f42d(0x938)](_0x946b50[_0x21f42d(0x2c9)]);for(const _0x15d1c0 of _0x5ef0fd){if(_0x21f42d(0x6bc)===_0x21f42d(0x6bc)){if(!_0x15d1c0)continue;_0x15d1c0[_0x21f42d(0x9b3)]('glitch');}else{if(!_0x2e0cd4[_0x21f42d(0x521)]())return![];}}$gamePlayer[_0x21f42d(0x1e5)]();}),PluginManager['registerCommand'](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x482),_0x3175fa=>{const _0x1a4f0b=_0x4fbf70;if(!Imported[_0x1a4f0b(0x2bf)])return;if(!SceneManager[_0x1a4f0b(0x90d)]())return;VisuMZ[_0x1a4f0b(0x334)](_0x3175fa,_0x3175fa);const _0x1b636e=VisuMZ['CreateActionSequenceTargets'](_0x3175fa[_0x1a4f0b(0x2c9)]),_0x572887=_0x1a4f0b(0x4b7);for(const _0x2a7485 of _0x1b636e){if(!_0x2a7485)continue;_0x2a7485[_0x1a4f0b(0x8b6)](_0x572887,_0x3175fa);}$gamePlayer[_0x1a4f0b(0x1e5)]();}),PluginManager['registerCommand'](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0xb00),_0x1d3275=>{const _0x2b69ba=_0x4fbf70;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2b69ba(0x334)](_0x1d3275,_0x1d3275);const _0x59922a=VisuMZ['CreateActionSequenceTargets'](_0x1d3275[_0x2b69ba(0x2c9)]);for(const _0x5be57c of _0x59922a){if(!_0x5be57c)continue;_0x5be57c['removeHorrorEffect'](_0x2b69ba(0x4b7));}$gamePlayer['refresh']();}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],'ActSeq_Horror_TVCreate',_0xdfc747=>{const _0x3fdffb=_0x4fbf70;if(!Imported[_0x3fdffb(0x2bf)])return;if(!SceneManager[_0x3fdffb(0x90d)]())return;VisuMZ[_0x3fdffb(0x334)](_0xdfc747,_0xdfc747);const _0xbf74a6=VisuMZ['CreateActionSequenceTargets'](_0xdfc747[_0x3fdffb(0x2c9)]),_0x4d7095='tv';for(const _0x2f4ba5 of _0xbf74a6){if(!_0x2f4ba5)continue;_0x2f4ba5[_0x3fdffb(0x8b6)](_0x4d7095,_0xdfc747);}$gamePlayer[_0x3fdffb(0x1e5)]();}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x204),_0x3af4a7=>{const _0x399ab0=_0x4fbf70;if(!Imported[_0x399ab0(0x2bf)])return;if(!SceneManager[_0x399ab0(0x90d)]())return;VisuMZ['ConvertParams'](_0x3af4a7,_0x3af4a7);const _0x4a5eaf=VisuMZ[_0x399ab0(0x938)](_0x3af4a7[_0x399ab0(0x2c9)]);for(const _0x458521 of _0x4a5eaf){if(!_0x458521)continue;_0x458521[_0x399ab0(0x9b3)]('tv');}$gamePlayer[_0x399ab0(0x1e5)]();}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0xc7f),_0x19f164=>{const _0x1a2321=_0x4fbf70;if(!Imported[_0x1a2321(0xa83)])return;const _0x44f2f9=SceneManager[_0x1a2321(0x32c)][_0x1a2321(0x7cf)];if(!_0x44f2f9)return;if(VisuMZ[_0x1a2321(0x726)][_0x1a2321(0x1a8)]<=1.04){alert(_0x1a2321(0x19f)),SceneManager[_0x1a2321(0x4c5)]();return;}VisuMZ[_0x1a2321(0x334)](_0x19f164,_0x19f164);const _0x46d2c1=_0x19f164[_0x1a2321(0x193)];_0x44f2f9[_0x1a2321(0x323)](_0x46d2c1);}),PluginManager[_0x4fbf70(0xb86)](pluginData['name'],_0x4fbf70(0x209),_0x52be3d=>{const _0x409c4e=_0x4fbf70;if(!SceneManager[_0x409c4e(0x90d)]())return;if(!Imported[_0x409c4e(0xa83)])return;const _0xe8f3e0=SceneManager[_0x409c4e(0x32c)]['_spriteset'];if(!_0xe8f3e0)return;VisuMZ[_0x409c4e(0x334)](_0x52be3d,_0x52be3d);const _0x4f3475=_0x52be3d[_0x409c4e(0x443)]||0x1,_0xa79ef2=_0x52be3d[_0x409c4e(0x590)]||0x1,_0x4c68ac=_0x52be3d['EasingType']||_0x409c4e(0x60a);_0xe8f3e0[_0x409c4e(0xc80)](_0x4f3475,_0xa79ef2,_0x4c68ac);}),PluginManager['registerCommand'](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x5c2),_0x38276c=>{const _0x564751=_0x4fbf70;if(!Imported[_0x564751(0xa83)])return;const _0x107818=SceneManager[_0x564751(0x32c)]['_spriteset'];if(!_0x107818)return;if(VisuMZ['ActSeqImpact'][_0x564751(0x1a8)]<=1.04){if(_0x564751(0xcd4)===_0x564751(0x4d2)){if(!this['_linkedSprite'])return;this[_0x564751(0x80d)]!==this[_0x564751(0x6f6)][_0x564751(0x80d)]&&this[_0x564751(0xc55)](this[_0x564751(0x6f6)][_0x564751(0x80d)]);}else{alert(_0x564751(0x19f)),SceneManager[_0x564751(0x4c5)]();return;}}VisuMZ[_0x564751(0x334)](_0x38276c,_0x38276c);const _0x570004=_0x38276c[_0x564751(0x193)];_0x107818[_0x564751(0x894)](_0x570004);}),PluginManager[_0x4fbf70(0xb86)](pluginData['name'],_0x4fbf70(0x4c3),_0x52397c=>{const _0x1681f2=_0x4fbf70;if(!SceneManager[_0x1681f2(0x90d)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x5bdd80=SceneManager['_scene']['_spriteset'];if(!_0x5bdd80)return;VisuMZ[_0x1681f2(0x334)](_0x52397c,_0x52397c);const _0x9d352d=Number(_0x52397c[_0x1681f2(0x739)])||0x0,_0x1f5933=Number(_0x52397c['Rate']),_0x466e4a=_0x52397c[_0x1681f2(0x590)]||0x1,_0xaab3ca=_0x52397c[_0x1681f2(0x483)]||_0x1681f2(0x60a);_0x5bdd80['setupMotionBlurImpactFilter'](_0x9d352d,_0x1f5933,_0x466e4a,_0xaab3ca);}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x559),_0x29f028=>{const _0x279841=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x12043b=SceneManager[_0x279841(0x32c)][_0x279841(0x7cf)];if(!_0x12043b)return;VisuMZ[_0x279841(0x334)](_0x29f028,_0x29f028);const _0x4bf439=Number(_0x29f028[_0x279841(0x739)])||0x0,_0x49fa6c=Number(_0x29f028['Rate']),_0x56aff2=_0x29f028[_0x279841(0x590)]||0x1,_0x46ed30=_0x29f028[_0x279841(0x483)]||_0x279841(0x60a),_0x58a964=VisuMZ[_0x279841(0x938)](_0x29f028[_0x279841(0x2c9)]);for(const _0x193ade of _0x58a964){if(_0x279841(0xc78)==='OMXmu'){if(!_0x193ade)continue;if(!_0x193ade[_0x279841(0xb81)]())continue;_0x193ade[_0x279841(0xb81)]()[_0x279841(0x864)](_0x4bf439,_0x49fa6c,_0x56aff2,_0x46ed30);}else _0x1ec69e['removeBuff'](_0x73024c);}}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x78c),_0x565151=>{const _0x27da34=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x27da34(0xa83)])return;VisuMZ[_0x27da34(0x334)](_0x565151,_0x565151);const _0x46d664={'delay':_0x565151[_0x27da34(0x523)],'duration':_0x565151[_0x27da34(0x264)],'hue':_0x565151[_0x27da34(0xd5b)],'opacityStart':_0x565151['opacityStart'],'tone':_0x565151[_0x27da34(0x1fd)],'visible':!![]},_0x49bd8b=VisuMZ[_0x27da34(0x938)](_0x565151[_0x27da34(0x2c9)]);for(const _0x2e55b4 of _0x49bd8b){if(!_0x2e55b4)continue;_0x2e55b4['setBattlerMotionTrailData'](_0x46d664);}}),PluginManager[_0x4fbf70(0xb86)](pluginData['name'],_0x4fbf70(0x266),_0x1bf5d4=>{const _0x130cf7=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x130cf7(0xa83)])return;VisuMZ[_0x130cf7(0x334)](_0x1bf5d4,_0x1bf5d4);const _0x36d5dd=VisuMZ[_0x130cf7(0x938)](_0x1bf5d4[_0x130cf7(0x2c9)]);for(const _0x4f3df2 of _0x36d5dd){if(!_0x4f3df2)continue;_0x4f3df2[_0x130cf7(0x5d2)]();}}),PluginManager['registerCommand'](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0xbd1),_0x377089=>{const _0x2ae0ad=_0x4fbf70;if(!Imported[_0x2ae0ad(0xa83)])return;const _0x5384a4=SceneManager[_0x2ae0ad(0x32c)][_0x2ae0ad(0x7cf)];if(!_0x5384a4)return;if(VisuMZ[_0x2ae0ad(0x726)][_0x2ae0ad(0x1a8)]<=1.04){if('DjcmQ'!=='DjcmQ'){if([0x6c,0x198][_0x2ae0ad(0x6e3)](_0x3639bf[_0x2ae0ad(0x503)])){const _0xba5fd8=_0x12fb0c['parameters'][0x0];if(_0xba5fd8['match'](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}else{alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x2ae0ad(0x4c5)]();return;}}VisuMZ['ConvertParams'](_0x377089,_0x377089);const _0x538d8e=_0x377089[_0x2ae0ad(0x193)];_0x5384a4['setupNegativeImpactFilter'](_0x538d8e);}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x5cb),_0x12f9f5=>{const _0x252305=_0x4fbf70;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x5efc59=SceneManager[_0x252305(0x32c)][_0x252305(0x7cf)];if(!_0x5efc59)return;if(VisuMZ['ActSeqImpact'][_0x252305(0x1a8)]<=1.04){alert(_0x252305(0x19f)),SceneManager[_0x252305(0x4c5)]();return;}VisuMZ[_0x252305(0x334)](_0x12f9f5,_0x12f9f5);const _0x2d8650=_0x12f9f5['Enable'];_0x5efc59[_0x252305(0x553)](_0x2d8650);}),PluginManager[_0x4fbf70(0xb86)](pluginData['name'],_0x4fbf70(0xac4),_0x3cc9d1=>{const _0x1a06f6=_0x4fbf70;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x1ea1d6=SceneManager['_scene'][_0x1a06f6(0x7cf)];if(!_0x1ea1d6)return;VisuMZ['ConvertParams'](_0x3cc9d1,_0x3cc9d1);const _0x15202b=_0x3cc9d1['X']||0x0,_0x5235af=_0x3cc9d1['Y']||0x0,_0x44281b=_0x3cc9d1[_0x1a06f6(0x4c9)]||0x0,_0x744c5a=_0x3cc9d1['Wave']||0x0,_0x334bc3=_0x3cc9d1[_0x1a06f6(0x590)]||0x1;_0x1ea1d6[_0x1a06f6(0x4a9)](_0x15202b,_0x5235af,_0x44281b,_0x744c5a,_0x334bc3);}),PluginManager['registerCommand'](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0xaab),_0x1ac15e=>{const _0x3f64cb=_0x4fbf70;if(!SceneManager[_0x3f64cb(0x90d)]())return;if(!Imported[_0x3f64cb(0xa83)])return;const _0x2bd81c=SceneManager[_0x3f64cb(0x32c)][_0x3f64cb(0x7cf)];if(!_0x2bd81c)return;VisuMZ[_0x3f64cb(0x334)](_0x1ac15e,_0x1ac15e);const _0x28f30a=VisuMZ[_0x3f64cb(0x938)](_0x1ac15e['Targets']),_0x2068f9=_0x1ac15e['TargetLocation'],_0x5f2ca8=_0x1ac15e[_0x3f64cb(0x259)]||0x0,_0x376018=_0x1ac15e['OffsetY']||0x0,_0x54e384=_0x1ac15e[_0x3f64cb(0x4c9)]||0x0,_0x52939c=_0x1ac15e['Wave']||0x0,_0x1af858=_0x1ac15e[_0x3f64cb(0x590)]||0x1;for(const _0x547048 of _0x28f30a){if(_0x3f64cb(0xcb4)===_0x3f64cb(0xcb4)){if(!_0x547048)continue;if(!_0x547048[_0x3f64cb(0xb81)]())continue;const _0x13acca=_0x547048[_0x3f64cb(0xb81)]();let _0x1f20c2=_0x13acca[_0x3f64cb(0xd6b)],_0x3465c2=_0x13acca['_baseY'];_0x1f20c2+=(Graphics['width']-Graphics['boxWidth'])/0x2,_0x3465c2+=(Graphics[_0x3f64cb(0x389)]-Graphics[_0x3f64cb(0xa30)])/0x2;if(_0x2068f9[_0x3f64cb(0xc4b)](/front/i))_0x1f20c2+=(_0x547048[_0x3f64cb(0x923)]()?0x1:-0x1)*_0x13acca['mainSpriteWidth']()/0x2;else _0x2068f9['match'](/back/i)&&(_0x1f20c2+=(_0x547048[_0x3f64cb(0x923)]()?-0x1:0x1)*_0x13acca[_0x3f64cb(0xb9d)]()/0x2);if(_0x2068f9['match'](/head/i))_0x3465c2-=_0x13acca[_0x3f64cb(0x237)]();else _0x2068f9[_0x3f64cb(0xc4b)](/center/i)&&(_0x3465c2-=_0x13acca[_0x3f64cb(0x237)]()/0x2);_0x1f20c2+=_0x5f2ca8,_0x3465c2+=_0x376018,_0x2bd81c['setupShockwaveImpactFilter'](_0x1f20c2,_0x3465c2,_0x54e384,_0x52939c,_0x1af858);}else return this[_0x3f64cb(0xd1b)]();}}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x422),_0x50dccc=>{const _0x12b24d=_0x4fbf70;if(!SceneManager[_0x12b24d(0x90d)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x47e037=SceneManager[_0x12b24d(0x32c)]['_spriteset'];if(!_0x47e037)return;VisuMZ[_0x12b24d(0x334)](_0x50dccc,_0x50dccc);const _0x51268e=VisuMZ[_0x12b24d(0x938)](_0x50dccc[_0x12b24d(0x2c9)]),_0x680659=_0x50dccc[_0x12b24d(0x517)],_0x38c1bd=_0x50dccc[_0x12b24d(0x259)]||0x0,_0x52faa2=_0x50dccc[_0x12b24d(0x764)]||0x0,_0x144044=_0x50dccc[_0x12b24d(0x4c9)]||0x0,_0x50596e=_0x50dccc[_0x12b24d(0x592)]||0x0,_0x40f25c=_0x50dccc['Duration']||0x1,_0x1d0fe1=Math[_0x12b24d(0x872)](..._0x51268e[_0x12b24d(0x990)](_0x185ec9=>_0x185ec9[_0x12b24d(0xb81)]()[_0x12b24d(0xd6b)]-_0x185ec9[_0x12b24d(0xb81)]()[_0x12b24d(0xb9d)]()/0x2)),_0x533c5d=Math[_0x12b24d(0x6f0)](..._0x51268e[_0x12b24d(0x990)](_0xabe795=>_0xabe795[_0x12b24d(0xb81)]()['_baseX']+_0xabe795['battler']()[_0x12b24d(0xb9d)]()/0x2)),_0x2cb5b7=Math[_0x12b24d(0x872)](..._0x51268e[_0x12b24d(0x990)](_0x18193d=>_0x18193d[_0x12b24d(0xb81)]()[_0x12b24d(0x571)]-_0x18193d[_0x12b24d(0xb81)]()[_0x12b24d(0x237)]())),_0xd8fb03=Math[_0x12b24d(0x6f0)](..._0x51268e[_0x12b24d(0x990)](_0x2228e8=>_0x2228e8[_0x12b24d(0xb81)]()['_baseY'])),_0x343d33=_0x51268e[_0x12b24d(0xa29)](_0x2cb002=>_0x2cb002[_0x12b24d(0xc9f)]())[_0x12b24d(0x9d2)],_0x116153=_0x51268e[_0x12b24d(0xa29)](_0x5511b5=>_0x5511b5[_0x12b24d(0x923)]())['length'];let _0x371c91=0x0,_0x20e904=0x0;if(_0x680659[_0x12b24d(0xc4b)](/front/i)){if(_0x12b24d(0xb06)===_0x12b24d(0xabe))return _0x54ba5f[_0x12b24d(0xae2)][_0x12b24d(0x837)][_0x12b24d(0x410)][_0x12b24d(0x4ce)];else _0x371c91=_0x343d33>=_0x116153?_0x1d0fe1:_0x533c5d;}else{if(_0x680659[_0x12b24d(0xc4b)](/middle/i)){if(_0x12b24d(0x454)!==_0x12b24d(0x454)){this[_0x12b24d(0x25b)]('performJump',[_0x22bd1b],_0x211733,_0x4ecd80);const _0x20842c=_0x568ef6[_0x12b24d(0x9d2)]>0x1?'front\x20center':_0x12b24d(0xc10);this['push'](_0x12b24d(0x411),_0x31af2b,_0x2c1d36,_0x20842c,_0x395c4e,!![],'Linear',!![]),this[_0x12b24d(0x25b)](_0x12b24d(0x9eb),[_0x3d7491],_0x12b24d(0xcdb)),this[_0x12b24d(0x25b)](_0x12b24d(0xcba));}else _0x371c91=(_0x1d0fe1+_0x533c5d)/0x2,melee=-0x1;}else _0x680659['match'](/back/i)&&(_0x371c91=_0x343d33>=_0x116153?_0x533c5d:_0x1d0fe1);}if(_0x680659[_0x12b24d(0xc4b)](/head/i))_0x20e904=_0x2cb5b7;else{if(_0x680659[_0x12b24d(0xc4b)](/center/i))'sqZLt'!==_0x12b24d(0x873)?_0x20e904=(_0x2cb5b7+_0xd8fb03)/0x2:(_0x474981[_0x12b24d(0xbfb)](_0x457e99),this[_0x12b24d(0x91e)]());else _0x680659[_0x12b24d(0xc4b)](/base/i)&&(_0x20e904=_0xd8fb03);}_0x371c91+=(Graphics[_0x12b24d(0x606)]-Graphics[_0x12b24d(0x2d5)])/0x2,_0x20e904+=(Graphics[_0x12b24d(0x389)]-Graphics['boxHeight'])/0x2,_0x371c91+=_0x38c1bd,_0x20e904+=_0x52faa2,_0x47e037[_0x12b24d(0x4a9)](_0x371c91,_0x20e904,_0x144044,_0x50596e,_0x40f25c);}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],'ActSeq_Impact_TimeScale',_0x2e2f72=>{const _0x5ebbf5=_0x4fbf70;if(!Imported[_0x5ebbf5(0xa83)])return;const _0x1aa5f1=SceneManager[_0x5ebbf5(0x32c)][_0x5ebbf5(0x7cf)];if(!_0x1aa5f1)return;if(VisuMZ[_0x5ebbf5(0x726)][_0x5ebbf5(0x1a8)]<=1.04){alert(_0x5ebbf5(0x19f)),SceneManager[_0x5ebbf5(0x4c5)]();return;}VisuMZ['ConvertParams'](_0x2e2f72,_0x2e2f72);const _0x3a3163=$gameTemp['getLastPluginCommandInterpreter'](),_0x44955f=Math['max'](0.01,_0x2e2f72[_0x5ebbf5(0x39f)]);$gameTemp['setBattleImpactTimeScale'](_0x44955f,_0x3a3163);}),PluginManager[_0x4fbf70(0xb86)](pluginData['name'],_0x4fbf70(0xadb),_0x1b7f70=>{const _0xc3c6d6=_0x4fbf70;if(!Imported[_0xc3c6d6(0xa83)])return;const _0x58d73a=SceneManager[_0xc3c6d6(0x32c)][_0xc3c6d6(0x7cf)];if(!_0x58d73a)return;if(VisuMZ['ActSeqImpact']['version']<=1.04){alert(_0xc3c6d6(0x19f)),SceneManager[_0xc3c6d6(0x4c5)]();return;}VisuMZ['ConvertParams'](_0x1b7f70,_0x1b7f70);const _0x27baae=$gameTemp[_0xc3c6d6(0xc52)](),_0x2d477c=_0x1b7f70['ms']||0x1;VisuMZ['ActSeqImpact'][_0xc3c6d6(0x37d)](_0x2d477c,_0x27baae);}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0xbe7),_0x2c1155=>{const _0x4131f8=_0x4fbf70;if(!Imported[_0x4131f8(0xa83)])return;const _0x38ed5e=SceneManager[_0x4131f8(0x32c)][_0x4131f8(0x7cf)];if(!_0x38ed5e)return;VisuMZ[_0x4131f8(0x334)](_0x2c1155,_0x2c1155);const _0x126fd1=_0x2c1155['X']||0x0,_0xdf834a=_0x2c1155['Y']||0x0,_0x56896f=_0x2c1155[_0x4131f8(0x253)]||0x0,_0x4f6530=_0x2c1155[_0x4131f8(0x90a)]||0x0,_0x21e384=_0x2c1155[_0x4131f8(0x590)]||0x1,_0x1f6185=_0x2c1155['EasingType']||_0x4131f8(0x60a);_0x38ed5e[_0x4131f8(0xd14)](_0x56896f,_0x126fd1,_0xdf834a,_0x4f6530,_0x21e384,_0x1f6185);}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0xac3),_0x52dae1=>{const _0x2b49f7=_0x4fbf70;if(!Imported[_0x2b49f7(0xa83)])return;const _0x1d0193=SceneManager[_0x2b49f7(0x32c)][_0x2b49f7(0x7cf)];if(!_0x1d0193)return;VisuMZ[_0x2b49f7(0x334)](_0x52dae1,_0x52dae1);const _0x80f76=VisuMZ[_0x2b49f7(0x938)](_0x52dae1[_0x2b49f7(0x2c9)]),_0x2b8261=_0x52dae1[_0x2b49f7(0x517)],_0x110932=_0x52dae1[_0x2b49f7(0x259)]||0x0,_0x513195=_0x52dae1[_0x2b49f7(0x764)]||0x0,_0x17245e=_0x52dae1[_0x2b49f7(0x253)]||0x0,_0x503062=_0x52dae1[_0x2b49f7(0x90a)]||0x0,_0x1ddc14=_0x52dae1['Duration']||0x1,_0x4a54c4=_0x52dae1[_0x2b49f7(0x483)]||_0x2b49f7(0x60a),_0x539395=Math['min'](..._0x80f76[_0x2b49f7(0x990)](_0x52dbf3=>_0x52dbf3[_0x2b49f7(0xb81)]()['_baseX']-_0x52dbf3[_0x2b49f7(0xb81)]()['mainSpriteWidth']()/0x2)),_0x99a30f=Math[_0x2b49f7(0x6f0)](..._0x80f76[_0x2b49f7(0x990)](_0x3e8288=>_0x3e8288[_0x2b49f7(0xb81)]()['_baseX']+_0x3e8288[_0x2b49f7(0xb81)]()[_0x2b49f7(0xb9d)]()/0x2)),_0x480605=Math[_0x2b49f7(0x872)](..._0x80f76[_0x2b49f7(0x990)](_0x5924c5=>_0x5924c5[_0x2b49f7(0xb81)]()['_baseY']-_0x5924c5[_0x2b49f7(0xb81)]()[_0x2b49f7(0x237)]())),_0x48a67e=Math[_0x2b49f7(0x6f0)](..._0x80f76[_0x2b49f7(0x990)](_0x4912fb=>_0x4912fb[_0x2b49f7(0xb81)]()[_0x2b49f7(0x571)])),_0x5cedf5=_0x80f76[_0x2b49f7(0xa29)](_0x4a2e06=>_0x4a2e06[_0x2b49f7(0xc9f)]())[_0x2b49f7(0x9d2)],_0x1736c2=_0x80f76[_0x2b49f7(0xa29)](_0x249341=>_0x249341[_0x2b49f7(0x923)]())['length'];let _0x3201dd=0x0,_0x2625fd=0x0;if(_0x2b8261[_0x2b49f7(0xc4b)](/front/i))_0x3201dd=_0x5cedf5>=_0x1736c2?_0x539395:_0x99a30f;else{if(_0x2b8261[_0x2b49f7(0xc4b)](/middle/i)){if(_0x2b49f7(0x1c7)==='hYpCI')return this[_0x2b49f7(0xa5b)]();else _0x3201dd=(_0x539395+_0x99a30f)/0x2,melee=-0x1;}else _0x2b8261[_0x2b49f7(0xc4b)](/back/i)&&(_0x3201dd=_0x5cedf5>=_0x1736c2?_0x99a30f:_0x539395);}if(_0x2b8261[_0x2b49f7(0xc4b)](/head/i))_0x2625fd=_0x480605;else{if(_0x2b8261[_0x2b49f7(0xc4b)](/center/i))_0x2b49f7(0x989)===_0x2b49f7(0x989)?_0x2625fd=(_0x480605+_0x48a67e)/0x2:(_0x373fb0['BattleCore'][_0x2b49f7(0x8b5)][_0x2b49f7(0xc4a)](this),this[_0x2b49f7(0x44f)]());else{if(_0x2b8261[_0x2b49f7(0xc4b)](/base/i)){if(_0x2b49f7(0x811)==='zUMnE'){if(!this['canMove']())return;if(this[_0x2b49f7(0x1b2)]===_0x54b7c1)return;this['_targetFloatHeight']=_0xc93d9e,this[_0x2b49f7(0xb93)]=_0x9c2480,this['_floatWholeDuration']=_0x4aab96,this['_floatEasing']=_0xb8a951||_0x2b49f7(0x60a);if(_0x31d435<=0x0)this[_0x2b49f7(0x6c4)]=_0x8b709d;}else _0x2625fd=_0x48a67e;}}}_0x3201dd+=(Graphics['width']-Graphics[_0x2b49f7(0x2d5)])/0x2,_0x2625fd+=(Graphics[_0x2b49f7(0x389)]-Graphics[_0x2b49f7(0xa30)])/0x2,_0x3201dd+=_0x110932,_0x2625fd+=_0x513195,_0x1d0193['setupZoomBlurImpactFilter'](_0x17245e,_0x3201dd,_0x2625fd,_0x503062,_0x1ddc14,_0x4a54c4);}),PluginManager['registerCommand'](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0xcbd),_0x3186a4=>{const _0x354c23=_0x4fbf70;if(!Imported[_0x354c23(0xa83)])return;const _0x31b4ec=SceneManager['_scene']['_spriteset'];if(!_0x31b4ec)return;if(VisuMZ[_0x354c23(0x726)][_0x354c23(0x1a8)]<=1.05){alert(_0x354c23(0x19f)),SceneManager['exit']();return;}VisuMZ[_0x354c23(0x334)](_0x3186a4,_0x3186a4);const _0x319bbf=VisuMZ[_0x354c23(0x938)](_0x3186a4[_0x354c23(0x2c9)]),_0x39a26d={'filename':_0x3186a4[_0x354c23(0x62a)],'horzCells':_0x3186a4['horzCells']||0x1,'vertCells':_0x3186a4[_0x354c23(0xbca)]||0x1,'frameDelay':_0x3186a4[_0x354c23(0x3cd)]||0x1,'smooth':_0x3186a4[_0x354c23(0x3a9)]||![],'anchorX':_0x3186a4[_0x354c23(0xc8b)]||0x0,'anchorY':_0x3186a4[_0x354c23(0x2b0)]||0x0,'offsetX':_0x3186a4[_0x354c23(0x32e)]||0x0,'offsetY':_0x3186a4[_0x354c23(0x36c)]||0x0};for(const _0x10b15b of _0x319bbf){if(!_0x10b15b)continue;if(!_0x10b15b[_0x354c23(0xb81)]())continue;_0x10b15b[_0x354c23(0xb81)]()[_0x354c23(0x275)](_0x39a26d);}const _0x587b7e=$gameTemp['getLastPluginCommandInterpreter']();if(_0x587b7e){if(_0x354c23(0x9f4)===_0x354c23(0x9f4))_0x587b7e[_0x354c23(0x645)]('battleInjectPrep');else{if(this['_actions'][_0x354c23(0xbb8)](_0x20538e=>_0x20538e['item']()&&_0x20538e['isMagicSkill']()))return!![];}}}),PluginManager['registerCommand'](pluginData[_0x4fbf70(0x27a)],'ActSeq_Inject_AnimationEnd',_0x33e8ce=>{const _0x2ac726=_0x4fbf70;if(!Imported[_0x2ac726(0xa83)])return;const _0x452890=SceneManager[_0x2ac726(0x32c)]['_spriteset'];if(!_0x452890)return;if(VisuMZ[_0x2ac726(0x726)]['version']<=1.05){alert(_0x2ac726(0x19f)),SceneManager['exit']();return;}VisuMZ[_0x2ac726(0x334)](_0x33e8ce,_0x33e8ce);const _0x5807e8=VisuMZ[_0x2ac726(0x938)](_0x33e8ce[_0x2ac726(0x2c9)]);for(const _0xf30b34 of _0x5807e8){if(_0x2ac726(0x46f)==='CvNIE'){if(!_0xf30b34)continue;if(!_0xf30b34[_0x2ac726(0xb81)]())continue;_0xf30b34[_0x2ac726(0xb81)]()[_0x2ac726(0xb64)]();}else this['push'](_0x2ac726(0x781),_0x50f068);}}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x493),_0x49d9e2=>{const _0xdb35b2=_0x4fbf70;if(!Imported[_0xdb35b2(0xa83)])return;const _0x4f1d56=SceneManager[_0xdb35b2(0x32c)][_0xdb35b2(0x7cf)];if(!_0x4f1d56)return;if(VisuMZ[_0xdb35b2(0x726)][_0xdb35b2(0x1a8)]<=1.05){if(_0xdb35b2(0x937)!==_0xdb35b2(0x937))this[_0xdb35b2(0x3aa)](_0x3df445,'tp',_0x159be7+(_0x3ef2d7[_0xdb35b2(0x2c6)]||0x0),_0x4b71a8+this[_0xdb35b2(0x429)]()*0x2+(_0x1f1720[_0xdb35b2(0xc63)]||0x0));else{alert(_0xdb35b2(0x19f)),SceneManager[_0xdb35b2(0x4c5)]();return;}}VisuMZ[_0xdb35b2(0x334)](_0x49d9e2,_0x49d9e2);const _0x43dd7f=VisuMZ[_0xdb35b2(0x938)](_0x49d9e2['Targets']),_0x2c2818=_0x49d9e2['pause'];for(const _0x466376 of _0x43dd7f){if(!_0x466376)continue;if(!_0x466376[_0xdb35b2(0xb81)]())continue;_0x466376[_0xdb35b2(0xb81)]()[_0xdb35b2(0xd81)](_0x2c2818);}}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],'ActSeq_Inject_WaitForInjectAni',_0x4ca8ad=>{const _0x53a16b=_0x4fbf70;if(!SceneManager[_0x53a16b(0x90d)]())return;const _0x5747d5=$gameTemp[_0x53a16b(0xc52)]();if(!_0x5747d5)return;_0x5747d5[_0x53a16b(0x645)](_0x53a16b(0x697));}),PluginManager[_0x4fbf70(0xb86)](pluginData['name'],_0x4fbf70(0x27e),_0x3ea25e=>{const _0x18d14b=_0x4fbf70;if(!SceneManager[_0x18d14b(0x90d)]())return;VisuMZ[_0x18d14b(0x334)](_0x3ea25e,_0x3ea25e);const _0x3bd945=$gameTemp[_0x18d14b(0xc52)](),_0x5e2bb7=BattleManager['_action'],_0x349cf8=BattleManager['_subject'],_0x250422=BattleManager[_0x18d14b(0x2e0)];if(!_0x3bd945||!_0x5e2bb7||!_0x349cf8)return;if(!_0x5e2bb7['item']())return;const _0x49fa3d=VisuMZ[_0x18d14b(0x938)](_0x3ea25e[_0x18d14b(0x2c9)]);for(const _0x4ae114 of _0x49fa3d){if(!_0x4ae114)continue;_0x250422[_0x18d14b(0x25b)]('actionEffect',_0x349cf8,_0x4ae114);}_0x3bd945[_0x18d14b(0x645)]('battlelog');}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x85a),_0x19afae=>{const _0x568cb4=_0x4fbf70;if(!SceneManager[_0x568cb4(0x90d)]())return;if(!Imported['VisuMZ_3_ActiveChainSkills'])return;$gameTemp[_0x568cb4(0x47f)]=!![];}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0xbf7),_0x221c41=>{const _0x188722=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x221c41,_0x221c41);const _0x1c13bd=[_0x188722(0x932),_0x188722(0x277),_0x188722(0xa3b),_0x188722(0x1e6),_0x188722(0xc99),_0x188722(0x34e),'AGI','LUK'],_0xcc9321=_0x221c41[_0x188722(0xd76)],_0x342724=_0x221c41[_0x188722(0x23b)],_0x37b2c8=_0x221c41[_0x188722(0x862)],_0x565bb0=VisuMZ[_0x188722(0x938)](_0x221c41[_0x188722(0x2c9)]);for(const _0x36890a of _0x565bb0){if(!_0x36890a)continue;for(const _0x59e5d9 of _0xcc9321){if(_0x188722(0xd0b)==='GZKfO'){const _0x230ede=_0x1c13bd[_0x188722(0xd48)](_0x59e5d9[_0x188722(0x7a4)]()[_0x188722(0xcda)]());_0x230ede>=0x0&&_0x230ede<=0x7&&_0x36890a[_0x188722(0x5a2)](_0x230ede,_0x37b2c8);}else{const _0xd7115=this['itemLineRect'](_0x2664ef),_0x3147fa=this[_0x188722(0x69d)](_0x23c303)[_0x188722(0x606)];return _0x3147fa<=_0xd7115[_0x188722(0x606)]?_0x188722(0x360):_0x188722(0x587);}}for(const _0x3116a9 of _0x342724){const _0x49d827=_0x1c13bd[_0x188722(0xd48)](_0x3116a9[_0x188722(0x7a4)]()[_0x188722(0xcda)]());_0x49d827>=0x0&&_0x49d827<=0x7&&(_0x188722(0x255)==='IYBBy'?this[_0x188722(0x6ed)]=!![]:_0x36890a[_0x188722(0xd5e)](_0x49d827,_0x37b2c8));}}}),PluginManager[_0x4fbf70(0xb86)](pluginData['name'],_0x4fbf70(0x709),_0x1c0094=>{const _0x4e0ab6=_0x4fbf70;if(!SceneManager[_0x4e0ab6(0x90d)]())return;VisuMZ[_0x4e0ab6(0x334)](_0x1c0094,_0x1c0094);const _0x35d4f9=_0x1c0094[_0x4e0ab6(0x5f6)],_0x5b5920=VisuMZ['CreateActionSequenceTargets'](_0x1c0094[_0x4e0ab6(0x2c9)]);for(const _0x2f98fb of _0x5b5920){if(!_0x2f98fb)continue;for(const _0x25b27e of _0x35d4f9){_0x2f98fb['addState'](_0x25b27e);}}}),PluginManager['registerCommand'](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x567),_0x39494f=>{const _0x61dd13=_0x4fbf70;if(!SceneManager[_0x61dd13(0x90d)]())return;VisuMZ[_0x61dd13(0x334)](_0x39494f,_0x39494f);const _0x292f2d=BattleManager[_0x61dd13(0xb15)],_0x47cd91={'arPenRate':_0x39494f[_0x61dd13(0x7d5)],'arPenFlat':_0x39494f[_0x61dd13(0x476)],'arRedRate':_0x39494f['ArRedRate'],'arRedFlat':_0x39494f[_0x61dd13(0x4f9)]};_0x292f2d[_0x61dd13(0x5af)]=_0x47cd91;}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x7e0),_0x206bfa=>{const _0x51b421=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x51b421(0x8b3)])return;VisuMZ[_0x51b421(0x334)](_0x206bfa,_0x206bfa);const _0x451e68=VisuMZ['CreateActionSequenceTargets'](_0x206bfa['Targets']),_0x581302=_0x206bfa['Reveal']||0x1;for(const _0xe35509 of _0x451e68){if(!_0xe35509)continue;if(!_0xe35509['isEnemy']())continue;_0xe35509[_0x51b421(0x59b)](_0x581302);}}),PluginManager[_0x4fbf70(0xb86)](pluginData['name'],'ActSeq_Mechanics_AtbGauge',_0x2a6acb=>{const _0x3b779b=_0x4fbf70;if(!SceneManager[_0x3b779b(0x90d)]())return;if(!Imported[_0x3b779b(0xb91)])return;if(!BattleManager[_0x3b779b(0x833)]())return;VisuMZ[_0x3b779b(0x334)](_0x2a6acb,_0x2a6acb);const _0x46cce1=VisuMZ[_0x3b779b(0x938)](_0x2a6acb['Targets']),_0x2cf255=_0x2a6acb[_0x3b779b(0x7c3)],_0x31196e=_0x2a6acb[_0x3b779b(0x7c3)],_0x1428e8=_0x2a6acb[_0x3b779b(0x1da)];for(const _0x26001b of _0x46cce1){if(!_0x26001b)continue;if(_0x26001b[_0x3b779b(0x40d)]())_0x26001b['changeAtbChargeTime'](_0x2cf255);else{if(_0x26001b[_0x3b779b(0xcce)]()){_0x26001b[_0x3b779b(0x59c)](_0x31196e);if(_0x1428e8)_0x26001b[_0x3b779b(0xc56)]();}}}}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],'ActSeq_Mechanics_BoostPointsChange',_0x21e2d6=>{const _0x1c35c9=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_BoostAction'])return;VisuMZ['ConvertParams'](_0x21e2d6,_0x21e2d6);const _0x8726f8=VisuMZ['CreateActionSequenceTargets'](_0x21e2d6[_0x1c35c9(0x2c9)]),_0x2c5eca=_0x21e2d6[_0x1c35c9(0x2dd)];for(const _0x5d6847 of _0x8726f8){if(!_0x5d6847)continue;_0x5d6847[_0x1c35c9(0x1d4)](_0x2c5eca);}}),PluginManager['registerCommand'](pluginData[_0x4fbf70(0x27a)],'ActSeq_Mechanics_BoostPointsStoreData',_0x15c97c=>{const _0x7b7d13=_0x4fbf70;if(!SceneManager[_0x7b7d13(0x90d)]())return;if(!Imported[_0x7b7d13(0xaf5)])return;if(!BattleManager[_0x7b7d13(0xb38)])return;VisuMZ[_0x7b7d13(0x334)](_0x15c97c,_0x15c97c);const _0x39ba96=_0x15c97c['VariableID'];$gameVariables[_0x7b7d13(0x988)](_0x39ba96,BattleManager[_0x7b7d13(0xb38)][_0x7b7d13(0x437)]());}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0xb76),_0x1c7e00=>{const _0x2895b8=_0x4fbf70;if(!SceneManager[_0x2895b8(0x90d)]())return;if(!Imported[_0x2895b8(0x4e6)])return;VisuMZ[_0x2895b8(0x334)](_0x1c7e00,_0x1c7e00);const _0x235628=VisuMZ[_0x2895b8(0x938)](_0x1c7e00[_0x2895b8(0x2c9)]),_0xf22341=_0x1c7e00[_0x2895b8(0xd10)];for(const _0x30fa05 of _0x235628){if(!_0x30fa05)continue;if(_0x30fa05[_0x2895b8(0xd6e)]())continue;if(!_0x30fa05[_0x2895b8(0x5e2)]())continue;_0x30fa05['alterBreakShield'](_0xf22341);}}),PluginManager['registerCommand'](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x526),_0x39c833=>{const _0x73b1e7=_0x4fbf70;if(!SceneManager[_0x73b1e7(0x90d)]())return;if(!Imported[_0x73b1e7(0x4e6)])return;VisuMZ[_0x73b1e7(0x334)](_0x39c833,_0x39c833);const _0xc40f82=VisuMZ[_0x73b1e7(0x938)](_0x39c833['Targets']);for(const _0x569f06 of _0xc40f82){if(!_0x569f06)continue;if(_0x569f06['isBreakStunned']())continue;if(!_0x569f06[_0x73b1e7(0x5e2)]())continue;_0x569f06[_0x73b1e7(0x4df)]();}}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],'ActSeq_Mechanics_BtbGain',_0x340048=>{const _0x19c5b2=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemBTB'])return;if(!BattleManager[_0x19c5b2(0x508)]())return;VisuMZ['ConvertParams'](_0x340048,_0x340048);const _0x250c16=VisuMZ['CreateActionSequenceTargets'](_0x340048['Targets']),_0x56109a=_0x340048['BravePoints'];for(const _0x15cd0b of _0x250c16){if(_0x19c5b2(0x1d1)===_0x19c5b2(0x1d1)){if(!_0x15cd0b)continue;_0x15cd0b[_0x19c5b2(0x85d)](_0x56109a);}else return _0x19c5b2(0xcc3)[_0x19c5b2(0x946)](_0x3135dc(_0x57194b['$1']));}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Mechanics_Collapse',_0xe9b0af=>{const _0x4df0d8=_0x4fbf70;if(!SceneManager[_0x4df0d8(0x90d)]())return;VisuMZ[_0x4df0d8(0x334)](_0xe9b0af,_0xe9b0af);const _0x289347=$gameTemp['getLastPluginCommandInterpreter'](),_0x535669=BattleManager['_action'],_0x196d82=BattleManager[_0x4df0d8(0xb38)];if(!_0x289347||!_0x535669||!_0x196d82)return;if(!_0x535669[_0x4df0d8(0x98d)]())return;const _0x7639df=VisuMZ['CreateActionSequenceTargets'](_0xe9b0af[_0x4df0d8(0x2c9)]);for(const _0x23793c of _0x7639df){if(!_0x23793c)continue;if(_0xe9b0af[_0x4df0d8(0xbc7)]){if('QGtqm'===_0x4df0d8(0xa75)){if(this[_0x4df0d8(0x98d)]()[_0x4df0d8(0x9c1)][_0x4df0d8(0xc4b)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x27282a=_0x29f0e3(_0x32a705['$1'])[_0x4df0d8(0x7a4)]()[_0x4df0d8(0xcda)]();return _0x27282a;}return'MANUAL';}else _0x23793c[_0x4df0d8(0x8e4)](),_0x23793c[_0x4df0d8(0xc19)](_0x23793c[_0x4df0d8(0xc8a)]());}_0x23793c[_0x4df0d8(0x664)]()&&('lwyEp'==='lwyEp'?_0x23793c[_0x4df0d8(0xc2a)]():(_0x14d0d6=_0x3f9b72(_0x2dc893['$1']),_0x4be567=_0x215da0(_0x211fb8['$2'])));}_0x289347[_0x4df0d8(0x645)]('battleEffect');}),PluginManager['registerCommand'](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0xbe1),_0x490a8b=>{const _0x514ee3=_0x4fbf70;if(!SceneManager[_0x514ee3(0x90d)]())return;if(!Imported[_0x514ee3(0x326)])return;if(!BattleManager[_0x514ee3(0xd43)]())return;VisuMZ[_0x514ee3(0x334)](_0x490a8b,_0x490a8b);const _0x44825b=VisuMZ['CreateActionSequenceTargets'](_0x490a8b[_0x514ee3(0x2c9)]),_0xbfa2c4=_0x490a8b[_0x514ee3(0x957)];for(const _0x499dc3 of _0x44825b){if(!_0x499dc3)continue;_0x499dc3['changeTurnOrderByCTB'](_0xbfa2c4);}}),PluginManager['registerCommand'](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x294),_0xddd972=>{const _0x1c0812=_0x4fbf70;if(!SceneManager[_0x1c0812(0x90d)]())return;if(!Imported[_0x1c0812(0x326)])return;if(!BattleManager[_0x1c0812(0xd43)]())return;VisuMZ[_0x1c0812(0x334)](_0xddd972,_0xddd972);const _0x190a1d=VisuMZ['CreateActionSequenceTargets'](_0xddd972[_0x1c0812(0x2c9)]),_0x49d9c9=_0xddd972[_0x1c0812(0x7c3)],_0x37a04d=_0xddd972[_0x1c0812(0x7c3)];for(const _0x34f10b of _0x190a1d){if(_0x1c0812(0x9ef)!==_0x1c0812(0xd04)){if(!_0x34f10b)continue;if(_0x34f10b[_0x1c0812(0xcb8)]==='charging')_0x1c0812(0x6a2)!==_0x1c0812(0x453)?_0x34f10b[_0x1c0812(0x74f)](_0x49d9c9):(_0x528de6['BattleCore'][_0x1c0812(0x595)]&&_0x3642db[_0x1c0812(0xae2)][_0x1c0812(0x595)][_0x1c0812(0xc4a)](this,_0x2ee547),_0x5c3e01[_0x1c0812(0xae2)][_0x1c0812(0x981)](_0x5ecda4));else _0x34f10b[_0x1c0812(0xcb8)]===_0x1c0812(0x970)&&_0x34f10b['changeCtbCastTime'](_0x37a04d);}else this[_0x1c0812(0x6ee)]('PreApply%1JS',_0x1a65a5,0x0,!![]),_0x4a477e[_0x1c0812(0xae2)]['Game_Action_apply']['call'](this,_0x39ea9e),this[_0x1c0812(0x6ee)](_0x1c0812(0x8d2),_0x5e4e16,this['_executedValue']||0x0,!![]),this[_0x1c0812(0x87c)](_0x320e8d);}}),PluginManager[_0x4fbf70(0xb86)](pluginData['name'],_0x4fbf70(0xd13),_0x2d73eb=>{const _0x2b2de8=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x2d73eb,_0x2d73eb);const _0x32c55f=BattleManager['_action'];if(!_0x32c55f)return;let _0x3235fc=_0x2d73eb['Formula'];_0x32c55f[_0x2b2de8(0x65e)](_0x3235fc);}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x2df),_0xf6df39=>{const _0x3226ae=_0x4fbf70;if(!SceneManager[_0x3226ae(0x90d)]())return;VisuMZ[_0x3226ae(0x334)](_0xf6df39,_0xf6df39);const _0x400097=VisuMZ['CreateActionSequenceTargets'](_0xf6df39[_0x3226ae(0x2c9)]);for(const _0x84a0ea of _0x400097){if(!_0x84a0ea)continue;if(_0x84a0ea[_0x3226ae(0xb77)]())_0x84a0ea['startDamagePopup']();}}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0xc93),_0xeda8cc=>{const _0x5b8d9a=_0x4fbf70;if(!SceneManager[_0x5b8d9a(0x90d)]())return;VisuMZ[_0x5b8d9a(0x334)](_0xeda8cc,_0xeda8cc);const _0x1cceb8=$gameTemp[_0x5b8d9a(0xc52)](),_0x3cccec=BattleManager[_0x5b8d9a(0xb38)],_0x5de482=_0xeda8cc[_0x5b8d9a(0xaa9)];if(!_0x1cceb8)return;if(!_0x3cccec)return;_0x3cccec&&_0x3cccec[_0x5b8d9a(0x521)]()&&_0x5de482[_0x5b8d9a(0x7a4)]()[_0x5b8d9a(0xcda)]()!==_0x5b8d9a(0x710)&&_0x1cceb8['command119']([_0x5de482]);}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0xb35),_0x2bfa22=>{const _0x97a373=_0x4fbf70;if(!SceneManager[_0x97a373(0x90d)]())return;VisuMZ[_0x97a373(0x334)](_0x2bfa22,_0x2bfa22);const _0x3afac7=VisuMZ[_0x97a373(0x938)](_0x2bfa22[_0x97a373(0x2c9)]);for(const _0x23bd1a of _0x3afac7){if(_0x97a373(0xc13)===_0x97a373(0x229))this[_0x97a373(0x3e4)]=_0x97a373(0x6bd);else{if(!_0x23bd1a)continue;if(!_0x23bd1a['isEnemy']())continue;_0x23bd1a[_0x97a373(0x6db)]();}}}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x6ca),_0x35be0b=>{const _0x31f5d0=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x31f5d0(0xb67)])return;if(!BattleManager[_0x31f5d0(0x967)]())return;VisuMZ[_0x31f5d0(0x334)](_0x35be0b,_0x35be0b);const _0x4ca5d3=_0x35be0b[_0x31f5d0(0x4b5)];BattleManager[_0x31f5d0(0xb38)]&&(_0x31f5d0(0x858)==='FtSMm'?_0x44bc29[_0x31f5d0(0x92c)][_0x31f5d0(0x221)][_0x31f5d0(0xc4a)](this):BattleManager[_0x31f5d0(0xb38)]['friendsUnit']()[_0x31f5d0(0xb07)](_0x4ca5d3));}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x289),_0x514382=>{const _0x52dd22=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemFTB'])return;if(!BattleManager[_0x52dd22(0x933)]())return;VisuMZ[_0x52dd22(0x334)](_0x514382,_0x514382);const _0x472117=_0x514382['ActionCount'];BattleManager['_subject']&&(_0x52dd22(0xb27)===_0x52dd22(0x8c2)?_0x4537e5+=_0x3c9af6[_0x52dd22(0xa8e)]:BattleManager['_subject']['friendsUnit']()[_0x52dd22(0x707)](_0x472117));}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],'ActSeq_Mechanics_HpMpTp',_0x39827f=>{const _0x58476b=_0x4fbf70;if(!SceneManager[_0x58476b(0x90d)]())return;VisuMZ['ConvertParams'](_0x39827f,_0x39827f);const _0x52b693=VisuMZ['CreateActionSequenceTargets'](_0x39827f[_0x58476b(0x2c9)]),_0x1fe9e7=_0x39827f[_0x58476b(0x9be)],_0x534e52=_0x39827f[_0x58476b(0xcfd)],_0x11a31a=_0x39827f['MP_Rate'],_0x29e7bf=_0x39827f[_0x58476b(0x8b8)],_0x5bc309=_0x39827f[_0x58476b(0x640)],_0x829ca2=_0x39827f[_0x58476b(0x270)],_0x537ed5=_0x39827f[_0x58476b(0xd0a)];for(const _0xe468d6 of _0x52b693){if(!_0xe468d6)continue;const _0x4c48ba=_0xe468d6[_0x58476b(0x4e4)](),_0x44c4cd=Math[_0x58476b(0xbec)](_0x1fe9e7*_0xe468d6[_0x58476b(0x273)]+_0x534e52),_0x3ab61f=Math[_0x58476b(0xbec)](_0x11a31a*_0xe468d6['mmp']+_0x29e7bf),_0x3cf11f=Math[_0x58476b(0xbec)](_0x5bc309*_0xe468d6[_0x58476b(0x49b)]()+_0x829ca2);if(_0x44c4cd!==0x0)_0xe468d6['gainHp'](_0x44c4cd);if(_0x3ab61f!==0x0)_0xe468d6[_0x58476b(0x43a)](_0x3ab61f);if(_0x3cf11f!==0x0)_0xe468d6[_0x58476b(0x4b9)](_0x3cf11f);if(_0x537ed5)_0xe468d6['startDamagePopup']();_0x4c48ba&&_0xe468d6[_0x58476b(0x521)]()&&_0xe468d6[_0x58476b(0xc2a)]();}}),PluginManager['registerCommand'](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x99f),_0x58bf70=>{const _0x1580d6=_0x4fbf70;if(!SceneManager[_0x1580d6(0x90d)]())return;VisuMZ['ConvertParams'](_0x58bf70,_0x58bf70);const _0x589235=VisuMZ[_0x1580d6(0x938)](_0x58bf70[_0x1580d6(0x2c9)]);for(const _0x48f11c of _0x589235){if(!_0x48f11c)continue;_0x48f11c[_0x1580d6(0x99e)](_0x58bf70[_0x1580d6(0x7f1)]);}}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x78f),_0x522ec4=>{const _0xd41d42=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x522ec4,_0x522ec4);const _0x3f12aa=BattleManager['_action'],_0x57b51a={'criticalHitRate':_0x522ec4[_0xd41d42(0xbed)],'criticalHitFlat':_0x522ec4['CriticalHitFlat'],'criticalDmgRate':_0x522ec4['CriticalDmgRate'],'criticalDmgFlat':_0x522ec4[_0xd41d42(0xc3e)],'damageRate':_0x522ec4[_0xd41d42(0x211)],'damageFlat':_0x522ec4[_0xd41d42(0x274)],'hitRate':_0x522ec4['HitRate'],'hitFlat':_0x522ec4[_0xd41d42(0x9a5)]};_0x3f12aa['_multipliers']=_0x57b51a;}),PluginManager[_0x4fbf70(0xb86)](pluginData['name'],_0x4fbf70(0x8ec),_0x26c517=>{const _0x3a344b=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3a344b(0x334)](_0x26c517,_0x26c517);const _0x5d5749=_0x26c517[_0x3a344b(0xbf2)];SceneManager[_0x3a344b(0x32c)][_0x3a344b(0x5f5)](_0x5d5749);}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0xb5e),_0x2f6203=>{const _0x46cf4e=_0x4fbf70;if(!SceneManager[_0x46cf4e(0x90d)]())return;if(!Imported[_0x46cf4e(0x7da)])return;if(!BattleManager[_0x46cf4e(0x7b6)]())return;VisuMZ[_0x46cf4e(0x334)](_0x2f6203,_0x2f6203);const _0x5395a3=VisuMZ[_0x46cf4e(0x938)](_0x2f6203[_0x46cf4e(0x2c9)]);for(const _0x4ecda9 of _0x5395a3){if(!_0x4ecda9)continue;let _0xb56dfa=_0x2f6203[_0x46cf4e(0x599)],_0x11ae0a=_0x2f6203[_0x46cf4e(0x8de)],_0xe5c1d5=_0x2f6203[_0x46cf4e(0x96a)];if(BattleManager[_0x46cf4e(0xbac)][_0x46cf4e(0x6e3)](_0x4ecda9))_0xb56dfa+=_0xe5c1d5;else{if(_0x46cf4e(0x26d)!==_0x46cf4e(0x626))_0x11ae0a+=_0xe5c1d5;else return!![];}BattleManager['turnOrderChangeOTB'](_0x4ecda9,-_0xb56dfa,![]),BattleManager[_0x46cf4e(0x1b9)](_0x4ecda9,-_0x11ae0a,!![]);}}),PluginManager['registerCommand'](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x345),_0x2c3913=>{const _0x4bd9a3=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4bd9a3(0xa62)])return;if(!BattleManager[_0x4bd9a3(0x52b)]())return;VisuMZ[_0x4bd9a3(0x334)](_0x2c3913,_0x2c3913);const _0x13c31d=BattleManager[_0x4bd9a3(0xb38)]['friendsUnit'](),_0x2fb7d5=_0x2c3913[_0x4bd9a3(0x3e8)],_0x58ef7a=_0x2c3913[_0x4bd9a3(0x280)]||_0x4bd9a3(0x2b6),_0x2368be=_0x2c3913[_0x4bd9a3(0x93b)]||_0x4bd9a3(0x2b6),_0x3e5083=_0x2c3913[_0x4bd9a3(0x283)]||0x0,_0x20422e=_0x2c3913[_0x4bd9a3(0xd0e)]||0x0;if(_0x13c31d[_0x4bd9a3(0x6dc)]()||_0x2fb7d5){if(_0x4bd9a3(0xb61)!==_0x4bd9a3(0xb61))_0x3bea52[_0x4bd9a3(0xae2)]['Window_PartyCommand_initialize']['call'](this,_0x439145),this[_0x4bd9a3(0x72e)](_0x31ebb3);else{if(_0x2fb7d5){if(_0x4bd9a3(0x8e9)===_0x4bd9a3(0xa92)){const _0x513169=this[_0x4bd9a3(0x604)][_0x4bd9a3(0x46b)][_0x4bd9a3(0xbdf)](new _0x4ab9bf(0x0,0x0)),_0x5af4f3=this[_0x4bd9a3(0x604)][_0x4bd9a3(0xca2)];_0x5af4f3['x']=_0x513169['x']+this['origin']['x'],_0x5af4f3['y']=_0x513169['y']+this[_0x4bd9a3(0xc24)]['y'],_0x5af4f3['width']=this['innerWidth'],_0x5af4f3[_0x4bd9a3(0x389)]=this[_0x4bd9a3(0xc35)];}else _0x13c31d[_0x4bd9a3(0xcf3)]=_0x13c31d[_0x4bd9a3(0xcf3)]||{},_0x13c31d['_ptbActionCost'][_0x4bd9a3(0x8bd)]=0x0;}_0x13c31d[_0x4bd9a3(0xaca)](_0x58ef7a,_0x2368be,_0x3e5083,_0x20422e);}}}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x3b7),_0x5bd589=>{const _0x29b415=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x29b415(0x52b)]())return;VisuMZ['ConvertParams'](_0x5bd589,_0x5bd589);const _0x1195ad=BattleManager[_0x29b415(0xb38)]['friendsUnit']();let _0x372489=Math[_0x29b415(0x6f0)](_0x5bd589['ConvertCount'],0x0),_0x54a146=_0x1195ad[_0x29b415(0x261)](),_0x363a63=_0x1195ad[_0x29b415(0x341)]();while(_0x372489--){if(_0x29b415(0x9e2)===_0x29b415(0x9e2)){if(_0x54a146<=0x0&&_0x363a63<=0x0){if(_0x29b415(0x2e4)!==_0x29b415(0x254))break;else this[_0x29b415(0x645)](_0x29b415(0x3d6));}else{if(_0x54a146>0x0){if(_0x29b415(0x92e)==='MsFDB')_0x54a146--,_0x363a63++;else{if(!_0x3537ea['isSceneBattle']())return!![];const _0xdf2f76=[_0x29b415(0x70b),_0x29b415(0x3e2)];return _0xdf2f76[_0x29b415(0x6e3)](_0x1162e2[_0x29b415(0x27a)]);}}else _0x363a63--;}}else this[_0x29b415(0xba4)][_0x29b415(0x4ad)](_0x194770,0x0,_0x1a34ff);}_0x1195ad['setFullActionsPTB'](_0x54a146),_0x1195ad['setHalfActionsPTB'](_0x363a63);}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x826),_0x27dc76=>{const _0x5d6d00=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5d6d00(0xa62)])return;if(!BattleManager[_0x5d6d00(0x52b)]())return;VisuMZ[_0x5d6d00(0x334)](_0x27dc76,_0x27dc76);const _0x21b711=BattleManager[_0x5d6d00(0xb38)][_0x5d6d00(0x4e8)]();let _0x4e568d=_0x27dc76[_0x5d6d00(0x228)],_0x58f187=_0x27dc76[_0x5d6d00(0x1bb)];_0x21b711['gainFullActionsPTB'](_0x4e568d),_0x21b711[_0x5d6d00(0x366)](_0x58f187);}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],'ActSeq_Mechanics_RemoveBuffDebuff',_0x1e9420=>{const _0x489896=_0x4fbf70;if(!SceneManager[_0x489896(0x90d)]())return;VisuMZ[_0x489896(0x334)](_0x1e9420,_0x1e9420);const _0x4c4c40=[_0x489896(0x932),_0x489896(0x277),_0x489896(0xa3b),_0x489896(0x1e6),'MAT',_0x489896(0x34e),_0x489896(0x99d),'LUK'],_0x39db98=_0x1e9420[_0x489896(0xd76)],_0x263146=_0x1e9420[_0x489896(0x23b)],_0x349a1f=VisuMZ[_0x489896(0x938)](_0x1e9420['Targets']);for(const _0x57b83a of _0x349a1f){if(!_0x57b83a)continue;for(const _0x45a264 of _0x39db98){if('WaBdZ'!=='WaBdZ')return _0x49fa63[_0x489896(0x97e)];else{const _0x41c9dd=_0x4c4c40[_0x489896(0xd48)](_0x45a264[_0x489896(0x7a4)]()[_0x489896(0xcda)]());if(_0x41c9dd>=0x0&&_0x41c9dd<=0x7&&_0x57b83a[_0x489896(0x9e7)](_0x41c9dd)){if(_0x489896(0xd7f)===_0x489896(0xd7f))_0x57b83a[_0x489896(0xd7b)](_0x41c9dd);else{_0x4c23d4=_0xc9b4db[_0x1638fb][_0x489896(0xc4a)](this,_0x3f9673,_0x1aca32);if(_0x5501f5)_0x49b6b0=_0x232623;}}}}for(const _0x3cd4e5 of _0x263146){if(_0x489896(0xc41)===_0x489896(0x418)){const _0x20ceb=_0x1d8829[_0x489896(0x32c)][_0x489896(0x9e4)];_0x20ceb&&_0x20ceb['refreshActorPortrait'](this);}else{const _0x3c05b7=_0x4c4c40[_0x489896(0xd48)](_0x3cd4e5[_0x489896(0x7a4)]()['trim']());_0x3c05b7>=0x0&&_0x3c05b7<=0x7&&_0x57b83a[_0x489896(0xce6)](_0x3c05b7)&&_0x57b83a[_0x489896(0xd7b)](_0x3c05b7);}}}}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x336),_0x54cb1b=>{const _0x1ca6c3=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1ca6c3(0x334)](_0x54cb1b,_0x54cb1b);const _0x54acd2=_0x54cb1b['States'],_0xdf4aeb=VisuMZ[_0x1ca6c3(0x938)](_0x54cb1b[_0x1ca6c3(0x2c9)]);for(const _0x8d6d1a of _0xdf4aeb){if(!_0x8d6d1a)continue;for(const _0x54eef6 of _0x54acd2){_0x8d6d1a['removeState'](_0x54eef6);}}}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],'ActSeq_Mechanics_StbExploit',_0x5cf923=>{const _0x53bfd1=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x53bfd1(0x9b9)])return;if(!BattleManager[_0x53bfd1(0x5b6)]())return;VisuMZ[_0x53bfd1(0x334)](_0x5cf923,_0x5cf923);const _0x31df86=_0x5cf923[_0x53bfd1(0xa27)],_0x272c13=VisuMZ[_0x53bfd1(0x938)](_0x5cf923[_0x53bfd1(0x2c9)]),_0xea4f83=_0x5cf923[_0x53bfd1(0x8c1)],_0x458c4f=_0x5cf923[_0x53bfd1(0x9f6)],_0x9ba231=_0x5cf923['ForceExploiter'],_0xf54c1a=BattleManager[_0x53bfd1(0xb15)];if(_0x31df86)for(const _0x5e315f of _0x272c13){if(!_0x5e315f)continue;if(_0x5e315f===user)continue;if(_0xea4f83)_0x5e315f[_0x53bfd1(0x87f)](![]);_0x5e315f[_0x53bfd1(0x808)](BattleManager['_subject'],_0xf54c1a);}if(_0x458c4f&&BattleManager[_0x53bfd1(0xb38)]){if(_0x53bfd1(0xa74)!==_0x53bfd1(0xa74)){if(this[_0x53bfd1(0x349)]===_0x53bfd1(0xc76))return![];if(this[_0x53bfd1(0x349)]==='all\x20enemies')return!![];return this[_0x53bfd1(0x3f8)]()&&!this[_0x53bfd1(0x650)]()?this[_0x53bfd1(0xc97)]():_0x48b18e[_0x53bfd1(0xae2)][_0x53bfd1(0x84c)][_0x53bfd1(0xc4a)](this);}else{if(_0x9ba231)BattleManager[_0x53bfd1(0xb38)][_0x53bfd1(0x87f)](![]);const _0xcd8a92=_0x272c13[0x0];BattleManager['performSTBExploiter'](_0xcd8a92,_0xf54c1a);}}}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x46a),_0x4a90a8=>{const _0x13f2d1=_0x4fbf70;if(!SceneManager[_0x13f2d1(0x90d)]())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager[_0x13f2d1(0x5b6)]())return;VisuMZ[_0x13f2d1(0x334)](_0x4a90a8,_0x4a90a8);const _0x23d659=_0x4a90a8['Actions'];BattleManager[_0x13f2d1(0xb38)]&&BattleManager[_0x13f2d1(0xb38)]['stbGainInstant'](_0x23d659);}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],'ActSeq_Mechanics_StbRemoveExcessActions',_0x4c399b=>{const _0x2ebef7=_0x4fbf70;if(!SceneManager[_0x2ebef7(0x90d)]())return;if(!Imported[_0x2ebef7(0x9b9)])return;if(!BattleManager['isSTB']())return;VisuMZ[_0x2ebef7(0x334)](_0x4c399b,_0x4c399b);let _0x15f5c1=_0x4c399b[_0x2ebef7(0x867)];if(BattleManager[_0x2ebef7(0xb38)]){BattleManager[_0x2ebef7(0xb38)][_0x2ebef7(0xaee)]=BattleManager[_0x2ebef7(0xb38)]['_actions']||[];while(_0x15f5c1--){if('KrLBx'==='fziFW'){const _0x289bd4=_0x12811f['enemyId'],_0x254bf8=_0x47a966['x'],_0x2b6a84=_0x25ed56['y'],_0x1ef103=new _0x48e6b4(_0x289bd4,_0x254bf8,_0x2b6a84);_0x2e95b7[_0x2ebef7(0x71a)]&&_0x1ef103[_0x2ebef7(0x7aa)](),this[_0x2ebef7(0x1ff)][_0x2ebef7(0x25b)](_0x1ef103);}else{if(BattleManager['_subject'][_0x2ebef7(0xaee)]['length']<=0x0)break;BattleManager[_0x2ebef7(0xb38)]['_actions'][_0x2ebef7(0x5c3)]();}}}}),PluginManager['registerCommand'](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x6d9),_0x147fec=>{const _0x1be732=_0x4fbf70;if(!SceneManager[_0x1be732(0x90d)]())return;if(!Imported[_0x1be732(0xb6c)])return;VisuMZ[_0x1be732(0x334)](_0x147fec,_0x147fec);const _0x4e9b08=VisuMZ[_0x1be732(0x938)](_0x147fec[_0x1be732(0x2c9)]),_0x512ff6=_0x147fec[_0x1be732(0x2a7)];for(const _0x1273d5 of _0x4e9b08){if(!_0x1273d5)continue;if(!_0x1273d5[_0x1be732(0xc9f)]())continue;_0x1273d5[_0x1be732(0xb56)](_0x512ff6);}}),PluginManager[_0x4fbf70(0xb86)](pluginData['name'],'ActSeq_Mechanics_TextPopup',_0x3fe1e9=>{const _0x121294=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x121294(0x334)](_0x3fe1e9,_0x3fe1e9);const _0xdb68c5=VisuMZ[_0x121294(0x938)](_0x3fe1e9['Targets']),_0x428541=_0x3fe1e9[_0x121294(0xcca)],_0x196143={'textColor':ColorManager[_0x121294(0xa73)](_0x3fe1e9[_0x121294(0x8c7)]),'flashColor':_0x3fe1e9[_0x121294(0x7eb)],'flashDuration':_0x3fe1e9[_0x121294(0x51a)]};for(const _0x40f8d9 of _0xdb68c5){if(!_0x40f8d9)continue;_0x40f8d9[_0x121294(0x5e8)](_0x428541,_0x196143);}}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],'ActSeq_Mechanics_VariablePopup',_0x4475ed=>{const _0x831dfb=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x831dfb(0x334)](_0x4475ed,_0x4475ed);const _0x398f03=VisuMZ['CreateActionSequenceTargets'](_0x4475ed[_0x831dfb(0x2c9)]);let _0x3d48f1=$gameVariables['value'](_0x4475ed[_0x831dfb(0xa51)]);Imported[_0x831dfb(0xcaf)]&&_0x4475ed[_0x831dfb(0x895)]&&(_0x3d48f1=VisuMZ[_0x831dfb(0x2f5)](_0x3d48f1));const _0xa5c6fd=String(_0x3d48f1),_0x1c165e={'textColor':ColorManager[_0x831dfb(0xa73)](_0x4475ed[_0x831dfb(0x8c7)]),'flashColor':_0x4475ed[_0x831dfb(0x7eb)],'flashDuration':_0x4475ed[_0x831dfb(0x51a)]};for(const _0x3847f1 of _0x398f03){if('bYrnx'===_0x831dfb(0xba8)){if(!_0x3847f1)continue;_0x3847f1[_0x831dfb(0x5e8)](_0xa5c6fd,_0x1c165e);}else{this[_0x831dfb(0xa06)][_0x831dfb(0xc55)](),this[_0x831dfb(0xd49)][_0x831dfb(0x5f4)]();if(!_0x3ce635[_0x831dfb(0xae2)][_0x831dfb(0xa1e)])return;if(_0x495b31[_0x831dfb(0x326)]&&_0x367850[_0x831dfb(0xd43)]())return;if(_0xd2897d['_currentActor']){_0x40ef2b[_0x831dfb(0x2f7)]['setActionState']('undecided');const _0x453d15=_0x1a9c1e[_0x831dfb(0x2f7)][_0x831dfb(0xb81)]();if(_0x453d15)_0x453d15['stepBack']();}_0x7be431[_0x831dfb(0x2f7)]=null;}}}),PluginManager['registerCommand'](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x743),_0xb6bea8=>{const _0x4702dd=_0x4fbf70;if(!SceneManager[_0x4702dd(0x90d)]())return;const _0x5a3b33=$gameTemp[_0x4702dd(0xc52)]();if(!_0x5a3b33)return;_0x5a3b33[_0x4702dd(0x645)](_0x4702dd(0xc32));}),PluginManager['registerCommand'](pluginData[_0x4fbf70(0x27a)],'ActSeq_Motion_ClearFreezeFrame',_0x541fd9=>{const _0x49ac59=_0x4fbf70;if(!SceneManager[_0x49ac59(0x90d)]())return;VisuMZ[_0x49ac59(0x334)](_0x541fd9,_0x541fd9);const _0xb6d19=VisuMZ[_0x49ac59(0x938)](_0x541fd9[_0x49ac59(0x2c9)]);for(const _0x1a7d4a of _0xb6d19){if(!_0x1a7d4a)continue;_0x1a7d4a[_0x49ac59(0x245)]();}}),PluginManager['registerCommand'](pluginData['name'],_0x4fbf70(0x1f7),_0xd8e2f9=>{const _0x18d1c3=_0x4fbf70;if(!SceneManager[_0x18d1c3(0x90d)]())return;VisuMZ[_0x18d1c3(0x334)](_0xd8e2f9,_0xd8e2f9);const _0x339dc5=VisuMZ['CreateActionSequenceTargets'](_0xd8e2f9['Targets']),_0x1eda65=_0xd8e2f9[_0x18d1c3(0x452)][_0x18d1c3(0x39e)]()['trim']();let _0x3b4ce9=_0xd8e2f9[_0x18d1c3(0xb0e)];const _0x5e645a=_0xd8e2f9[_0x18d1c3(0xaa7)];![_0x18d1c3(0x3f3),'thrust',_0x18d1c3(0x809),_0x18d1c3(0x54d)][_0x18d1c3(0x6e3)](_0x1eda65)&&(_0x3b4ce9=![]);for(const _0x178ca5 of _0x339dc5){if(_0x18d1c3(0x78e)==='FCSoB'){if(!_0x178ca5)continue;_0x178ca5['freezeMotion'](_0x1eda65,_0x3b4ce9,_0x5e645a);}else for(const _0x252f74 of _0x247d3c['members']){if(_0x3b6a32[_0x252f74['enemyId']]){const _0x396bd6=_0x252f74[_0x18d1c3(0x3ea)],_0x4f3765=_0x252f74['x'],_0x3d5a84=_0x252f74['y'],_0x7eb872=new _0x5dcce0(_0x396bd6,_0x4f3765,_0x3d5a84);_0x252f74[_0x18d1c3(0x71a)]&&_0x7eb872[_0x18d1c3(0x7aa)](),this[_0x18d1c3(0x1ff)]['push'](_0x7eb872);}}}}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],'ActSeq_Motion_MotionType',_0x2c5d67=>{const _0x5ab71a=_0x4fbf70;if(!SceneManager[_0x5ab71a(0x90d)]())return;VisuMZ['ConvertParams'](_0x2c5d67,_0x2c5d67);const _0x2729b2=VisuMZ[_0x5ab71a(0x938)](_0x2c5d67[_0x5ab71a(0x2c9)]),_0x1ef7d0=_0x2c5d67[_0x5ab71a(0x452)][_0x5ab71a(0x39e)]()[_0x5ab71a(0xcda)](),_0x216438=_0x2c5d67[_0x5ab71a(0xb0e)];for(const _0x491146 of _0x2729b2){if(!_0x491146)continue;if(_0x1ef7d0[_0x5ab71a(0xc4b)](/ATTACK[ ](\d+)/i))_0x5ab71a(0x5a7)===_0x5ab71a(0x5a7)?_0x491146[_0x5ab71a(0xa42)](Number(RegExp['$1'])):_0x15885e[_0x5ab71a(0x9c1)]+=_0x5ab71a(0x7ef);else _0x1ef7d0===_0x5ab71a(0x3f3)?_0x491146[_0x5ab71a(0x30f)]():'UIVDQ'!==_0x5ab71a(0x507)?_0x491146[_0x5ab71a(0x9eb)](_0x1ef7d0):this[_0x5ab71a(0x25b)]('showAnimation',_0x593208,[_0x593e48[_0x5ab71a(0xb38)]],-0x1);if(!_0x216438)_0x491146[_0x5ab71a(0x4a7)](0x0);else{if(_0x216438&&['thrust','swing',_0x5ab71a(0x3e3)][_0x5ab71a(0x6e3)](_0x1ef7d0)){}}}}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x8b2),_0x473f45=>{const _0x38f62e=_0x4fbf70;if(!SceneManager[_0x38f62e(0x90d)]())return;VisuMZ[_0x38f62e(0x334)](_0x473f45,_0x473f45);const _0x2aa4bd=BattleManager[_0x38f62e(0xb15)];if(!_0x2aa4bd)return;if(!_0x2aa4bd['item']())return;const _0x51391e=VisuMZ[_0x38f62e(0x938)](_0x473f45[_0x38f62e(0x2c9)]);for(const _0xc32cb3 of _0x51391e){if(!_0xc32cb3)continue;_0xc32cb3['performAction'](_0x2aa4bd);}}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x9ee),_0x3787a4=>{const _0x36f842=_0x4fbf70;if(!SceneManager[_0x36f842(0x90d)]())return;VisuMZ['ConvertParams'](_0x3787a4,_0x3787a4);const _0xbf7a81=VisuMZ[_0x36f842(0x938)](_0x3787a4[_0x36f842(0x2c9)]);for(const _0x12d57c of _0xbf7a81){if('hmwrt'==='hmwrt'){if(!_0x12d57c)continue;if(!_0x12d57c[_0x36f842(0xb81)]())continue;_0x12d57c[_0x36f842(0xb81)]()[_0x36f842(0x2f0)]();}else return!![];}}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x25e),_0x1660bf=>{const _0xdf1687=_0x4fbf70;if(!SceneManager[_0xdf1687(0x90d)]())return;VisuMZ[_0xdf1687(0x334)](_0x1660bf,_0x1660bf);const _0x521cd8=$gameTemp[_0xdf1687(0xc52)](),_0x414274=_0x1660bf[_0xdf1687(0x240)]*Sprite_Battler[_0xdf1687(0xc33)];_0x521cd8[_0xdf1687(0x438)](_0x414274);}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x976),_0x48b83d=>{const _0x13a032=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x13a032(0x334)](_0x48b83d,_0x48b83d);const _0x1a9c5c=$gameTemp['getLastPluginCommandInterpreter'](),_0x287a7d=BattleManager[_0x13a032(0xb15)];if(!_0x1a9c5c||!_0x287a7d)return;if(!_0x287a7d[_0x13a032(0x98d)]())return;const _0x2660d4=VisuMZ[_0x13a032(0x938)](_0x48b83d['Targets']);for(const _0x253071 of _0x2660d4){if(!_0x253071)continue;_0x253071['performActionStart'](_0x287a7d);}if(_0x48b83d[_0x13a032(0x85c)])_0x1a9c5c[_0x13a032(0x645)](_0x13a032(0x1b8));}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x9a7),_0x51bd33=>{const _0x703992=_0x4fbf70;if(!SceneManager[_0x703992(0x90d)]())return;if(!$gameSystem[_0x703992(0x2ee)]())return;VisuMZ[_0x703992(0x334)](_0x51bd33,_0x51bd33);const _0x2a762e=$gameTemp['getLastPluginCommandInterpreter'](),_0x496e03=VisuMZ[_0x703992(0x938)](_0x51bd33[_0x703992(0x2c9)]),_0x3a8e92=_0x51bd33[_0x703992(0x9b2)],_0x59616c=_0x51bd33[_0x703992(0x39b)],_0xb1a733=_0x51bd33[_0x703992(0xbf0)],_0x5eb5c9=_0x51bd33[_0x703992(0x590)],_0x13cb1e=_0x51bd33[_0x703992(0xd60)],_0x553b3d=_0x51bd33['EasingType'],_0x555232=_0x51bd33[_0x703992(0x452)],_0xc2a74e=_0x51bd33['WaitForMovement'];if(!_0x2a762e)return;for(const _0x90cd90 of _0x496e03){if(_0x703992(0xcb7)==='CcTQS')return!![];else{if(!_0x90cd90)continue;let _0x12f882=_0x59616c,_0x221bdc=_0xb1a733;if(_0x3a8e92[_0x703992(0xc4b)](/horz/i))_0x12f882*=_0x90cd90[_0x703992(0xc9f)]()?-0x1:0x1;if(_0x3a8e92[_0x703992(0xc4b)](/vert/i))_0x221bdc*=_0x90cd90[_0x703992(0xc9f)]()?-0x1:0x1;_0x90cd90[_0x703992(0xaba)](_0x12f882,_0x221bdc,_0x5eb5c9,_0x13cb1e,_0x553b3d),_0x90cd90[_0x703992(0x9eb)](_0x555232);}}if(_0xc2a74e)_0x2a762e[_0x703992(0x645)](_0x703992(0x1b8));}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x48d),_0x240ce4=>{const _0x2d0d59=_0x4fbf70;if(!SceneManager[_0x2d0d59(0x90d)]())return;if(!$gameSystem['isSideView']())return;VisuMZ['ConvertParams'](_0x240ce4,_0x240ce4);const _0x511f77=$gameTemp[_0x2d0d59(0xc52)](),_0xa52771=VisuMZ['CreateActionSequenceTargets'](_0x240ce4[_0x2d0d59(0x2c9)]),_0x34b6ea=_0x240ce4['Destination'],_0x440329=_0x240ce4['OffsetAdjust'],_0xf9bd79=_0x240ce4['OffsetX'],_0x1e21ea=_0x240ce4[_0x2d0d59(0x764)],_0x398872=_0x240ce4[_0x2d0d59(0x590)],_0x3d6eae=_0x240ce4['FaceDirection'],_0x394b79=_0x240ce4[_0x2d0d59(0x483)],_0x21a54d=_0x240ce4[_0x2d0d59(0x452)],_0x5804fc=_0x240ce4[_0x2d0d59(0x85c)];if(!_0x511f77)return;for(const _0x7fd424 of _0xa52771){if(!_0x7fd424)continue;let _0x21a76e=_0x7fd424[_0x2d0d59(0xb81)]()[_0x2d0d59(0xd6b)],_0x3d124c=_0x7fd424[_0x2d0d59(0xb81)]()['_baseY'];if(_0x34b6ea['match'](/home/i))_0x21a76e=_0x7fd424[_0x2d0d59(0xb81)]()[_0x2d0d59(0x818)],_0x3d124c=_0x7fd424['battler']()[_0x2d0d59(0xd1d)];else{if(_0x34b6ea[_0x2d0d59(0xc4b)](/center/i))_0x2d0d59(0x89b)!=='moxbO'?(_0x2646b8[_0x2d0d59(0xae2)]['Settings'][_0x2d0d59(0x2c8)]['ShowEnemyGauge']&&this['createHpGaugeSprite'](),_0xc05b54['BattleCore'][_0x2d0d59(0x71f)][_0x2d0d59(0xc4a)](this)):(_0x21a76e=Graphics[_0x2d0d59(0x2d5)]/0x2,_0x3d124c=Graphics['boxHeight']/0x2);else _0x34b6ea['match'](/point (\d+), (\d+)/i)&&(_0x21a76e=Number(RegExp['$1']),_0x3d124c=Number(RegExp['$2']));}if(_0x440329['match'](/none/i)){if(_0x2d0d59(0xc3a)===_0x2d0d59(0xc3a))_0x21a76e+=_0xf9bd79,_0x3d124c+=_0x1e21ea;else return this[_0x2d0d59(0x6e9)]=this[_0x2d0d59(0x6e9)]||_0x1e60d8[_0x2d0d59(0x92c)][_0x2d0d59(0x445)]()||0x24,this[_0x2d0d59(0x6e9)]*0x4;}else{if(_0x440329[_0x2d0d59(0xc4b)](/horz/i)&&_0x440329[_0x2d0d59(0xc4b)](/vert/i))_0x21a76e+=_0x7fd424['isActor']()?-_0xf9bd79:_0xf9bd79,_0x3d124c+=_0x7fd424[_0x2d0d59(0xc9f)]()?-_0x1e21ea:_0x1e21ea;else{if(_0x440329[_0x2d0d59(0xc4b)](/horz/i)){if(_0x2d0d59(0x702)!==_0x2d0d59(0x5a8))_0x21a76e+=_0x7fd424[_0x2d0d59(0xc9f)]()?-_0xf9bd79:_0xf9bd79,_0x3d124c+=_0x1e21ea;else{let _0xfe13a5=_0xe220e8[_0x2d0d59(0x9fb)](_0x392eb3[_0x2d0d59(0x80b)]);_0x23851e[_0x2d0d59(0xd4f)]<0x0&&(_0xfe13a5+=_0x4d6d5c['abs'](_0x5b4357[_0x2d0d59(0xd4f)])),_0x2503bf[_0x2d0d59(0x988)](_0x666199[_0x2d0d59(0x80b)],_0xfe13a5);}}else _0x440329['match'](/vert/i)&&(_0x21a76e+=_0xf9bd79,_0x3d124c+=_0x7fd424[_0x2d0d59(0xc9f)]()?-_0x1e21ea:_0x1e21ea);}}_0x7fd424[_0x2d0d59(0x1d0)](_0x21a76e,_0x3d124c,_0x398872,_0x3d6eae,_0x394b79,-0x1),_0x7fd424[_0x2d0d59(0x9eb)](_0x21a54d);}if(_0x5804fc)_0x511f77[_0x2d0d59(0x645)](_0x2d0d59(0x1b8));}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x868),_0x1c7883=>{const _0x501ac5=_0x4fbf70;if(!SceneManager[_0x501ac5(0x90d)]())return;if(!$gameSystem[_0x501ac5(0x2ee)]())return;VisuMZ[_0x501ac5(0x334)](_0x1c7883,_0x1c7883);const _0x5d2735=$gameTemp['getLastPluginCommandInterpreter'](),_0x5921bf=VisuMZ['CreateActionSequenceTargets'](_0x1c7883[_0x501ac5(0x62b)]),_0x1ed8a7=VisuMZ[_0x501ac5(0x938)](_0x1c7883[_0x501ac5(0x8ae)]),_0x473a78=_0x1c7883[_0x501ac5(0x517)];let _0x385279=_0x1c7883['MeleeDistance'];const _0x1d29fd=_0x1c7883[_0x501ac5(0x3d5)],_0x599639=_0x1c7883[_0x501ac5(0x259)],_0x32e14e=_0x1c7883[_0x501ac5(0x764)],_0x3ae3ba=_0x1c7883[_0x501ac5(0x590)],_0x32099f=_0x1c7883[_0x501ac5(0xd60)],_0x4b30d7=_0x1c7883[_0x501ac5(0x483)],_0x2d40c5=_0x1c7883['MotionType'],_0x4e76c0=_0x1c7883[_0x501ac5(0x85c)],_0x10e220=Math[_0x501ac5(0x872)](..._0x1ed8a7[_0x501ac5(0x990)](_0x592748=>_0x592748[_0x501ac5(0xb81)]()[_0x501ac5(0xd6b)]-_0x592748[_0x501ac5(0xb81)]()[_0x501ac5(0xb9d)]()/0x2)),_0xc526b6=Math[_0x501ac5(0x6f0)](..._0x1ed8a7['map'](_0x4e5953=>_0x4e5953[_0x501ac5(0xb81)]()[_0x501ac5(0xd6b)]+_0x4e5953['battler']()[_0x501ac5(0xb9d)]()/0x2)),_0x3014b4=Math[_0x501ac5(0x872)](..._0x1ed8a7[_0x501ac5(0x990)](_0x420282=>_0x420282[_0x501ac5(0xb81)]()[_0x501ac5(0x571)]-_0x420282[_0x501ac5(0xb81)]()[_0x501ac5(0x237)]())),_0x4ce2f6=Math[_0x501ac5(0x6f0)](..._0x1ed8a7[_0x501ac5(0x990)](_0x1dcd45=>_0x1dcd45[_0x501ac5(0xb81)]()[_0x501ac5(0x571)])),_0x231387=_0x1ed8a7['filter'](_0x45309b=>_0x45309b['isActor']())[_0x501ac5(0x9d2)],_0x482a8b=_0x1ed8a7[_0x501ac5(0xa29)](_0x3e961a=>_0x3e961a[_0x501ac5(0x923)]())[_0x501ac5(0x9d2)];let _0x327312=0x0,_0x531bb3=0x0;if(_0x473a78[_0x501ac5(0xc4b)](/front/i))_0x327312=_0x231387>=_0x482a8b?_0x10e220:_0xc526b6;else{if(_0x473a78['match'](/middle/i)){if(_0x501ac5(0xc04)!=='CHWRU')_0x327312=(_0x10e220+_0xc526b6)/0x2,_0x385279=-0x1;else{if(!_0x479dc3['isSceneBattle']())return;_0x46f5c2[_0x501ac5(0x334)](_0x549a95,_0x3590cc);const _0x305c4e=_0x553238['getLastPluginCommandInterpreter'](),_0x428380=_0x1e2797[_0x501ac5(0xb38)],_0x2f3ae7=_0x58a727[_0x501ac5(0x938)](_0xcda3ec[_0x501ac5(0x2c9)]),_0x4dc65c=_0x3aa7ac[_0x501ac5(0x76e)],_0x5a1e23=_0x219e0b[_0x501ac5(0x2e0)];if(!_0x305c4e||!_0x428380)return;const _0x40fafb=_0x428380[_0x501ac5(0x9f1)]();_0x2222ef[_0x501ac5(0x889)](_0x2f3ae7,_0x40fafb,_0x4dc65c),_0x9365c2['WaitForAnimation']&&_0x305c4e[_0x501ac5(0x645)](_0x501ac5(0x505));}}else _0x473a78[_0x501ac5(0xc4b)](/back/i)&&('jtWhV'!==_0x501ac5(0xaeb)?_0x327312=_0x231387>=_0x482a8b?_0xc526b6:_0x10e220:_0x2c136f+=_0xf2ffe9);}if(_0x473a78[_0x501ac5(0xc4b)](/head/i))_0x531bb3=_0x3014b4;else{if(_0x473a78[_0x501ac5(0xc4b)](/center/i)){if(_0x501ac5(0x6b0)==='TVAsl')_0x531bb3=(_0x3014b4+_0x4ce2f6)/0x2;else{if(!this['isDuringNonLoopingMotion']()&&this!==_0x130625[_0x501ac5(0xb38)]){if(this['battler']())this[_0x501ac5(0xb81)]()['refreshMotion']();}this[_0x501ac5(0x245)]();return;}}else _0x473a78['match'](/base/i)&&(_0x531bb3=_0x4ce2f6);}if(!_0x5d2735)return;for(const _0x275a07 of _0x5921bf){if(!_0x275a07)continue;let _0x18b28e=_0x327312,_0x4d14c=_0x531bb3;if(_0x1d29fd['match'](/none/i)){if(_0x501ac5(0x38d)!==_0x501ac5(0xc61))_0x18b28e+=_0x599639,_0x4d14c+=_0x32e14e;else{let _0x5c68f3=_0x16fc20(_0x4fbbd1['$1']);while(_0x5c68f3--){const _0x4f19de=_0x123d4a[_0x501ac5(0x545)](0x2)===0x0?this['opponentsUnit']():this[_0x501ac5(0x4e8)]();_0x2fdff8['push'](_0x4f19de['trueRandomTarget']());}return this[_0x501ac5(0x305)](_0x5f1fab);}}else{if(_0x1d29fd[_0x501ac5(0xc4b)](/horz/i)&&_0x1d29fd['match'](/vert/i))_0x18b28e+=_0x275a07[_0x501ac5(0xc9f)]()?-_0x599639:_0x599639,_0x4d14c+=_0x275a07[_0x501ac5(0xc9f)]()?-_0x32e14e:_0x32e14e;else{if(_0x1d29fd[_0x501ac5(0xc4b)](/horz/i)){if(_0x501ac5(0xad0)!==_0x501ac5(0xbb6))_0x18b28e+=_0x275a07['isActor']()?-_0x599639:_0x599639,_0x4d14c+=_0x32e14e;else{if(!_0x488fde['isSceneBattle']())return;if(!_0x1d8ab4[_0x501ac5(0x3b4)])return;_0x326a71[_0x501ac5(0x334)](_0x199fd9,_0x2c8556);const _0x4e7605=_0x292698[_0x501ac5(0xae2)][_0x501ac5(0x79e)](_0xe1aec);_0x536741['_scene'][_0x501ac5(0xae1)](_0x4e7605);const _0x5cde4b=_0x42b272[_0x501ac5(0xc52)]();_0x5cde4b&&_0x2e59e4[_0x501ac5(0x705)]&&_0x5cde4b[_0x501ac5(0x645)](_0x501ac5(0x7bc));}}else _0x1d29fd[_0x501ac5(0xc4b)](/vert/i)&&(_0x501ac5(0x3e0)!==_0x501ac5(0x3e0)?_0x3f13fe[_0x501ac5(0xc07)]()[_0x501ac5(0x982)]()&&(this['push']('pushBaseLine'),this[_0x501ac5(0x257)](_0xa441c),this[_0x501ac5(0xd80)](_0x4d41c2),this[_0x501ac5(0x25b)]('waitForNewLine')):(_0x18b28e+=_0x599639,_0x4d14c+=_0x275a07['isActor']()?-_0x32e14e:_0x32e14e));}}_0x275a07[_0x501ac5(0x1d0)](_0x18b28e,_0x4d14c,_0x3ae3ba,_0x32099f,_0x4b30d7,_0x385279),_0x275a07['requestMotion'](_0x2d40c5);}if(_0x4e76c0)_0x5d2735[_0x501ac5(0x645)](_0x501ac5(0x1b8));}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x8fe),_0x56678f=>{const _0x3e90ee=_0x4fbf70;if(!SceneManager[_0x3e90ee(0x90d)]())return;if(!$gameSystem[_0x3e90ee(0x2ee)]())return;VisuMZ[_0x3e90ee(0x334)](_0x56678f,_0x56678f);const _0x22a762=VisuMZ[_0x3e90ee(0x938)](_0x56678f[_0x3e90ee(0x2c9)]);let _0x56cd8c=_0x56678f['Direction'][_0x3e90ee(0xc4b)](/back/i);for(const _0x5375cc of _0x22a762){if(!_0x5375cc)continue;if(_0x56678f[_0x3e90ee(0x5fb)][_0x3e90ee(0xc4b)](/rand/i))_0x56cd8c=Math['randomInt'](0x2);_0x5375cc[_0x3e90ee(0x980)](!!_0x56cd8c);}}),PluginManager['registerCommand'](pluginData[_0x4fbf70(0x27a)],'ActSeq_Movement_FacePoint',_0x4bfe86=>{const _0x5c8a35=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x5c8a35(0x2ee)]())return;VisuMZ[_0x5c8a35(0x334)](_0x4bfe86,_0x4bfe86);const _0x2b5f0e=VisuMZ['CreateActionSequenceTargets'](_0x4bfe86['Targets']);let _0x540924=_0x4bfe86[_0x5c8a35(0x3ee)];const _0x6488f0=_0x4bfe86[_0x5c8a35(0x91f)];for(const _0xfbe3ae of _0x2b5f0e){if('qRSrg'!==_0x5c8a35(0xb50))this['battler']()[_0x5c8a35(0x2f0)]();else{if(!_0xfbe3ae)continue;let _0x27db0b=_0xfbe3ae['battler']()[_0x5c8a35(0xd6b)],_0x22ec38=_0xfbe3ae[_0x5c8a35(0xb81)]()[_0x5c8a35(0x571)];if(_0x540924['match'](/home/i))_0x27db0b=_0xfbe3ae['battler']()[_0x5c8a35(0x818)],_0x22ec38=_0xfbe3ae[_0x5c8a35(0xb81)]()[_0x5c8a35(0xd1d)];else{if(_0x540924[_0x5c8a35(0xc4b)](/center/i)){if(_0x5c8a35(0x200)===_0x5c8a35(0x200))_0x27db0b=Graphics[_0x5c8a35(0x2d5)]/0x2,_0x22ec38=Graphics['boxHeight']/0x2;else{if(_0x5c426b>_0x2bafc1[_0x5c8a35(0xd6b)])_0x7055e7=![];if(_0x2b158f<_0xbc2cbe[_0x5c8a35(0xd6b)])_0x23ed02=!![];}}else{if(_0x540924['match'](/point (\d+), (\d+)/i)){if('kFnRm'!==_0x5c8a35(0x5ac)){const _0x1a7b62=_0x5ccc65[_0x5c8a35(0xa8c)](_0x229100['$1']);this[_0x5c8a35(0x220)](_0x1cf458[_0x1a7b62]);}else _0x27db0b=Number(RegExp['$1']),_0x22ec38=Number(RegExp['$2']);}}}_0xfbe3ae[_0x5c8a35(0x3eb)](Math[_0x5c8a35(0xbec)](_0x27db0b),Math[_0x5c8a35(0xbec)](_0x22ec38),!!_0x6488f0);}}}),PluginManager[_0x4fbf70(0xb86)](pluginData['name'],_0x4fbf70(0xc59),_0x589ae5=>{const _0x29f53a=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x29f53a(0x2ee)]())return;VisuMZ[_0x29f53a(0x334)](_0x589ae5,_0x589ae5);const _0x235a84=VisuMZ[_0x29f53a(0x938)](_0x589ae5[_0x29f53a(0x62b)]),_0x489426=VisuMZ[_0x29f53a(0x938)](_0x589ae5['Targets2']),_0x5b0992=_0x489426[_0x29f53a(0x990)](_0x520f95=>_0x520f95&&_0x520f95[_0x29f53a(0xb81)]()?_0x520f95['battler']()['_baseX']:0x0)/(_0x489426[_0x29f53a(0x9d2)]||0x1),_0x1ee24a=_0x489426[_0x29f53a(0x990)](_0x34a37a=>_0x34a37a&&_0x34a37a[_0x29f53a(0xb81)]()?_0x34a37a[_0x29f53a(0xb81)]()[_0x29f53a(0x571)]:0x0)/(_0x489426[_0x29f53a(0x9d2)]||0x1),_0xfaf64a=_0x589ae5['FaceAway'];for(const _0xfe1b22 of _0x235a84){if(!_0xfe1b22)continue;_0xfe1b22[_0x29f53a(0x3eb)](Math[_0x29f53a(0xbec)](_0x5b0992),Math[_0x29f53a(0xbec)](_0x1ee24a),!!_0xfaf64a);}}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],'ActSeq_Movement_Float',_0x4d698e=>{const _0x19725b=_0x4fbf70;if(!SceneManager[_0x19725b(0x90d)]())return;VisuMZ['ConvertParams'](_0x4d698e,_0x4d698e);const _0x1d1632=$gameTemp['getLastPluginCommandInterpreter'](),_0x352dbf=VisuMZ['CreateActionSequenceTargets'](_0x4d698e['Targets']),_0x2d8f96=_0x4d698e[_0x19725b(0xb23)],_0x244581=_0x4d698e['Duration'],_0x2bd4ba=_0x4d698e[_0x19725b(0x483)],_0x4ecbc3=_0x4d698e[_0x19725b(0x723)];if(!_0x1d1632)return;for(const _0xe25551 of _0x352dbf){if(!_0xe25551)continue;_0xe25551[_0x19725b(0x6cb)](_0x2d8f96,_0x244581,_0x2bd4ba);}if(_0x4ecbc3)_0x1d1632[_0x19725b(0x645)](_0x19725b(0x965));}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x1ab),_0x215987=>{const _0x4cfa51=_0x4fbf70;if(!SceneManager[_0x4cfa51(0x90d)]())return;VisuMZ['ConvertParams'](_0x215987,_0x215987);const _0x30aa10=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x30aa10)return;const _0xc5dfba=VisuMZ[_0x4cfa51(0x938)](_0x215987[_0x4cfa51(0x2c9)]);for(const _0x5e97e1 of _0xc5dfba){if(!_0x5e97e1)continue;_0x5e97e1[_0x4cfa51(0xce5)]();}BattleManager[_0x4cfa51(0xb38)]&&(_0x4cfa51(0xa54)===_0x4cfa51(0xc0e)?(this[_0x4cfa51(0x2be)][_0x4cfa51(0xc44)]['x']=this[_0x4cfa51(0x614)],this[_0x4cfa51(0x2be)][_0x4cfa51(0xc44)]['y']=this['_targetSkewY']):BattleManager[_0x4cfa51(0xb38)][_0x4cfa51(0x287)]());if(_0x215987[_0x4cfa51(0x85c)])_0x30aa10['setWaitMode'](_0x4cfa51(0x1b8));}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],'ActSeq_Movement_Jump',_0x925ad2=>{const _0x2eea3a=_0x4fbf70;if(!SceneManager[_0x2eea3a(0x90d)]())return;VisuMZ['ConvertParams'](_0x925ad2,_0x925ad2);const _0x56b3cc=$gameTemp['getLastPluginCommandInterpreter'](),_0x5c9784=VisuMZ[_0x2eea3a(0x938)](_0x925ad2[_0x2eea3a(0x2c9)]),_0xac8ef0=_0x925ad2['Height'],_0x421910=_0x925ad2['Duration'],_0xf21b57=_0x925ad2[_0x2eea3a(0xb68)];if(!_0x56b3cc)return;for(const _0x13a5d5 of _0x5c9784){if(!_0x13a5d5)continue;_0x13a5d5[_0x2eea3a(0x968)](_0xac8ef0,_0x421910);}if(_0xf21b57)_0x56b3cc[_0x2eea3a(0x645)](_0x2eea3a(0x49a));}),PluginManager[_0x4fbf70(0xb86)](pluginData['name'],_0x4fbf70(0xac0),_0x1f54db=>{const _0x1ade94=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x1ade94(0x2ee)]())return;VisuMZ['ConvertParams'](_0x1f54db,_0x1f54db);const _0x442786=$gameTemp['getLastPluginCommandInterpreter'](),_0x442a30=VisuMZ['CreateActionSequenceTargets'](_0x1f54db[_0x1ade94(0x2c9)]),_0x2495bb=_0x1f54db[_0x1ade94(0x9b2)],_0x2cbb33=_0x1f54db[_0x1ade94(0x39b)],_0x11d084=_0x1f54db['DistanceY'],_0x27e302=_0x1f54db['Duration'],_0x3ffef4=_0x1f54db[_0x1ade94(0xd60)],_0x4bddcd=_0x1f54db[_0x1ade94(0x483)],_0x4d1123=_0x1f54db[_0x1ade94(0x452)],_0x475f30=_0x1f54db[_0x1ade94(0x85c)];if(!_0x442786)return;for(const _0x183444 of _0x442a30){if(!_0x183444)continue;let _0x276d7a=_0x2cbb33,_0x313332=_0x11d084;if(_0x2495bb[_0x1ade94(0xc4b)](/horz/i))_0x276d7a*=_0x183444[_0x1ade94(0xc9f)]()?-0x1:0x1;if(_0x2495bb['match'](/vert/i))_0x313332*=_0x183444[_0x1ade94(0xc9f)]()?-0x1:0x1;_0x183444[_0x1ade94(0xd4c)](_0x276d7a,_0x313332,_0x27e302,_0x3ffef4,_0x4bddcd),_0x183444['requestMotion'](_0x4d1123);}if(_0x475f30)_0x442786['setWaitMode'](_0x1ade94(0x1b8));}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0xa6e),_0x4eae3b=>{const _0x1adb98=_0x4fbf70;if(!SceneManager[_0x1adb98(0x90d)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x1adb98(0x334)](_0x4eae3b,_0x4eae3b);const _0xe79978=$gameTemp[_0x1adb98(0xc52)](),_0x698950=VisuMZ[_0x1adb98(0x938)](_0x4eae3b[_0x1adb98(0x2c9)]),_0x2bfc37=_0x4eae3b[_0x1adb98(0x61b)],_0xa2dc9e=_0x4eae3b[_0x1adb98(0x3d5)],_0x4ef64f=_0x4eae3b[_0x1adb98(0x259)],_0x57602=_0x4eae3b['OffsetY'],_0x353b49=_0x4eae3b[_0x1adb98(0x590)],_0x1cf729=_0x4eae3b[_0x1adb98(0xd60)],_0x324675=_0x4eae3b[_0x1adb98(0x483)],_0xe9cb03=_0x4eae3b['MotionType'],_0x448ab8=_0x4eae3b[_0x1adb98(0x85c)];if(!_0xe79978)return;for(const _0x1ec7f6 of _0x698950){if(!_0x1ec7f6)continue;let _0x4510b6=_0x1ec7f6[_0x1adb98(0xb81)]()['_baseX'],_0x4b955c=_0x1ec7f6[_0x1adb98(0xb81)]()['_baseY'];if(_0x2bfc37[_0x1adb98(0xc4b)](/home/i))_0x4510b6=_0x1ec7f6[_0x1adb98(0xb81)]()[_0x1adb98(0x818)],_0x4b955c=_0x1ec7f6['battler']()[_0x1adb98(0xd1d)];else{if(_0x2bfc37[_0x1adb98(0xc4b)](/center/i))_0x1adb98(0xa91)==='TrhqA'?(_0x4510b6=Graphics[_0x1adb98(0x2d5)]/0x2,_0x4b955c=Graphics[_0x1adb98(0xa30)]/0x2):this['addSingleSkillCommands']();else _0x2bfc37[_0x1adb98(0xc4b)](/point (\d+), (\d+)/i)&&(_0x4510b6=Number(RegExp['$1']),_0x4b955c=Number(RegExp['$2']));}if(_0xa2dc9e['match'](/none/i))_0x4510b6+=_0x4ef64f,_0x4b955c+=_0x57602;else{if(_0xa2dc9e[_0x1adb98(0xc4b)](/horz/i)&&_0xa2dc9e[_0x1adb98(0xc4b)](/vert/i))_0x4510b6+=_0x1ec7f6[_0x1adb98(0xc9f)]()?-_0x4ef64f:_0x4ef64f,_0x4b955c+=_0x1ec7f6[_0x1adb98(0xc9f)]()?-_0x57602:_0x57602;else{if(_0xa2dc9e[_0x1adb98(0xc4b)](/horz/i))_0x1adb98(0x78d)===_0x1adb98(0x520)?(_0x33d056[_0x1adb98(0xae2)][_0x1adb98(0xcc5)][_0x1adb98(0xc4a)](this),delete this['_handlers'][_0x1adb98(0x39c)],delete this[_0x1adb98(0xa36)]['pagedown']):(_0x4510b6+=_0x1ec7f6[_0x1adb98(0xc9f)]()?-_0x4ef64f:_0x4ef64f,_0x4b955c+=_0x57602);else{if(_0xa2dc9e[_0x1adb98(0xc4b)](/vert/i)){if('wFQPt'==='wFQPt')_0x4510b6+=_0x4ef64f,_0x4b955c+=_0x1ec7f6[_0x1adb98(0xc9f)]()?-_0x57602:_0x57602;else{const _0x243463=_0x46928c[this[_0x1adb98(0x371)]['attackSkillId']()];if(!_0x243463)return;if(!this[_0x1adb98(0x281)](_0x243463))return;const _0x1f5261=this[_0x1adb98(0xc08)](),_0x1a5f96=_0xca22d1[_0x1adb98(0xafa)](_0x243463),_0xf32b9a=_0x1bb046[_0x1adb98(0x885)](_0x243463),_0x44be93=_0x1f5261==='text'?_0x1a5f96:_0x1adb98(0x769)[_0x1adb98(0x946)](_0xf32b9a,_0x1a5f96);this['addCommand'](_0x44be93,'attack',this[_0x1adb98(0x371)][_0x1adb98(0x772)]());}}}}}_0x1ec7f6[_0x1adb98(0x3fa)](_0x4510b6,_0x4b955c,_0x353b49,_0x1cf729,_0x324675,-0x1),_0x1ec7f6[_0x1adb98(0x9eb)](_0xe9cb03);}if(_0x448ab8)_0xe79978[_0x1adb98(0x645)](_0x1adb98(0x1b8));}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0xbb0),_0x2df0da=>{const _0x53c705=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x53c705(0x334)](_0x2df0da,_0x2df0da);const _0x54c9b1=$gameTemp['getLastPluginCommandInterpreter'](),_0x570192=VisuMZ[_0x53c705(0x938)](_0x2df0da[_0x53c705(0x62b)]),_0x5d5d88=VisuMZ[_0x53c705(0x938)](_0x2df0da[_0x53c705(0x8ae)]),_0x3d6ab5=_0x2df0da[_0x53c705(0x517)];let _0x31d2fb=_0x2df0da[_0x53c705(0x87e)];const _0x26acc6=_0x2df0da[_0x53c705(0x3d5)],_0x27fc07=_0x2df0da['OffsetX'],_0x30b661=_0x2df0da[_0x53c705(0x764)],_0x5954fe=_0x2df0da['Duration'],_0x371cc3=_0x2df0da['FaceDirection'],_0x194eeb=_0x2df0da[_0x53c705(0x483)],_0x5d9fd7=_0x2df0da[_0x53c705(0x452)],_0x3c1cbf=_0x2df0da['WaitForMovement'],_0x590347=Math[_0x53c705(0x872)](..._0x5d5d88[_0x53c705(0x990)](_0x58b0e5=>_0x58b0e5[_0x53c705(0xb81)]()['_baseX']-_0x58b0e5[_0x53c705(0xb81)]()[_0x53c705(0xb9d)]()/0x2)),_0x135f44=Math[_0x53c705(0x6f0)](..._0x5d5d88[_0x53c705(0x990)](_0x716622=>_0x716622[_0x53c705(0xb81)]()[_0x53c705(0xd6b)]+_0x716622[_0x53c705(0xb81)]()[_0x53c705(0xb9d)]()/0x2)),_0x1cca0f=Math['min'](..._0x5d5d88[_0x53c705(0x990)](_0x357aea=>_0x357aea[_0x53c705(0xb81)]()[_0x53c705(0x571)]-_0x357aea[_0x53c705(0xb81)]()[_0x53c705(0x237)]())),_0x3d1737=Math[_0x53c705(0x6f0)](..._0x5d5d88['map'](_0x5e6d50=>_0x5e6d50[_0x53c705(0xb81)]()[_0x53c705(0x571)])),_0xeb16c4=_0x5d5d88[_0x53c705(0xa29)](_0x25d67d=>_0x25d67d[_0x53c705(0xc9f)]())[_0x53c705(0x9d2)],_0x3f7c2b=_0x5d5d88[_0x53c705(0xa29)](_0x253189=>_0x253189[_0x53c705(0x923)]())['length'];let _0x1223bd=0x0,_0x246c8a=0x0;if(_0x3d6ab5['match'](/front/i))_0x1223bd=_0xeb16c4>=_0x3f7c2b?_0x590347:_0x135f44;else{if(_0x3d6ab5[_0x53c705(0xc4b)](/middle/i))_0x1223bd=(_0x590347+_0x135f44)/0x2,_0x31d2fb=-0x1;else _0x3d6ab5['match'](/back/i)&&(_0x53c705(0xb90)!==_0x53c705(0x347)?_0x1223bd=_0xeb16c4>=_0x3f7c2b?_0x135f44:_0x590347:_0x2f3f11[_0x53c705(0xae2)]['Sprite_Enemy_initVisibility'][_0x53c705(0xc4a)](this));}if(_0x3d6ab5['match'](/head/i))_0x246c8a=_0x1cca0f;else{if(_0x3d6ab5[_0x53c705(0xc4b)](/center/i)){if(_0x53c705(0x717)!==_0x53c705(0x717))return _0x36ac95[_0x53c705(0xa93)]()[_0x53c705(0x1c3)]();else _0x246c8a=(_0x1cca0f+_0x3d1737)/0x2;}else _0x3d6ab5['match'](/base/i)&&(_0x246c8a=_0x3d1737);}if(!_0x54c9b1)return;for(const _0x31c49f of _0x570192){if(_0x53c705(0xbde)===_0x53c705(0x584))_0x36b17c[_0x53c705(0xae2)][_0x53c705(0x9c7)][_0x53c705(0xc4a)](this),this[_0x53c705(0x8e0)]();else{if(!_0x31c49f)continue;let _0x588c0b=_0x1223bd,_0x2bc99e=_0x246c8a;if(_0x26acc6[_0x53c705(0xc4b)](/none/i))_0x588c0b+=_0x27fc07,_0x2bc99e+=_0x30b661;else{if(_0x26acc6[_0x53c705(0xc4b)](/horz/i)&&_0x26acc6['match'](/vert/i)){if(_0x53c705(0x802)==='awzge')_0x588c0b+=_0x31c49f[_0x53c705(0xc9f)]()?-_0x27fc07:_0x27fc07,_0x2bc99e+=_0x31c49f[_0x53c705(0xc9f)]()?-_0x30b661:_0x30b661;else{this[_0x53c705(0x544)]=_0x28ebe6[_0x53c705(0x4c2)][_0x53c705(0xd18)];return;}}else{if(_0x26acc6['match'](/horz/i))_0x588c0b+=_0x31c49f[_0x53c705(0xc9f)]()?-_0x27fc07:_0x27fc07,_0x2bc99e+=_0x30b661;else _0x26acc6[_0x53c705(0xc4b)](/vert/i)&&(_0x588c0b+=_0x27fc07,_0x2bc99e+=_0x31c49f['isActor']()?-_0x30b661:_0x30b661);}}_0x31c49f[_0x53c705(0x3fa)](_0x588c0b,_0x2bc99e,_0x5954fe,_0x371cc3,_0x194eeb,_0x31d2fb),_0x31c49f[_0x53c705(0x9eb)](_0x5d9fd7);}}if(_0x3c1cbf)_0x54c9b1[_0x53c705(0x645)]('battleMove');}),PluginManager[_0x4fbf70(0xb86)](pluginData['name'],_0x4fbf70(0xa04),_0x177bd9=>{const _0x304aec=_0x4fbf70;if(!SceneManager[_0x304aec(0x90d)]())return;VisuMZ['ConvertParams'](_0x177bd9,_0x177bd9);const _0x4f2862=$gameTemp[_0x304aec(0xc52)](),_0x4996c4=VisuMZ['CreateActionSequenceTargets'](_0x177bd9[_0x304aec(0x2c9)]),_0x141dff=_0x177bd9[_0x304aec(0x8b7)],_0x3638f7=_0x177bd9[_0x304aec(0x590)],_0x476aed=_0x177bd9[_0x304aec(0x483)],_0x13e723=_0x177bd9[_0x304aec(0x6f8)];if(!_0x4f2862)return;for(const _0x57e9d6 of _0x4996c4){if(!_0x57e9d6)continue;_0x57e9d6['changeBattlerOpacity'](_0x141dff,_0x3638f7,_0x476aed);}if(_0x13e723)_0x4f2862[_0x304aec(0x645)](_0x304aec(0xc8e));}),PluginManager[_0x4fbf70(0xb86)](pluginData['name'],'ActSeq_Movement_Scale',_0x1874ad=>{const _0x442290=_0x4fbf70;if(!SceneManager[_0x442290(0x90d)]())return;VisuMZ['ConvertParams'](_0x1874ad,_0x1874ad);const _0x243f7b=$gameTemp['getLastPluginCommandInterpreter'](),_0x2bb5c2=VisuMZ[_0x442290(0x938)](_0x1874ad[_0x442290(0x2c9)]),_0x485c2d=_0x1874ad[_0x442290(0x636)],_0x6cd80a=_0x1874ad[_0x442290(0x61d)],_0x424706=_0x1874ad[_0x442290(0x590)],_0x10cc30=_0x1874ad[_0x442290(0x483)],_0x2b1096=_0x1874ad[_0x442290(0xad3)];if(!_0x243f7b)return;for(const _0x190a26 of _0x2bb5c2){if(_0x442290(0xb1c)!==_0x442290(0xa39)){if(!_0x190a26)continue;_0x190a26[_0x442290(0x40c)](_0x485c2d,_0x6cd80a,_0x424706,_0x10cc30);}else _0x851c98+='\x0a',_0x2460f7+=_0x2ea869[_0x442290(0x5ec)][0x0];}if(_0x2b1096)_0x243f7b[_0x442290(0x645)](_0x442290(0x29c));}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0xd47),_0x287a16=>{const _0x28712d=_0x4fbf70;if(!SceneManager[_0x28712d(0x90d)]())return;VisuMZ['ConvertParams'](_0x287a16,_0x287a16);const _0x30e322=$gameTemp[_0x28712d(0xc52)](),_0x39f4ed=VisuMZ[_0x28712d(0x938)](_0x287a16[_0x28712d(0x2c9)]),_0x4a1ef6=_0x287a16[_0x28712d(0x1fc)],_0x49ecf0=_0x287a16[_0x28712d(0x949)],_0x1e11f1=_0x287a16[_0x28712d(0x590)],_0x6206b=_0x287a16[_0x28712d(0x483)],_0x2df188=_0x287a16[_0x28712d(0xad2)];if(!_0x30e322)return;for(const _0x3cdd3d of _0x39f4ed){if(_0x28712d(0x777)!==_0x28712d(0xa68)){if(!_0x3cdd3d)continue;_0x3cdd3d['skewBattler'](_0x4a1ef6,_0x49ecf0,_0x1e11f1,_0x6206b);}else{const _0x5b6507=this[_0x28712d(0xb1b)]['bitmap'];if(!_0x5b6507)return;const _0x45f1d4=_0x5b6507[_0x28712d(0x606)];let _0x5cd79b=_0x5b6507[_0x28712d(0x389)];if(this[_0x28712d(0x80d)][_0x28712d(0x521)]()){if(this['_frame'])_0x5cd79b=_0x5c2adc[_0x28712d(0x6f0)](0x0,this[_0x28712d(0x32b)][_0x28712d(0x389)]-0x4);}this['_mainSprite']['setFrame'](0x0,0x0,_0x45f1d4,_0x5cd79b),this[_0x28712d(0x782)](0x0,0x0,_0x45f1d4,_0x5cd79b);}}if(_0x2df188)_0x30e322['setWaitMode']('battleSpriteSkew');}),PluginManager['registerCommand'](pluginData['name'],_0x4fbf70(0x53d),_0x447d8a=>{const _0x496227=_0x4fbf70;if(!SceneManager[_0x496227(0x90d)]())return;VisuMZ[_0x496227(0x334)](_0x447d8a,_0x447d8a);const _0x541368=$gameTemp[_0x496227(0xc52)](),_0x32babc=VisuMZ[_0x496227(0x938)](_0x447d8a[_0x496227(0x2c9)]),_0x1de504=_0x447d8a[_0x496227(0x739)],_0x1a8b7a=_0x447d8a[_0x496227(0x590)],_0x48db4e=_0x447d8a[_0x496227(0x483)],_0x5b8770=_0x447d8a[_0x496227(0x3c4)],_0x6a7651=_0x447d8a['WaitForSpin'];if(!_0x541368)return;for(const _0x1b8259 of _0x32babc){if(!_0x1b8259)continue;_0x1b8259[_0x496227(0x4d3)](_0x1de504,_0x1a8b7a,_0x48db4e,_0x5b8770);}if(_0x6a7651)_0x541368[_0x496227(0x645)](_0x496227(0x89f));}),PluginManager['registerCommand'](pluginData[_0x4fbf70(0x27a)],'ActSeq_Movement_WaitForFloat',_0x4d0c09=>{const _0x5105c2=_0x4fbf70;if(!SceneManager[_0x5105c2(0x90d)]())return;const _0x7df640=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x7df640)return;_0x7df640[_0x5105c2(0x645)](_0x5105c2(0x965));}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x91b),_0x3ad6fb=>{const _0x2de2a2=_0x4fbf70;if(!SceneManager[_0x2de2a2(0x90d)]())return;const _0x505c81=$gameTemp[_0x2de2a2(0xc52)]();if(!_0x505c81)return;_0x505c81[_0x2de2a2(0x645)]('battleJump');}),PluginManager['registerCommand'](pluginData[_0x4fbf70(0x27a)],'ActSeq_Movement_WaitForMovement',_0x577d67=>{const _0x2f0db2=_0x4fbf70;if(!SceneManager[_0x2f0db2(0x90d)]())return;const _0x30ab4f=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x30ab4f)return;_0x30ab4f[_0x2f0db2(0x645)](_0x2f0db2(0x1b8));}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x7f4),_0x2889d9=>{const _0x19f6d3=_0x4fbf70;if(!SceneManager[_0x19f6d3(0x90d)]())return;const _0x4561dc=$gameTemp[_0x19f6d3(0xc52)]();if(!_0x4561dc)return;_0x4561dc[_0x19f6d3(0x645)]('battleOpacity');}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0xc0b),_0x2ce815=>{const _0x2fafdf=_0x4fbf70;if(!SceneManager[_0x2fafdf(0x90d)]())return;const _0x364e27=$gameTemp[_0x2fafdf(0xc52)]();if(!_0x364e27)return;_0x364e27[_0x2fafdf(0x645)](_0x2fafdf(0x29c));}),PluginManager[_0x4fbf70(0xb86)](pluginData['name'],_0x4fbf70(0x796),_0x618b27=>{const _0x4d6aaf=_0x4fbf70;if(!SceneManager[_0x4d6aaf(0x90d)]())return;const _0x1706d6=$gameTemp[_0x4d6aaf(0xc52)]();if(!_0x1706d6)return;_0x1706d6['setWaitMode'](_0x4d6aaf(0x19e));}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],'ActSeq_Movement_WaitForSpin',_0x203735=>{const _0x378a85=_0x4fbf70;if(!SceneManager[_0x378a85(0x90d)]())return;const _0x27a088=$gameTemp[_0x378a85(0xc52)]();if(!_0x27a088)return;_0x27a088[_0x378a85(0x645)](_0x378a85(0x89f));}),PluginManager['registerCommand'](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0xd4e),_0x35d132=>{const _0x49d3fa=_0x4fbf70;if(!SceneManager[_0x49d3fa(0x90d)]())return;if(!Imported[_0x49d3fa(0x632)])return;VisuMZ[_0x49d3fa(0x334)](_0x35d132,_0x35d132);const _0x345e29=$gameTemp[_0x49d3fa(0xc52)](),_0x259a0b=_0x35d132[_0x49d3fa(0x7fe)];if(!_0x345e29)return;const _0x59252a=BattleManager[_0x49d3fa(0x7cf)];if(!_0x59252a)return;_0x59252a['createActionSequenceProjectile'](_0x35d132);if(_0x259a0b)_0x345e29['setWaitMode'](_0x49d3fa(0xcff));}),PluginManager['registerCommand'](pluginData[_0x4fbf70(0x27a)],'ActSeq_Projectile_Icon',_0x4966ef=>{const _0x542309=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x542309(0x632)])return;VisuMZ[_0x542309(0x334)](_0x4966ef,_0x4966ef);const _0x3100ec=$gameTemp['getLastPluginCommandInterpreter'](),_0x258957=_0x4966ef[_0x542309(0x7fe)];if(!_0x3100ec)return;const _0x33470b=BattleManager['_spriteset'];if(!_0x33470b)return;_0x33470b[_0x542309(0xd66)](_0x4966ef);if(_0x258957)_0x3100ec[_0x542309(0x645)](_0x542309(0xcff));}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x943),_0x2fe029=>{const _0x344e65=_0x4fbf70;if(!SceneManager[_0x344e65(0x90d)]())return;if(!Imported[_0x344e65(0x632)])return;VisuMZ[_0x344e65(0x334)](_0x2fe029,_0x2fe029);const _0x3d6718=$gameTemp['getLastPluginCommandInterpreter'](),_0x53a2e1=_0x2fe029[_0x344e65(0x7fe)];if(!_0x3d6718)return;const _0x2c5889=BattleManager['_spriteset'];if(!_0x2c5889)return;_0x2c5889['createActionSequenceProjectile'](_0x2fe029);if(_0x53a2e1)_0x3d6718[_0x344e65(0x645)](_0x344e65(0xcff));}),PluginManager[_0x4fbf70(0xb86)](pluginData['name'],_0x4fbf70(0x3d1),_0x438f26=>{const _0x5ceccb=_0x4fbf70;if(!SceneManager[_0x5ceccb(0x90d)]())return;if(!Imported[_0x5ceccb(0x524)])return;VisuMZ['ConvertParams'](_0x438f26,_0x438f26);const _0x3ee6ee=$gameTemp[_0x5ceccb(0xc52)](),_0x68e606=_0x438f26[_0x5ceccb(0xad2)];if(!_0x3ee6ee)return;$gameScreen[_0x5ceccb(0xcaa)](_0x438f26['SkewX'],_0x438f26['SkewY'],_0x438f26[_0x5ceccb(0x590)],_0x438f26[_0x5ceccb(0x483)]);if(_0x68e606)_0x3ee6ee['setWaitMode'](_0x5ceccb(0x29f));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Skew_Reset',_0x4cd93a=>{const _0x5abcbb=_0x4fbf70;if(!SceneManager[_0x5abcbb(0x90d)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ['ConvertParams'](_0x4cd93a,_0x4cd93a);const _0x5a5836=$gameTemp[_0x5abcbb(0xc52)](),_0x428a18=_0x4cd93a['WaitForSkew'];if(!_0x5a5836)return;$gameScreen['setBattleSkew'](0x0,0x0,_0x4cd93a[_0x5abcbb(0x590)],_0x4cd93a[_0x5abcbb(0x483)]);if(_0x428a18)_0x5a5836[_0x5abcbb(0x645)]('battleSkew');}),PluginManager[_0x4fbf70(0xb86)](pluginData['name'],'ActSeq_Skew_WaitForSkew',_0x3dcd8f=>{const _0x4b4182=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4b4182(0x524)])return;const _0x361235=$gameTemp[_0x4b4182(0xc52)]();if(!_0x361235)return;_0x361235['setWaitMode'](_0x4b4182(0x29f));}),PluginManager['registerCommand'](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x788),_0x421f86=>{const _0x5abcd9=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5abcd9(0x334)](_0x421f86,_0x421f86);const _0x2144d2=$gameTemp[_0x5abcd9(0xc52)](),_0x4e427f=_0x421f86[_0x5abcd9(0xab1)],_0x445bee=_0x421f86[_0x5abcd9(0xaa9)];if(!_0x2144d2)return;BattleManager['_targetIndex']=_0x4e427f,BattleManager[_0x5abcd9(0x97e)]=BattleManager[_0x5abcd9(0x5de)]?BattleManager[_0x5abcd9(0x5de)][BattleManager[_0x5abcd9(0x991)]]||null:null,BattleManager[_0x5abcd9(0x97e)]&&_0x445bee[_0x5abcd9(0x7a4)]()[_0x5abcd9(0xcda)]()!==_0x5abcd9(0x710)&&_0x2144d2['command119']([_0x445bee]);}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x24c),_0xe10a79=>{const _0x45d695=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x45d695(0x334)](_0xe10a79,_0xe10a79);const _0x15f78e=$gameTemp[_0x45d695(0xc52)](),_0x285e7e=_0xe10a79[_0x45d695(0xaa9)];if(!_0x15f78e)return;BattleManager[_0x45d695(0x991)]++,BattleManager[_0x45d695(0x97e)]=BattleManager[_0x45d695(0x5de)][BattleManager[_0x45d695(0x991)]]||null,BattleManager[_0x45d695(0x97e)]&&_0x285e7e[_0x45d695(0x7a4)]()[_0x45d695(0xcda)]()!==_0x45d695(0x710)&&('BPKqF'!==_0x45d695(0x4a8)?this['_battleLayoutStyle']=_0x45d695(0x23c):_0x15f78e[_0x45d695(0x226)]([_0x285e7e]));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Target_PrevTarget',_0x4ff54d=>{const _0x4e14d1=_0x4fbf70;if(!SceneManager[_0x4e14d1(0x90d)]())return;VisuMZ[_0x4e14d1(0x334)](_0x4ff54d,_0x4ff54d);const _0x48daf8=$gameTemp[_0x4e14d1(0xc52)](),_0x473ecd=_0x4ff54d['JumpToLabel'];if(!_0x48daf8)return;BattleManager[_0x4e14d1(0x991)]--,BattleManager[_0x4e14d1(0x97e)]=BattleManager[_0x4e14d1(0x5de)][BattleManager[_0x4e14d1(0x991)]]||null,BattleManager[_0x4e14d1(0x97e)]&&_0x473ecd['toUpperCase']()[_0x4e14d1(0xcda)]()!==_0x4e14d1(0x710)&&_0x48daf8['command119']([_0x473ecd]);}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x3fd),_0x2a2622=>{const _0x2cd4cf=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2cd4cf(0x334)](_0x2a2622,_0x2a2622);const _0xce7743=$gameTemp[_0x2cd4cf(0xc52)](),_0x398d24=_0x2a2622[_0x2cd4cf(0x758)],_0x4c6ff7=_0x2a2622[_0x2cd4cf(0xaa9)];if(!_0xce7743)return;const _0x57402d=BattleManager[_0x2cd4cf(0x991)];for(;;){if(_0x2cd4cf(0x78b)!==_0x2cd4cf(0x1eb)){BattleManager['_targetIndex']=Math['randomInt'](BattleManager[_0x2cd4cf(0x5de)][_0x2cd4cf(0x9d2)]);if(!_0x398d24)break;if(BattleManager[_0x2cd4cf(0x991)]!==_0x57402d)break;if(BattleManager[_0x2cd4cf(0x5de)]['length']<=0x1){BattleManager['_targetIndex']=0x0;break;}}else{this['bitmap']=new _0x92b016(0x1,0x1);if(this[_0x2cd4cf(0x42f)]()){const _0x4e638d=this[_0x2cd4cf(0x7fa)]['svBattlerData']();this[_0x2cd4cf(0x597)]=new _0x33fc7b(_0x4e638d[_0x2cd4cf(0x606)],_0x4e638d[_0x2cd4cf(0x389)]),this[_0x2cd4cf(0xb1b)][_0x2cd4cf(0x597)]=new _0x5ef884(0x1,0x1);}else{if(_0x773a5f[_0x2cd4cf(0x2ee)]()){const _0x3b9b36=_0x2b0030[_0x2cd4cf(0x9d0)](_0x10be7e);_0x3b9b36[_0x2cd4cf(0x43e)](this[_0x2cd4cf(0x40a)][_0x2cd4cf(0x8ff)](this,_0x3b9b36));}else{const _0x3f6878=_0x5ab5fe['loadEnemy'](_0x522178);_0x3f6878[_0x2cd4cf(0x43e)](this[_0x2cd4cf(0x40a)][_0x2cd4cf(0x8ff)](this,_0x3f6878));}}}}BattleManager[_0x2cd4cf(0x97e)]=BattleManager[_0x2cd4cf(0x5de)][BattleManager[_0x2cd4cf(0x991)]]||null,BattleManager[_0x2cd4cf(0x97e)]&&_0x4c6ff7[_0x2cd4cf(0x7a4)]()['trim']()!==_0x2cd4cf(0x710)&&_0xce7743['command119']([_0x4c6ff7]);}),PluginManager['registerCommand'](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x714),_0x3a876d=>{const _0x1ca04f=_0x4fbf70;if(!SceneManager[_0x1ca04f(0x90d)]())return;VisuMZ[_0x1ca04f(0x334)](_0x3a876d,_0x3a876d);const _0x1966df=VisuMZ['CreateActionSequenceTargets'](_0x3a876d['Targets']);for(const _0x14646c of _0x1966df){if(!_0x14646c)continue;if(!_0x14646c['isActor']())continue;_0x14646c[_0x1ca04f(0x674)]();}}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0xa0d),_0x29878c=>{const _0x6b26f5=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x29878c,_0x29878c);const _0x483b47=$gameTemp['getLastPluginCommandInterpreter']();let _0x538568=![];const _0x54c526=_0x29878c[_0x6b26f5(0xaa9)],_0x4ebae2=VisuMZ[_0x6b26f5(0x938)](_0x29878c[_0x6b26f5(0x2c9)]);for(const _0x11d82e of _0x4ebae2){if(!_0x11d82e)continue;if(!_0x11d82e['isActor']())continue;_0x11d82e['nextActiveWeaponSlot'](),_0x11d82e['weapons']()[_0x6b26f5(0x9d2)]>0x0?_0x6b26f5(0x329)===_0x6b26f5(0x759)?this['_enemyWindowMode']=_0x2230eb:_0x538568=!![]:_0x6b26f5(0x4a3)===_0x6b26f5(0x4a3)?_0x11d82e[_0x6b26f5(0x674)]():(_0x1ee575[_0x6b26f5(0xae2)][_0x6b26f5(0x7a9)]&&_0x382ae9['BattleCore'][_0x6b26f5(0x7a9)][_0x6b26f5(0xc4a)](this,_0x1571c8),_0x3d8fa2['BattleCore']['Parse_Notetags_TraitObjects'](_0x5cb058));}_0x538568&&_0x54c526[_0x6b26f5(0x7a4)]()[_0x6b26f5(0xcda)]()!=='UNTITLED'&&_0x483b47['command119']([_0x54c526]);}),PluginManager[_0x4fbf70(0xb86)](pluginData['name'],'ActSeq_Weapon_SetActiveWeapon',_0x3a4172=>{const _0x21784b=_0x4fbf70;if(!SceneManager[_0x21784b(0x90d)]())return;VisuMZ[_0x21784b(0x334)](_0x3a4172,_0x3a4172);let _0x3cd575=_0x3a4172[_0x21784b(0x5e1)];_0x3cd575--,_0x3cd575=Math[_0x21784b(0x6f0)](_0x3cd575,0x0);const _0x862d87=VisuMZ[_0x21784b(0x938)](_0x3a4172[_0x21784b(0x2c9)]);for(const _0x193e02 of _0x862d87){if('Qvrlx'===_0x21784b(0x911))_0x114b03[_0x21784b(0x2f7)][_0x21784b(0x813)](_0x21784b(0x21a));else{if(!_0x193e02)continue;if(!_0x193e02[_0x21784b(0xc9f)]())continue;_0x193e02[_0x21784b(0xd78)](_0x3cd575);}}}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x4fb),_0x34c36b=>{const _0x171bb2=_0x4fbf70;if(!SceneManager[_0x171bb2(0x90d)]())return;if(!Imported[_0x171bb2(0x524)])return;VisuMZ[_0x171bb2(0x334)](_0x34c36b,_0x34c36b);const _0x584f21=$gameTemp[_0x171bb2(0xc52)](),_0x26ce5e=_0x34c36b[_0x171bb2(0xa78)];if(!_0x584f21)return;$gameScreen['setBattleZoom'](_0x34c36b[_0x171bb2(0x39f)],_0x34c36b['Duration'],_0x34c36b[_0x171bb2(0x483)]);if(_0x26ce5e)_0x584f21['setWaitMode'](_0x171bb2(0x8c6));}),PluginManager[_0x4fbf70(0xb86)](pluginData['name'],'ActSeq_Zoom_Reset',_0x4c64db=>{const _0xe05a0f=_0x4fbf70;if(!SceneManager[_0xe05a0f(0x90d)]())return;if(!Imported[_0xe05a0f(0x524)])return;VisuMZ[_0xe05a0f(0x334)](_0x4c64db,_0x4c64db);const _0x3ed414=$gameTemp[_0xe05a0f(0xc52)](),_0x468c92=_0x4c64db[_0xe05a0f(0xa78)];if(!_0x3ed414)return;$gameScreen[_0xe05a0f(0x218)](0x1,_0x4c64db['Duration'],_0x4c64db['EasingType']);if(_0x468c92)_0x3ed414[_0xe05a0f(0x645)]('battleZoom');}),PluginManager[_0x4fbf70(0xb86)](pluginData[_0x4fbf70(0x27a)],_0x4fbf70(0x1a2),_0x277618=>{const _0x582f0a=_0x4fbf70;if(!SceneManager[_0x582f0a(0x90d)]())return;if(!Imported[_0x582f0a(0x524)])return;const _0x16dc42=$gameTemp[_0x582f0a(0xc52)]();if(!_0x16dc42)return;_0x16dc42[_0x582f0a(0x645)](_0x582f0a(0x8c6));}),VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x4bd)]=Scene_Boot[_0x4fbf70(0x92c)]['onDatabaseLoaded'],Scene_Boot['prototype'][_0x4fbf70(0xce0)]=function(){const _0xe6c6b7=_0x4fbf70;this['process_VisuMZ_BattleCore_Failsafes'](),this[_0xe6c6b7(0x842)](),this[_0xe6c6b7(0xba1)](),this[_0xe6c6b7(0x355)](),VisuMZ[_0xe6c6b7(0xae2)]['Scene_Boot_onDatabaseLoaded']['call'](this),this[_0xe6c6b7(0x288)](),this[_0xe6c6b7(0xc0f)](),this[_0xe6c6b7(0x611)](),this[_0xe6c6b7(0x456)]();},Scene_Boot[_0x4fbf70(0x92c)][_0x4fbf70(0x288)]=function(){const _0x27f29c=_0x4fbf70;if(VisuMZ[_0x27f29c(0x775)])return;this[_0x27f29c(0x6a8)](),this['process_VisuMZ_BattleCore_TraitObject_Notetags'](),this[_0x27f29c(0x608)]();},Scene_Boot[_0x4fbf70(0x92c)]['process_VisuMZ_BattleCore_Failsafes']=function(){const _0x1fcc2b=_0x4fbf70,_0x553114=$dataSystem[_0x1fcc2b(0x51d)][_0x1fcc2b(0x9d2)];for(let _0x201add=0x0;_0x201add<_0x553114;_0x201add++){const _0x58f3c5=$dataSystem['attackMotions'][_0x201add];if(_0x58f3c5)continue;$dataSystem[_0x1fcc2b(0xb7f)][_0x201add]={'type':0x1,'weaponImageId':0x1};}},Scene_Boot[_0x4fbf70(0x92c)]['process_VisuMZ_BattleCore_PluginParams']=function(){const _0x56f838=_0x4fbf70,_0x1e338b=VisuMZ[_0x56f838(0xae2)]['Settings'];_0x1e338b[_0x56f838(0x835)][_0x56f838(0xa1a)]===undefined&&(_0x1e338b[_0x56f838(0x835)][_0x56f838(0xa1a)]=_0x56f838(0xd72));_0x1e338b[_0x56f838(0x410)][_0x56f838(0x8d8)]===undefined&&(_0x1e338b[_0x56f838(0x410)][_0x56f838(0x8d8)]=![]);_0x1e338b[_0x56f838(0x73f)][_0x56f838(0x8d8)]===undefined&&('TBhVP'===_0x56f838(0x6f5)?_0x222c2b[_0x56f838(0x6eb)]=![]:_0x1e338b[_0x56f838(0x73f)]['SmoothImage']=!![]);_0x1e338b[_0x56f838(0x410)]['PrioritySortActive']===undefined&&(_0x56f838(0x7f9)!==_0x56f838(0x473)?_0x1e338b[_0x56f838(0x410)][_0x56f838(0x8eb)]=![]:_0xe0bdb9[_0x56f838(0x25b)](_0x35d72c(_0x1aa528['$1'])));if(_0x1e338b[_0x56f838(0x410)][_0x56f838(0xc9d)]===undefined){if(_0x56f838(0x9f0)!=='bPzww')return _0x3de042[_0x56f838(0xae2)]['Settings'][_0x56f838(0x410)]['Shadow'];else _0x1e338b['Actor']['PrioritySortActors']=!![];}},VisuMZ[_0x4fbf70(0xb48)]={},Scene_Boot['prototype'][_0x4fbf70(0xba1)]=function(){const _0x267883=_0x4fbf70;for(const _0x3b37bc of VisuMZ[_0x267883(0xae2)][_0x267883(0x837)][_0x267883(0x835)][_0x267883(0x1af)]){if(_0x267883(0xbfe)==='LhSSK'){if(!_0x3b37bc)continue;const _0x49deaf=_0x3b37bc[_0x267883(0x31a)][_0x267883(0x7a4)]()[_0x267883(0xcda)]();VisuMZ[_0x267883(0xb48)][_0x49deaf]=_0x3b37bc;}else _0xfd1d94[_0x267883(0x92c)][_0x267883(0xa84)]['call'](this);}},VisuMZ[_0x4fbf70(0xae2)]['RegExp']={},Scene_Boot[_0x4fbf70(0x92c)][_0x4fbf70(0x355)]=function(){const _0xf7277c=_0x4fbf70,_0x22e789=VisuMZ[_0xf7277c(0xae2)][_0xf7277c(0xca9)],_0x135eb5='<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>',_0x2330fe=[[_0xf7277c(0x203),_0xf7277c(0x3d0)],['Post',_0xf7277c(0xac7)]],_0x12e024=[[_0xf7277c(0xcae),_0xf7277c(0x4e7)],[_0xf7277c(0x52f),'JS\x20%1DAMAGE\x20%2']],_0x2d761e=[['',''],[_0xf7277c(0xbfc),_0xf7277c(0xc4f)],[_0xf7277c(0x3ac),_0xf7277c(0x5b5)]];for(const _0x21620a of _0x12e024){for(const _0x909428 of _0x2d761e){if('ZKZzn'==='ZKZzn')for(const _0x122d22 of _0x2330fe){const _0x338e11=_0x21620a[0x0][_0xf7277c(0x946)](_0x122d22[0x0],_0x909428[0x0]),_0x2b356e=_0x21620a[0x1][_0xf7277c(0x946)](_0x122d22[0x1],_0x909428[0x1])[_0xf7277c(0xcda)](),_0x1bd44c=new RegExp(_0x135eb5[_0xf7277c(0x946)](_0x2b356e),'i');_0x22e789[_0x338e11]=_0x1bd44c;}else{_0x50e24e[_0xf7277c(0x92c)][_0xf7277c(0x377)][_0xf7277c(0xc4a)](this,_0x47d2a3);if(this[_0xf7277c(0x42f)]())this[_0xf7277c(0x396)](_0x3e777f);}}}const _0x50efa0=[[_0xf7277c(0x8ab),_0xf7277c(0xbf5)],[_0xf7277c(0xb1a),_0xf7277c(0x28b)]];for(const _0x19cbdb of _0x50efa0){for(const _0x33b087 of _0x2330fe){const _0x5aaace=_0x19cbdb[0x0]['format'](_0x33b087[0x0]),_0x24ee26=_0x19cbdb[0x1][_0xf7277c(0x946)](_0x33b087[0x1]),_0x283286=new RegExp(_0x135eb5[_0xf7277c(0x946)](_0x24ee26),'i');_0x22e789[_0x5aaace]=_0x283286;}}const _0x449539=[[_0xf7277c(0xb41),_0xf7277c(0x896)],[_0xf7277c(0x41f),_0xf7277c(0x34d)],[_0xf7277c(0xc9c),'JS\x20BATTLE\x20VICTORY'],[_0xf7277c(0x68f),'JS\x20BATTLE\x20DEFEAT'],['EscapeSuccessJS',_0xf7277c(0xc22)],[_0xf7277c(0x74a),_0xf7277c(0x9e0)],['%1StartTurnJS',_0xf7277c(0x25a)],[_0xf7277c(0x555),_0xf7277c(0x6e5)],['%1RegenerateJS',_0xf7277c(0x74d)]];for(const _0x5c2ef2 of _0x449539){for(const _0x870e93 of _0x2330fe){if(_0xf7277c(0x330)!==_0xf7277c(0x330))_0x5fe66b['BattleCore']['Sprite_Actor_updateShadow'][_0xf7277c(0xc4a)](this),this['updateShadowBattleCore']();else{const _0x35c105=_0x5c2ef2[0x0]['format'](_0x870e93[0x0]),_0x3ce2fa=_0x5c2ef2[0x1][_0xf7277c(0x946)](_0x870e93[0x1]),_0x14cd6b=new RegExp(_0x135eb5[_0xf7277c(0x946)](_0x3ce2fa),'i');_0x22e789[_0x35c105]=_0x14cd6b;}}}},Scene_Boot['prototype']['process_VisuMZ_BattleCore_Action_Notetags']=function(){const _0x2d78df=_0x4fbf70,_0x1f1f58=$dataSkills[_0x2d78df(0xc9b)]($dataItems);for(const _0x4b34df of _0x1f1f58){if(!_0x4b34df)continue;VisuMZ['BattleCore'][_0x2d78df(0x56a)](_0x4b34df);}},Scene_Boot[_0x4fbf70(0x92c)][_0x4fbf70(0x2ae)]=function(){const _0x27c5df=_0x4fbf70,_0xdfa019=$dataActors[_0x27c5df(0xc9b)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x395004 of _0xdfa019){if('rjxrW'!==_0x27c5df(0x535)){_0x2c3b0b['BattleCore']['Window_BattleActor_show']['call'](this);const _0x688524=_0x4bb122['inputtingAction']();if(_0x688524){const _0x4ed9e0=_0x1a792a[_0x27c5df(0x1c3)]();_0x688524[_0x27c5df(0x9dd)]()&&_0x4ed9e0[_0x27c5df(0x9d2)]>0x1&&this[_0x27c5df(0x4c8)]('pagedown',this[_0x27c5df(0x84f)][_0x27c5df(0x8ff)](this));}}else{if(!_0x395004)continue;VisuMZ[_0x27c5df(0xae2)][_0x27c5df(0x981)](_0x395004);}}},Scene_Boot['prototype'][_0x4fbf70(0xc0f)]=function(){const _0x435dbc=_0x4fbf70,_0x3dbd68=VisuMZ[_0x435dbc(0xae2)][_0x435dbc(0x837)][_0x435dbc(0x73d)][_0x435dbc(0x88a)],_0x2528dd=[];for(const _0x51fa3f of _0x3dbd68){const _0x5693a9=$dataTroops[_0x51fa3f];if(_0x5693a9)_0x2528dd[_0x435dbc(0x25b)](JsonEx[_0x435dbc(0xca7)](_0x5693a9));}for(const _0x62d994 of $dataTroops){if(!_0x62d994)continue;for(const _0x4df741 of _0x2528dd){if(_0x4df741['id']===_0x62d994['id'])continue;_0x62d994[_0x435dbc(0xa81)]=_0x62d994[_0x435dbc(0xa81)][_0x435dbc(0xc9b)](_0x4df741[_0x435dbc(0xa81)]);}}},Scene_Boot[_0x4fbf70(0x92c)][_0x4fbf70(0x611)]=function(){const _0x100cb2=_0x4fbf70,_0x58e3ec=VisuMZ[_0x100cb2(0xae2)]['Settings'][_0x100cb2(0x73d)];if(_0x58e3ec[_0x100cb2(0xa5c)]>0x0&&$dataCommonEvents[_0x58e3ec[_0x100cb2(0xa5c)]]){const _0x3aac1f=$dataCommonEvents[_0x58e3ec[_0x100cb2(0xa5c)]],_0xe857=_0x3aac1f[_0x100cb2(0xa31)][_0x100cb2(0x9d2)]-0x2,_0x54a795=_0x3aac1f['list'][_0xe857];if(_0x54a795&&_0x54a795[_0x100cb2(0x503)]!==0xe6){const _0x3917b6={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x79c62a=_0x3aac1f[_0x100cb2(0xa31)][_0x100cb2(0xc6f)]();_0x3aac1f[_0x100cb2(0xa31)][_0x100cb2(0x481)](_0x3917b6),_0x3aac1f['list']['unshift'](_0x79c62a);}}},Scene_Boot['prototype'][_0x4fbf70(0x456)]=function(){const _0x2ea6a5=_0x4fbf70;VisuMZ['BattleCore'][_0x2ea6a5(0x1f0)](),VisuMZ[_0x2ea6a5(0xae2)][_0x2ea6a5(0x51b)]($dataSkills),VisuMZ[_0x2ea6a5(0xae2)][_0x2ea6a5(0x51b)]($dataItems);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x1f0)]=function(){const _0x3644e1=_0x4fbf70;VisuMZ[_0x3644e1(0xae2)]['_commonEventKey']={};for(const _0x20805c of $dataCommonEvents){if('ADnUj'!=='QNNuU'){if(!_0x20805c)continue;if(_0x20805c[_0x3644e1(0x27a)][_0x3644e1(0xc4b)](/\[(.*)\]/i)){if('XIYME'!==_0x3644e1(0x35c)){const _0x5f214b=[];for(const _0x3a0947 of this[_0x3644e1(0xbb3)]()['actions']){const _0x46c2ae=_0x3fddc5[_0x3a0947[_0x3644e1(0x532)]];if(_0x46c2ae&&!_0x5f214b[_0x3644e1(0x6e3)](_0x46c2ae))_0x5f214b[_0x3644e1(0x25b)](_0x46c2ae);}return _0x5f214b;}else{let _0x3be653=String(RegExp['$1'])[_0x3644e1(0xb7c)](/,/g,'')[_0x3644e1(0x7a4)]()[_0x3644e1(0xcda)]();VisuMZ[_0x3644e1(0xae2)]['_commonEventKey'][_0x3be653]=_0x20805c['id'];}}}else this[_0x3644e1(0x1f4)](_0x3644e1(0x73a));}},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x51b)]=function(_0x1c486b){const _0x5c986a=_0x4fbf70;for(const _0x485917 of _0x1c486b){if(!_0x485917)continue;VisuMZ[_0x5c986a(0xae2)][_0x5c986a(0x8b4)](_0x485917);}},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x8b4)]=function(_0x187ba5){const _0x41ca6e=_0x4fbf70;if(!_0x187ba5)return;if(!_0x187ba5[_0x41ca6e(0xab8)])return;VisuMZ[_0x41ca6e(0xae2)][_0x41ca6e(0x425)]=VisuMZ[_0x41ca6e(0xae2)][_0x41ca6e(0x425)]||{};const _0x3fba1e=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x308077=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x5d17ce=[];const _0x29eea9=_0x187ba5['note'][_0x41ca6e(0xc4b)](_0x3fba1e);if(_0x29eea9){for(const _0x2599aa of _0x29eea9){_0x2599aa[_0x41ca6e(0xc4b)](_0x3fba1e);const _0x2fff6e=String(RegExp['$1'])['split'](',')[_0x41ca6e(0x990)](_0x596331=>String(_0x596331)['toUpperCase']()[_0x41ca6e(0xcda)]());_0x5d17ce=_0x5d17ce[_0x41ca6e(0xc9b)](_0x2fff6e);}!_0x187ba5[_0x41ca6e(0x9c1)][_0x41ca6e(0xc4b)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x187ba5['note']+=_0x41ca6e(0x7ef));;}if(_0x187ba5[_0x41ca6e(0x9c1)]['match'](_0x308077)){if(_0x41ca6e(0xafe)===_0x41ca6e(0xd03)){this[_0x41ca6e(0x29a)][_0x41ca6e(0x8a6)][_0x41ca6e(0x72f)](this[_0x41ca6e(0x789)]['bind'](this)),this[_0x41ca6e(0x6c6)]();if(!this['_battlerContainer'])return;this['_battlerContainer'][_0x41ca6e(0x853)]=this[_0x41ca6e(0x8f4)]();}else{const _0x45c03b=String(RegExp['$1'])[_0x41ca6e(0x94a)](/[\r\n]+/)['map'](_0x1d821b=>String(_0x1d821b)['toUpperCase']()[_0x41ca6e(0xcda)]());_0x5d17ce=_0x5d17ce[_0x41ca6e(0xc9b)](_0x45c03b);if(!_0x187ba5[_0x41ca6e(0x9c1)][_0x41ca6e(0xc4b)](/<CUSTOM ACTION SEQUENCE>/i)){if(_0x41ca6e(0xa28)===_0x41ca6e(0xa28))_0x187ba5[_0x41ca6e(0x9c1)]+=_0x41ca6e(0x7ef);else{if(_0x4210de[_0x41ca6e(0xad8)]()[_0x41ca6e(0x770)]>0x0)return!![];this['_waitMode']='';}};}}for(const _0x32ccaf of _0x5d17ce){if(VisuMZ[_0x41ca6e(0xae2)][_0x41ca6e(0x425)][_0x32ccaf]){const _0x2fead7=VisuMZ[_0x41ca6e(0xae2)][_0x41ca6e(0x425)][_0x32ccaf],_0x476552={'code':0x2c,'dataId':_0x2fead7,'value1':0x1,'value2':0x0};_0x187ba5['effects'][_0x41ca6e(0x25b)](_0x476552);}}},Scene_Boot[_0x4fbf70(0x92c)]['process_VisuMZ_BattleCore_jsFunctions']=function(){const _0x53097b=_0x4fbf70,_0x15a314=$dataSkills['concat']($dataItems);for(const _0x4496bb of _0x15a314){if(!_0x4496bb)continue;VisuMZ[_0x53097b(0xae2)]['Parse_Notetags_Targets'](_0x4496bb);}},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xd7a)]=VisuMZ['ParseActorNotetags'],VisuMZ['ParseActorNotetags']=function(_0x343915){const _0xede59d=_0x4fbf70;VisuMZ['BattleCore']['ParseActorNotetags']&&VisuMZ['BattleCore']['ParseActorNotetags'][_0xede59d(0xc4a)](this,_0x343915),VisuMZ['BattleCore'][_0xede59d(0x981)](_0x343915);},VisuMZ[_0x4fbf70(0xae2)]['ParseClassNotetags']=VisuMZ[_0x4fbf70(0x61a)],VisuMZ[_0x4fbf70(0x61a)]=function(_0x5b6c59){const _0x54960d=_0x4fbf70;VisuMZ[_0x54960d(0xae2)][_0x54960d(0x61a)]&&VisuMZ[_0x54960d(0xae2)][_0x54960d(0x61a)][_0x54960d(0xc4a)](this,_0x5b6c59),VisuMZ['BattleCore'][_0x54960d(0x981)](_0x5b6c59);},VisuMZ['BattleCore']['ParseSkillNotetags']=VisuMZ['ParseSkillNotetags'],VisuMZ[_0x4fbf70(0x831)]=function(_0x51d4a1){const _0x38206d=_0x4fbf70;VisuMZ[_0x38206d(0xae2)][_0x38206d(0x831)]&&VisuMZ[_0x38206d(0xae2)][_0x38206d(0x831)][_0x38206d(0xc4a)](this,_0x51d4a1),VisuMZ[_0x38206d(0xae2)][_0x38206d(0x56a)](_0x51d4a1),VisuMZ[_0x38206d(0xae2)][_0x38206d(0x684)](_0x51d4a1);},VisuMZ['BattleCore'][_0x4fbf70(0xd01)]=VisuMZ['ParseItemNotetags'],VisuMZ[_0x4fbf70(0xd01)]=function(_0x3e26a8){const _0x483699=_0x4fbf70;if(VisuMZ[_0x483699(0xae2)]['ParseItemNotetags']){if(_0x483699(0x950)===_0x483699(0x378)){const _0x35aff3=new _0x3c512c();_0x35aff3[_0x483699(0x597)]=_0x87ceca[_0x483699(0x5b7)](_0x4c82bb[_0x483699(0xacb)]),_0x35aff3['x']=_0x41b59b[_0x483699(0x648)]||0x0,_0x35aff3['y']=_0x196060['StatusWindowAttachmentFrontOffsetY']||0x0,this[_0x483699(0x52a)](_0x35aff3),this[_0x483699(0x22f)]=_0x35aff3;}else VisuMZ[_0x483699(0xae2)][_0x483699(0xd01)][_0x483699(0xc4a)](this,_0x3e26a8);}VisuMZ[_0x483699(0xae2)][_0x483699(0x56a)](_0x3e26a8),VisuMZ[_0x483699(0xae2)][_0x483699(0x684)](_0x3e26a8);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x65a)]=VisuMZ[_0x4fbf70(0x65a)],VisuMZ[_0x4fbf70(0x65a)]=function(_0x5c7576){const _0x4f4190=_0x4fbf70;VisuMZ[_0x4f4190(0xae2)][_0x4f4190(0x65a)]&&VisuMZ[_0x4f4190(0xae2)][_0x4f4190(0x65a)][_0x4f4190(0xc4a)](this,_0x5c7576),VisuMZ[_0x4f4190(0xae2)][_0x4f4190(0x981)](_0x5c7576);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x53b)]=VisuMZ[_0x4fbf70(0x53b)],VisuMZ[_0x4fbf70(0x53b)]=function(_0x2970f2){const _0x278598=_0x4fbf70;VisuMZ['BattleCore']['ParseArmorNotetags']&&VisuMZ['BattleCore'][_0x278598(0x53b)][_0x278598(0xc4a)](this,_0x2970f2),VisuMZ['BattleCore'][_0x278598(0x981)](_0x2970f2);},VisuMZ[_0x4fbf70(0xae2)]['ParseEnemyNotetags']=VisuMZ[_0x4fbf70(0x7a9)],VisuMZ[_0x4fbf70(0x7a9)]=function(_0x5441dc){const _0x14ae6b=_0x4fbf70;VisuMZ[_0x14ae6b(0xae2)][_0x14ae6b(0x7a9)]&&VisuMZ[_0x14ae6b(0xae2)][_0x14ae6b(0x7a9)][_0x14ae6b(0xc4a)](this,_0x5441dc),VisuMZ[_0x14ae6b(0xae2)][_0x14ae6b(0x981)](_0x5441dc);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x595)]=VisuMZ[_0x4fbf70(0x595)],VisuMZ['ParseStateNotetags']=function(_0x3520fd){const _0xc335f4=_0x4fbf70;VisuMZ['BattleCore']['ParseStateNotetags']&&VisuMZ[_0xc335f4(0xae2)][_0xc335f4(0x595)][_0xc335f4(0xc4a)](this,_0x3520fd),VisuMZ[_0xc335f4(0xae2)][_0xc335f4(0x981)](_0x3520fd);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x56a)]=function(_0x319dc2){const _0x6ffdf9=_0x4fbf70,_0x45b922=[_0x6ffdf9(0xd2b),'PostApplyJS',_0x6ffdf9(0x428),_0x6ffdf9(0xc6d),'PreStartActionJS',_0x6ffdf9(0x740),_0x6ffdf9(0x207),_0x6ffdf9(0x751)];for(const _0x4f2cb0 of _0x45b922){VisuMZ[_0x6ffdf9(0xae2)][_0x6ffdf9(0x324)](_0x319dc2,_0x4f2cb0);}const _0x2d306e=_0x319dc2[_0x6ffdf9(0x9c1)];if(_0x2d306e[_0x6ffdf9(0xc4b)](/<ALWAYS CRITICAL/i)){if(_0x6ffdf9(0x328)!==_0x6ffdf9(0x328)){_0x5d2f63[_0x6ffdf9(0x92c)][_0x6ffdf9(0x76b)][_0x6ffdf9(0xc4a)](this,_0x54375a),_0x4fce90['select'](this['enemy']()),_0x47169f[_0x6ffdf9(0x76b)](this[_0x6ffdf9(0xbb3)]());if(!this[_0x6ffdf9(0xbb3)]())return;if(this['meetsSelectFrontviewActorConditions']()){const _0x32e310=_0x321174[_0x6ffdf9(0x32c)][_0x6ffdf9(0xa2c)];this[_0x6ffdf9(0xbb3)]()['isActor']()?_0x32e310['select'](this[_0x6ffdf9(0xbb3)]()[_0x6ffdf9(0x331)]()):_0x32e310[_0x6ffdf9(0x3fe)]();}}else _0x319dc2[_0x6ffdf9(0x36f)][_0x6ffdf9(0x881)]=!![];}_0x2d306e['match'](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x319dc2[_0x6ffdf9(0x552)]=Math[_0x6ffdf9(0x6f0)](0x1,Number(RegExp['$1'])));if(_0x2d306e['match'](/<TARGET:[ ](.*)>/i)){if('oshIN'!=='oshIN'){if(!this[_0x6ffdf9(0xbb3)]())return;_0x1e19f5['isBattleFlipped']()?this['x']=_0x32b02b['boxWidth']-this['enemy']()[_0x6ffdf9(0xb81)]()[_0x6ffdf9(0xd6b)]:this['x']=this['enemy']()[_0x6ffdf9(0xb81)]()[_0x6ffdf9(0xd6b)];this['x']-=_0x33b78e[_0x6ffdf9(0xbec)](this[_0x6ffdf9(0x606)]/0x2),this['y']=this[_0x6ffdf9(0xbb3)]()[_0x6ffdf9(0xb81)]()[_0x6ffdf9(0x571)]-_0x37e29e[_0x6ffdf9(0xbec)](this[_0x6ffdf9(0x445)]()*1.5);const _0x1b5e1a=_0x505223[_0x6ffdf9(0xae2)][_0x6ffdf9(0x837)][_0x6ffdf9(0x73f)];this['x']+=_0x1b5e1a[_0x6ffdf9(0x22a)]||0x0,this['y']+=_0x1b5e1a[_0x6ffdf9(0x1e1)]||0x0;}else _0x319dc2[_0x6ffdf9(0x302)]=String(RegExp['$1'])[_0x6ffdf9(0x7a4)]()['trim']();}},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x981)]=function(_0x49c130){const _0x4c7f65=_0x4fbf70,_0x1812f7=[_0x4c7f65(0x703),_0x4c7f65(0x735),_0x4c7f65(0x502),_0x4c7f65(0x243),_0x4c7f65(0x7a7),'PostApplyAsTargetJS',_0x4c7f65(0xd2f),_0x4c7f65(0x8b0),_0x4c7f65(0x681),_0x4c7f65(0x740),_0x4c7f65(0x207),_0x4c7f65(0x751),_0x4c7f65(0x9f9),_0x4c7f65(0xaec),_0x4c7f65(0x472),_0x4c7f65(0xc31),'BattleVictoryJS',_0x4c7f65(0x68f),_0x4c7f65(0x563),_0x4c7f65(0x74a),_0x4c7f65(0x7f7),_0x4c7f65(0x43b),'PreEndTurnJS','PostEndTurnJS',_0x4c7f65(0x489),_0x4c7f65(0x666)];for(const _0x4876bf of _0x1812f7){VisuMZ[_0x4c7f65(0xae2)][_0x4c7f65(0x324)](_0x49c130,_0x4876bf);}},VisuMZ['BattleCore']['Parse_Notetags_Targets']=function(_0x260041){const _0x44229a=_0x4fbf70,_0xbb06d7=_0x260041['note'];if(_0xbb06d7[_0x44229a(0xc4b)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x2c9dfb=String(RegExp['$1']),_0x22ff41=VisuMZ['BattleCore']['createKeyJS'](_0x260041,_0x44229a(0x2c9));VisuMZ[_0x44229a(0xae2)][_0x44229a(0x2bd)](_0x2c9dfb,_0x22ff41);}if(_0xbb06d7[_0x44229a(0xc4b)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){if(_0x44229a(0x86c)!==_0x44229a(0x840)){const _0x598d55=String(RegExp['$1']),_0x398ce6=VisuMZ[_0x44229a(0xae2)][_0x44229a(0xd27)](_0x260041,_0x44229a(0x500));VisuMZ[_0x44229a(0xae2)][_0x44229a(0x5ef)](_0x598d55,_0x398ce6);}else{if(this[_0x44229a(0x461)]===_0x38bc37)this['initBattlePortrait']();this['_battlePortrait']=_0x7ea35e;if(_0x97c6d9[_0x44229a(0x90d)]()&&_0x5e0d4a[_0x44229a(0x914)]()[_0x44229a(0x6e3)](this)){const _0x347b11=_0x26a3be['_scene'][_0x44229a(0x9e4)];_0x347b11&&_0x347b11[_0x44229a(0x68d)](this);}}}},VisuMZ[_0x4fbf70(0xae2)]['JS']={},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x324)]=function(_0x9e744c,_0x7662ee){const _0x4a3c7d=_0x4fbf70,_0x25d6df=_0x9e744c[_0x4a3c7d(0x9c1)];if(_0x25d6df[_0x4a3c7d(0xc4b)](VisuMZ[_0x4a3c7d(0xae2)]['RegExp'][_0x7662ee])){const _0x398b29=RegExp['$1'],_0x1630fc=_0x4a3c7d(0x197)[_0x4a3c7d(0x946)](_0x398b29),_0x2b4edc=VisuMZ['BattleCore'][_0x4a3c7d(0xd27)](_0x9e744c,_0x7662ee);VisuMZ[_0x4a3c7d(0xae2)]['JS'][_0x2b4edc]=new Function(_0x1630fc);}},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xd27)]=function(_0x37ee89,_0x188dc1){const _0x186ba4=_0x4fbf70;if(VisuMZ['createKeyJS'])return VisuMZ[_0x186ba4(0xd27)](_0x37ee89,_0x188dc1);let _0x3ddb26='';if($dataActors[_0x186ba4(0x6e3)](_0x37ee89))_0x3ddb26=_0x186ba4(0xb5f)[_0x186ba4(0x946)](_0x37ee89['id'],_0x188dc1);if($dataClasses[_0x186ba4(0x6e3)](_0x37ee89))_0x3ddb26='Class-%1-%2'[_0x186ba4(0x946)](_0x37ee89['id'],_0x188dc1);if($dataSkills[_0x186ba4(0x6e3)](_0x37ee89))_0x3ddb26=_0x186ba4(0x8a5)[_0x186ba4(0x946)](_0x37ee89['id'],_0x188dc1);if($dataItems[_0x186ba4(0x6e3)](_0x37ee89))_0x3ddb26=_0x186ba4(0xb46)[_0x186ba4(0x946)](_0x37ee89['id'],_0x188dc1);if($dataWeapons[_0x186ba4(0x6e3)](_0x37ee89))_0x3ddb26='Weapon-%1-%2'[_0x186ba4(0x946)](_0x37ee89['id'],_0x188dc1);if($dataArmors[_0x186ba4(0x6e3)](_0x37ee89))_0x3ddb26='Armor-%1-%2'[_0x186ba4(0x946)](_0x37ee89['id'],_0x188dc1);if($dataEnemies[_0x186ba4(0x6e3)](_0x37ee89))_0x3ddb26=_0x186ba4(0x44d)['format'](_0x37ee89['id'],_0x188dc1);if($dataStates['includes'](_0x37ee89))_0x3ddb26=_0x186ba4(0xab3)[_0x186ba4(0x946)](_0x37ee89['id'],_0x188dc1);return _0x3ddb26;},VisuMZ[_0x4fbf70(0xae2)]['createTargetsJS']=function(_0x24d7a7,_0x2b30f6){const _0x693219=_0x4fbf70,_0x192448=_0x693219(0x385)[_0x693219(0x946)](_0x24d7a7);VisuMZ[_0x693219(0xae2)]['JS'][_0x2b30f6]=new Function(_0x192448);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x5ef)]=function(_0x6b405a,_0x314a3c){const _0x2cdc14=_0x4fbf70,_0x2b2061=_0x2cdc14(0x57f)[_0x2cdc14(0x946)](_0x6b405a);VisuMZ[_0x2cdc14(0xae2)]['JS'][_0x314a3c]=new Function(_0x2b2061);},TextManager['autoBattle']=VisuMZ['BattleCore'][_0x4fbf70(0x837)][_0x4fbf70(0xbd7)][_0x4fbf70(0x6de)],TextManager[_0x4fbf70(0xc20)]=VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x837)][_0x4fbf70(0x5f2)][_0x4fbf70(0x8d0)],TextManager[_0x4fbf70(0xbeb)]=VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x837)]['AutoBattle'][_0x4fbf70(0x7b3)],TextManager[_0x4fbf70(0xd3a)]=VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x837)][_0x4fbf70(0x2c8)][_0x4fbf70(0x31a)],ColorManager[_0x4fbf70(0xa73)]=function(_0x33a26e){const _0x1d52f2=_0x4fbf70;return _0x33a26e=String(_0x33a26e),_0x33a26e[_0x1d52f2(0xc4b)](/#(.*)/i)?'#%1'[_0x1d52f2(0x946)](String(RegExp['$1'])):this[_0x1d52f2(0xc46)](Number(_0x33a26e));},DataManager[_0x4fbf70(0x6fe)]=function(_0x5dcafb){const _0xafacd6=_0x4fbf70;if(_0x5dcafb[_0xafacd6(0x9c1)][_0xafacd6(0xc4b)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x2b3a6e=String(RegExp['$1'])[_0xafacd6(0x7a4)]()[_0xafacd6(0xcda)]();if(_0x2b3a6e===_0xafacd6(0xa49))return _0xafacd6(0xa49);if(VisuMZ['DamageStyles'][_0x2b3a6e])return _0x2b3a6e;}const _0x3358dd=VisuMZ['BattleCore'][_0xafacd6(0x837)]['Damage'][_0xafacd6(0x487)]['toUpperCase']()[_0xafacd6(0xcda)]();if(VisuMZ[_0xafacd6(0xb48)][_0x3358dd])return _0x3358dd;return'MANUAL';},DataManager['getStypeIdWithName']=function(_0x16696e){const _0x5bf974=_0x4fbf70;_0x16696e=_0x16696e['toUpperCase']()[_0x5bf974(0xcda)](),this[_0x5bf974(0xa9d)]=this[_0x5bf974(0xa9d)]||{};if(this[_0x5bf974(0xa9d)][_0x16696e])return this['_stypeIDs'][_0x16696e];for(let _0x290353=0x1;_0x290353<0x64;_0x290353++){if(_0x5bf974(0x35b)===_0x5bf974(0x35b)){if(!$dataSystem['skillTypes'][_0x290353])continue;let _0x3b98bb=$dataSystem['skillTypes'][_0x290353][_0x5bf974(0x7a4)]()['trim']();_0x3b98bb=_0x3b98bb[_0x5bf974(0xb7c)](/\x1I\[(\d+)\]/gi,''),_0x3b98bb=_0x3b98bb[_0x5bf974(0xb7c)](/\\I\[(\d+)\]/gi,''),this[_0x5bf974(0xa9d)][_0x3b98bb]=_0x290353;}else _0x4afaca['BattleCore']['Scene_Battle_stop'][_0x5bf974(0xc4a)](this);}return this[_0x5bf974(0xa9d)][_0x16696e]||0x0;},DataManager[_0x4fbf70(0xa8c)]=function(_0xac5e76){const _0x5709f8=_0x4fbf70;_0xac5e76=_0xac5e76[_0x5709f8(0x7a4)]()['trim'](),this[_0x5709f8(0x1b7)]=this[_0x5709f8(0x1b7)]||{};if(this[_0x5709f8(0x1b7)][_0xac5e76])return this[_0x5709f8(0x1b7)][_0xac5e76];for(const _0x28c8a0 of $dataSkills){if(!_0x28c8a0)continue;this[_0x5709f8(0x1b7)][_0x28c8a0[_0x5709f8(0x27a)][_0x5709f8(0x7a4)]()[_0x5709f8(0xcda)]()]=_0x28c8a0['id'];}return this[_0x5709f8(0x1b7)][_0xac5e76]||0x0;},DataManager[_0x4fbf70(0xc7b)]=function(_0x479643){const _0x3f8ba6=_0x4fbf70;_0x479643=_0x479643[_0x3f8ba6(0x7a4)]()['trim'](),this[_0x3f8ba6(0x199)]=this[_0x3f8ba6(0x199)]||{};if(this['_enemyIDs'][_0x479643])return this['_enemyIDs'][_0x479643];for(const _0x254c35 of $dataEnemies){if(!_0x254c35)continue;this['_enemyIDs'][_0x254c35['name']['toUpperCase']()[_0x3f8ba6(0xcda)]()]=_0x254c35['id'];}return this[_0x3f8ba6(0x199)][_0x479643]||0x0;},DataManager[_0x4fbf70(0x3f9)]=function(_0x128dee){const _0xd162a1=_0x4fbf70;_0x128dee=_0x128dee[_0xd162a1(0x7a4)]()[_0xd162a1(0xcda)](),this[_0xd162a1(0xaa1)]=this[_0xd162a1(0xaa1)]||{};if(this[_0xd162a1(0xaa1)][_0x128dee])return this[_0xd162a1(0xaa1)][_0x128dee];for(let _0x438b5c=0x1;_0x438b5c<0x64;_0x438b5c++){if(!$dataSystem[_0xd162a1(0x51d)][_0x438b5c])continue;let _0x4cbd56=$dataSystem[_0xd162a1(0x51d)][_0x438b5c][_0xd162a1(0x7a4)]()[_0xd162a1(0xcda)]();_0x4cbd56=_0x4cbd56[_0xd162a1(0xb7c)](/\x1I\[(\d+)\]/gi,''),_0x4cbd56=_0x4cbd56['replace'](/\\I\[(\d+)\]/gi,''),this['_wtypeIDs'][_0x4cbd56]=_0x438b5c;}return this['_wtypeIDs'][_0xd162a1(0x934)]=0x0,this[_0xd162a1(0xaa1)][_0x128dee]||0x0;},DataManager[_0x4fbf70(0x3d7)]=function(_0x5613a6){const _0x89ca2d=_0x4fbf70,_0x54a9bd='\x5cI[%1]%2';let _0x1028fa=_0x5613a6[_0x89ca2d(0x414)],_0xfbf67e=_0x5613a6[_0x89ca2d(0x27a)];const _0x37fa99=_0x5613a6['note'];if(_0x37fa99[_0x89ca2d(0xc4b)](/<DISPLAY ICON: (\d+)>/i)){if(_0x89ca2d(0x282)!==_0x89ca2d(0x768))_0x1028fa=Number(RegExp['$1']);else{const _0x35b92=this['weapons'](),_0x52f764=_0x35b92[0x0]?_0x35b92[0x0][_0x89ca2d(0x621)]:0x0,_0xd49ff8=_0x309100['attackMotions'][_0x52f764];_0xd49ff8&&this['startWeaponAnimation'](_0xd49ff8['weaponImageId']);}}return _0x37fa99['match'](/<DISPLAY TEXT: (.*)>/i)&&(_0x89ca2d(0xc3d)===_0x89ca2d(0xc3d)?_0xfbf67e=String(RegExp['$1']):(this[_0x89ca2d(0x8aa)]=new _0x56da21(),this[_0x89ca2d(0x52a)](this[_0x89ca2d(0x8aa)]))),_0x54a9bd['format'](_0x1028fa,_0xfbf67e);},DataManager[_0x4fbf70(0xafa)]=function(_0x2ba39d){const _0x3caade=_0x4fbf70;return _0x2ba39d[_0x3caade(0x9c1)]['match'](/<COMMAND TEXT: (.*)>/i)?'LouRI'===_0x3caade(0x82e)?_0x11152b[_0x3caade(0x92c)]['isMoving'][_0x3caade(0xc4a)](this):String(RegExp['$1']):_0x2ba39d['name'];},DataManager[_0x4fbf70(0x885)]=function(_0x361cd1){const _0x177606=_0x4fbf70;return _0x361cd1['note']['match'](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x361cd1[_0x177606(0x414)];},DataManager[_0x4fbf70(0xcf6)]=function(_0x3a2dc9){const _0x1b0c47=_0x4fbf70,_0x30aea8=$dataEnemies[_0x3a2dc9];if(_0x30aea8){if(_0x30aea8[_0x1b0c47(0x9c1)][_0x1b0c47(0xc4b)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x5c4385=String(RegExp['$1'])[_0x1b0c47(0x94a)](/[\r\n]+/)[_0x1b0c47(0x5d9)](''),_0xbde001=this[_0x1b0c47(0x794)](_0x5c4385);_0x3a2dc9=this[_0x1b0c47(0xc7b)](_0xbde001)||_0x3a2dc9,_0x3a2dc9=DataManager[_0x1b0c47(0xcf6)](_0x3a2dc9);}}return _0x3a2dc9;},DataManager[_0x4fbf70(0x794)]=function(_0x1a2e38){const _0x35ced8=_0x4fbf70;let _0x14e522=0x0;const _0x21e2a0={};for(const _0x253d70 of _0x1a2e38){if(_0x253d70['match'](/(.*):[ ](\d+)/i)){const _0x4c0294=String(RegExp['$1'])['trim'](),_0x58171b=Number(RegExp['$2']);_0x21e2a0[_0x4c0294]=_0x58171b,_0x14e522+=_0x58171b;}else{if(_0x253d70[_0x35ced8(0xc4b)](/(.*):[ ](\d+\.?\d+)/i)){const _0x316576=String(RegExp['$1'])[_0x35ced8(0xcda)](),_0x4a1c96=Number(RegExp['$2']);_0x21e2a0[_0x316576]=_0x4a1c96,_0x14e522+=_0x4a1c96;}else _0x253d70!==''&&(_0x21e2a0[_0x253d70]=0x1,_0x14e522++);}}if(_0x14e522<=0x0)return'';let _0x4c25ae=Math[_0x35ced8(0x69a)]()*_0x14e522;for(const _0x4d307d in _0x21e2a0){if(_0x35ced8(0x77a)!==_0x35ced8(0x77a))return _0x12ef12[_0x35ced8(0x98e)]();else{_0x4c25ae-=_0x21e2a0[_0x4d307d];if(_0x4c25ae<=0x0)return _0x4d307d;}}return'';},DataManager[_0x4fbf70(0x22e)]=function(_0x1b6e26){const _0x732797=_0x4fbf70;if(!_0x1b6e26)return![];if(!VisuMZ[_0x732797(0xae2)]['Settings'][_0x732797(0xc03)][_0x732797(0x6fa)])return![];if(_0x1b6e26[_0x732797(0x9c1)][_0x732797(0xc4b)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x1b6e26[_0x732797(0x9c1)][_0x732797(0xc4b)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x271acf of _0x1b6e26[_0x732797(0xab8)]){if('DrqvR'===_0x732797(0x3e5)){if(!_0x271acf)continue;if(_0x271acf[_0x732797(0x503)]===Game_Action[_0x732797(0x1c6)])return!![];}else _0x3a25f1[_0x732797(0x988)](_0x8301e2[_0x732797(0x9ca)],![]);}return![];},DataManager[_0x4fbf70(0x766)]=function(_0x1aaab8){const _0x1bb6f1=_0x4fbf70,_0x4ac50d=$dataTroops[_0x1aaab8];if(!_0x4ac50d)return'';let _0x12cbc2='';_0x12cbc2+=_0x4ac50d[_0x1bb6f1(0x27a)];for(const _0x1b16d0 of _0x4ac50d[_0x1bb6f1(0xa81)]){for(const _0x59b319 of _0x1b16d0[_0x1bb6f1(0xa31)]){_0x1bb6f1(0xd4d)===_0x1bb6f1(0x1b1)?this['addBattleGridMoveCommand']():[0x6c,0x198][_0x1bb6f1(0x6e3)](_0x59b319['code'])&&(_0x12cbc2+='\x0a',_0x12cbc2+=_0x59b319['parameters'][0x0]);}}return _0x12cbc2;},ConfigManager['autoBattleAtStart']=ConfigManager[_0x4fbf70(0x8f8)]??![],ConfigManager['autoBattleUseSkills']=ConfigManager[_0x4fbf70(0x1a5)]??![],ConfigManager['visualHpGauge']=ConfigManager[_0x4fbf70(0xd3a)]??!![],VisuMZ[_0x4fbf70(0xae2)]['ConfigManager_makeData']=ConfigManager[_0x4fbf70(0x6a6)],ConfigManager[_0x4fbf70(0x6a6)]=function(){const _0x251f97=_0x4fbf70,_0x502d6d=VisuMZ['BattleCore'][_0x251f97(0x8b1)]['call'](this);return _0x502d6d[_0x251f97(0x8f8)]=this[_0x251f97(0x8f8)],_0x502d6d[_0x251f97(0x1a5)]=this[_0x251f97(0x1a5)],_0x502d6d['visualHpGauge']=this[_0x251f97(0xd3a)],_0x502d6d;},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x3b8)]=ConfigManager['applyData'],ConfigManager[_0x4fbf70(0x637)]=function(_0x61fc1){const _0x834025=_0x4fbf70;VisuMZ[_0x834025(0xae2)][_0x834025(0x3b8)][_0x834025(0xc4a)](this,_0x61fc1);_0x834025(0x8f8)in _0x61fc1?this[_0x834025(0x8f8)]=_0x61fc1[_0x834025(0x8f8)]:this['autoBattleAtStart']=![];_0x834025(0x1a5)in _0x61fc1?this[_0x834025(0x1a5)]=_0x61fc1[_0x834025(0x1a5)]:this[_0x834025(0x1a5)]=![];if(_0x834025(0xd3a)in _0x61fc1){if(_0x834025(0x1de)===_0x834025(0x984)){const _0x521ec3=_0x4d6863[_0x834025(0xae2)]['Settings'][_0x834025(0x73d)],_0x57bd20=_0x521ec3[_0x834025(0xa5c)],_0x9312d5=_0x3e10f4[_0x57bd20];if(_0x9312d5&&_0x57cb0b[_0x834025(0xae2)][_0x834025(0x95e)](_0x57bd20)){const _0x32a94a=this[_0x834025(0x478)]()?this[_0x834025(0x87b)]:0x0,_0x301059=_0x9312d5['list'];this[_0x834025(0xcd6)](_0x301059,_0x32a94a),this[_0x834025(0x2da)]=_0x6f4d94['makeDeepCopy'](this[_0x834025(0x2da)]);const _0x2dc423={'code':0xbc3,'indent':this[_0x834025(0x966)],'parameters':_0x451455['makeDeepCopy'](_0x472274)};return this[_0x834025(0x2da)][_0x834025(0x4ad)](this[_0x834025(0x252)]+0x1,0x0,_0x2dc423),!![];}else return _0x40a7e7[_0x834025(0xae2)]['Game_Interpreter_command301'][_0x834025(0xc4a)](this,_0x15396e);}else this[_0x834025(0xd3a)]=_0x61fc1[_0x834025(0xd3a)];}else this['visualHpGauge']=!![];},ImageManager['svActorHorzCells']=ImageManager['svActorHorzCells']||0x9,ImageManager[_0x4fbf70(0xa1d)]=ImageManager[_0x4fbf70(0xa1d)]||0x6,VisuMZ['BattleCore'][_0x4fbf70(0xa2b)]=BattleManager[_0x4fbf70(0xc55)],BattleManager[_0x4fbf70(0xc55)]=function(_0x21e4f1,_0x1a9476,_0x579944){const _0x9ce619=_0x4fbf70;VisuMZ[_0x9ce619(0xae2)][_0x9ce619(0xa2b)][_0x9ce619(0xc4a)](this,_0x21e4f1,_0x1a9476,_0x579944),this['_battlerKeyCache']={};},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x52d)]=BattleManager[_0x4fbf70(0xa77)],BattleManager[_0x4fbf70(0xa77)]=function(){const _0x56f306=_0x4fbf70;VisuMZ[_0x56f306(0xae2)][_0x56f306(0x52d)][_0x56f306(0xc4a)](this),this[_0x56f306(0xc92)]=[];},BattleManager[_0x4fbf70(0xd0d)]=function(){const _0x209c8c=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;const _0x232965=SceneManager['_scene'][_0x209c8c(0x9e4)];if(_0x232965)_0x232965[_0x209c8c(0x6c5)]();},BattleManager[_0x4fbf70(0xd24)]=function(){const _0x446cac=_0x4fbf70;if(BattleManager[_0x446cac(0x814)]())return _0x446cac(0x6d5);return'DTB';},BattleManager[_0x4fbf70(0x79f)]=function(_0x32bbed){const _0x244223=_0x4fbf70;return _0x32bbed=_0x32bbed[_0x244223(0x7a4)]()[_0x244223(0xcda)](),this[_0x244223(0xd24)]()===_0x32bbed;},BattleManager[_0x4fbf70(0x698)]=function(){const _0xcc988c=_0x4fbf70;return this[_0xcc988c(0x79f)](_0xcc988c(0xa0e));},BattleManager['isTurnBased']=function(){const _0x150122=_0x4fbf70;return this[_0x150122(0x698)]();},BattleManager[_0x4fbf70(0x426)]=function(){const _0x442d9e=_0x4fbf70;return!this[_0x442d9e(0xc98)]();},BattleManager[_0x4fbf70(0x276)]=function(){const _0x20cd28=_0x4fbf70;return!this[_0x20cd28(0xc98)]()&&!this[_0x20cd28(0x426)]();},BattleManager['getBattlerFromKey']=function(_0x185e6a){const _0x270011=_0x4fbf70;this[_0x270011(0xd2a)]=this[_0x270011(0xd2a)]||{};if(this['_battlerKeyCache'][_0x185e6a]!==undefined)return this['_battlerKeyCache'][_0x185e6a];this[_0x270011(0xd2a)][_0x185e6a]=null;const _0x5ee10d=this[_0x270011(0xafc)](),_0x1d2d65=_0x5ee10d[_0x270011(0x4ec)](_0x4aad4b=>_0x4aad4b['battlerKey']()===_0x185e6a);if(_0x1d2d65)this['_battlerKeyCache'][_0x185e6a]=_0x1d2d65;return this['_battlerKeyCache'][_0x185e6a];},Game_BattlerBase['prototype'][_0x4fbf70(0x79a)]=function(){const _0x2807f9=_0x4fbf70;return _0x2807f9(0x75c)[_0x2807f9(0x946)](this['isActor']()?_0x2807f9(0x55a):_0x2807f9(0xbb3),this[_0x2807f9(0x27a)]());},Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x594)]=function(_0x567cca){const _0x5ce398=_0x4fbf70;if(this[_0x5ce398(0x349)]!=='')return;typeof _0x567cca===_0x5ce398(0x662)?this[_0x5ce398(0x349)]=_0x567cca[_0x5ce398(0x39e)]()['trim']():this[_0x5ce398(0x349)]=_0x567cca[_0x5ce398(0x79a)]();},Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x5e9)]=function(){const _0x141bdf=_0x4fbf70;return[this[_0x141bdf(0x1d9)]()];},Game_Action[_0x4fbf70(0x92c)]['getSpecificBattlerKeyTarget']=function(){const _0x348f6c=_0x4fbf70,_0x2eac5c=this[_0x348f6c(0x349)]||'',_0x527a76=BattleManager[_0x348f6c(0x5db)](_0x2eac5c);if(!_0x527a76)return this[_0x348f6c(0xd0c)]();if(!_0x527a76[_0x348f6c(0x4e4)]())this[_0x348f6c(0xd0c)]();return _0x527a76;},Game_Action['prototype'][_0x4fbf70(0xd0c)]=function(){const _0x41ed19=_0x4fbf70,_0x541296=this[_0x41ed19(0x349)];return _0x541296[_0x41ed19(0xc4b)](/ACTOR/i)?this[_0x41ed19(0x4e8)]()[_0x41ed19(0x82c)]():this[_0x41ed19(0xa93)]()['trueRandomTarget']();},BattleManager['selectedBattlers']=function(){const _0xd31d79=_0x4fbf70;return this[_0xd31d79(0xafc)]()[_0xd31d79(0xa29)](_0x11dbf2=>_0x11dbf2[_0xd31d79(0x822)]());},BattleManager[_0x4fbf70(0x7d8)]=function(_0xa274a9){const _0x2bd580=_0x4fbf70;if(_0xa274a9==='BattleVictoryJS'){if(_0x2bd580(0xd7d)===_0x2bd580(0xd7d))this[_0x2bd580(0x265)]=!![];else{if(!_0x13298a['isSceneBattle']())return;if(!_0x326431[_0x2bd580(0xcf4)])return;const _0x102333=_0x17c823['_action'];if(!_0x102333)return;_0x102333[_0x2bd580(0xa57)]=!![];}}$gameParty[_0x2bd580(0x7d8)](_0xa274a9),$gameTroop['processBattleCoreJS'](_0xa274a9);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x886)]=BattleManager['startBattle'],BattleManager[_0x4fbf70(0xced)]=function(){const _0x58ab31=_0x4fbf70;this['_endBattle']=![],this[_0x58ab31(0x2ce)]=ConfigManager[_0x58ab31(0x8f8)],this[_0x58ab31(0x265)]=![],this[_0x58ab31(0x7d8)](_0x58ab31(0x9f9)),VisuMZ[_0x58ab31(0xae2)][_0x58ab31(0x886)][_0x58ab31(0xc4a)](this),this[_0x58ab31(0x7d8)](_0x58ab31(0xaec));},BattleManager[_0x4fbf70(0x6cc)]=function(_0x306d36){const _0x31ca22=_0x4fbf70,_0x45bc1d=VisuMZ['BattleCore'][_0x31ca22(0x837)][_0x31ca22(0x73d)];_0x306d36!==_0x31ca22(0x692)&&_0x45bc1d['BattleEndEvent']&&VisuMZ[_0x31ca22(0xae2)][_0x31ca22(0x95e)](_0x45bc1d[_0x31ca22(0x1e2)])&&('JsIOB'===_0x31ca22(0x231)?$gameTemp[_0x31ca22(0x892)](_0x45bc1d['BattleEndEvent']):(_0x1afff2=(_0x479beb+_0x2f89ee)/0x2,_0x46ae34=-0x1));const _0x352618=_0x31ca22(0x4e3)[_0x31ca22(0x946)](_0x306d36);_0x45bc1d[_0x352618]&&VisuMZ[_0x31ca22(0xae2)]['CheckMapBattleEventValid'](_0x45bc1d[_0x352618])&&$gameTemp[_0x31ca22(0x892)](_0x45bc1d[_0x352618]);},VisuMZ['BattleCore'][_0x4fbf70(0x929)]=BattleManager[_0x4fbf70(0x332)],BattleManager[_0x4fbf70(0x332)]=function(){const _0x16e1b5=_0x4fbf70;if(this[_0x16e1b5(0x3e4)]==='turn'){if('THVzw'==='ZHzbW'){if(_0x25275e[_0x16e1b5(0x9fb)](_0x3dcbb0))return![];}else{if($gameTemp[_0x16e1b5(0x8c8)]())return![];}}return VisuMZ[_0x16e1b5(0xae2)][_0x16e1b5(0x929)][_0x16e1b5(0xc4a)](this);},VisuMZ['BattleCore'][_0x4fbf70(0x1b5)]=BattleManager[_0x4fbf70(0xd65)],BattleManager[_0x4fbf70(0xd65)]=function(){const _0x5ed890=_0x4fbf70;this[_0x5ed890(0x265)]=!![],this[_0x5ed890(0x7d8)]('BattleVictoryJS'),VisuMZ[_0x5ed890(0xae2)][_0x5ed890(0x1b5)][_0x5ed890(0xc4a)](this),this[_0x5ed890(0x6cc)]('Victory');},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x38b)]=BattleManager[_0x4fbf70(0xb6b)],BattleManager['processAbort']=function(){const _0x4631ee=_0x4fbf70;this[_0x4631ee(0x265)]=!![],VisuMZ[_0x4631ee(0xae2)]['BattleManager_processAbort']['call'](this);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x2bc)]=BattleManager[_0x4fbf70(0xc27)],BattleManager[_0x4fbf70(0xc27)]=function(){const _0x1c8ccc=_0x4fbf70;this[_0x1c8ccc(0x265)]=!![],this[_0x1c8ccc(0x7d8)]('BattleDefeatJS'),VisuMZ[_0x1c8ccc(0xae2)][_0x1c8ccc(0x2bc)][_0x1c8ccc(0xc4a)](this),this[_0x1c8ccc(0x6cc)](_0x1c8ccc(0xd33));},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x39a)]=BattleManager[_0x4fbf70(0x935)],BattleManager[_0x4fbf70(0x935)]=function(_0x2ced03){const _0x1b7873=_0x4fbf70;this[_0x1b7873(0xaf9)]=!![],this[_0x1b7873(0x2ce)]=![],this[_0x1b7873(0x7d8)]('PreEndBattleJS'),VisuMZ[_0x1b7873(0xae2)]['BattleManager_endBattle'][_0x1b7873(0xc4a)](this,_0x2ced03),this['processBattleCoreJS']('PostEndBattleJS');},VisuMZ['BattleCore'][_0x4fbf70(0xbfd)]=BattleManager[_0x4fbf70(0x316)],BattleManager['startTurn']=function(){const _0x39b0ad=_0x4fbf70;if(this[_0x39b0ad(0xc98)]())this[_0x39b0ad(0x7d8)]('PreStartTurnJS');VisuMZ[_0x39b0ad(0xae2)]['BattleManager_startTurn'][_0x39b0ad(0xc4a)](this);if(this[_0x39b0ad(0xc98)]())this[_0x39b0ad(0x7d8)](_0x39b0ad(0x43b));},VisuMZ['BattleCore'][_0x4fbf70(0x2a0)]=BattleManager[_0x4fbf70(0x8ce)],BattleManager[_0x4fbf70(0x8ce)]=function(){const _0x18404e=_0x4fbf70,_0xb1df25=this[_0x18404e(0xb38)][_0x18404e(0x69f)](),_0x557d07=this[_0x18404e(0xb38)];_0xb1df25&&_0xb1df25[_0x18404e(0x928)]()===_0x557d07&&_0xb1df25[_0x18404e(0x815)](_0x18404e(0x681)),VisuMZ['BattleCore'][_0x18404e(0x2a0)]['call'](this),_0xb1df25&&_0xb1df25[_0x18404e(0x928)]()===_0x557d07&&_0xb1df25[_0x18404e(0x815)]('PostStartActionJS');},VisuMZ['BattleCore'][_0x4fbf70(0xaa3)]=BattleManager[_0x4fbf70(0x541)],BattleManager['endAction']=function(){const _0x3806c9=_0x4fbf70,_0x3c513a=this[_0x3806c9(0xb15)],_0x4d0fd6=this['_subject'];_0x3c513a&&_0x3c513a!==this[_0x3806c9(0xc88)]&&_0x3c513a[_0x3806c9(0x928)]()===_0x4d0fd6&&_0x3c513a[_0x3806c9(0x815)](_0x3806c9(0x207)),this[_0x3806c9(0xb38)]?VisuMZ[_0x3806c9(0xae2)][_0x3806c9(0xaa3)]['call'](this):this['_phase']=_0x3806c9(0x6bd),_0x3c513a&&_0x3c513a!==this['_lastAction']&&_0x3c513a['subject']()===_0x4d0fd6&&(_0x3806c9(0x3cc)!==_0x3806c9(0x975)?_0x3c513a[_0x3806c9(0x815)]('PostEndActionJS'):_0x1cd08a[_0x3806c9(0x92c)]['drawItem'][_0x3806c9(0xc4a)](this,_0x5e5be8)),this[_0x3806c9(0xc6a)](this[_0x3806c9(0xafc)]()),this[_0x3806c9(0xc88)]=this['_action'];},BattleManager[_0x4fbf70(0xc6a)]=function(_0x41a631){const _0x458361=_0x4fbf70;for(const _0x3e58af of _0x41a631){if(!_0x3e58af)continue;if(!_0x3e58af[_0x458361(0xb81)]())continue;_0x3e58af['battler']()[_0x458361(0x2f0)]();}},BattleManager['updateAction']=function(){const _0x820d2f=_0x4fbf70;!this[_0x820d2f(0x2e0)][_0x820d2f(0x362)]()&&this[_0x820d2f(0x541)]();},Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x4a1)]=function(){const _0x5bbe80=_0x4fbf70;this[_0x5bbe80(0x50d)]();if(Imported['VisuMZ_1_SkillsStatesCore']){const _0x2e7af7=VisuMZ[_0x5bbe80(0x9e1)]['Settings'][_0x5bbe80(0x5f6)];_0x2e7af7&&_0x2e7af7[_0x5bbe80(0x9fc)]===![]&&this[_0x5bbe80(0xce3)](0x1);}else this[_0x5bbe80(0xce3)](0x1);this['removeBuffsAuto']();},BattleManager[_0x4fbf70(0xca0)]=function(){const _0x90cb2d=_0x4fbf70;this[_0x90cb2d(0x51c)]=VisuMZ['BattleCore']['Settings'][_0x90cb2d(0x73d)][_0x90cb2d(0x656)][_0x90cb2d(0xc4a)](this);},VisuMZ['BattleCore'][_0x4fbf70(0xce2)]=BattleManager[_0x4fbf70(0x72a)],BattleManager[_0x4fbf70(0x72a)]=function(){const _0x179e4f=_0x4fbf70;this[_0x179e4f(0x7d8)](_0x179e4f(0x563)),BattleManager[_0x179e4f(0x7cf)]['processEscape'](),VisuMZ['BattleCore'][_0x179e4f(0xce2)]['call'](this),this[_0x179e4f(0x6cc)](_0x179e4f(0x27f));},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xace)]=BattleManager[_0x4fbf70(0x8af)],BattleManager[_0x4fbf70(0x8af)]=function(){const _0x535ffd=_0x4fbf70;this[_0x535ffd(0x7d8)]('EscapeFailureJS');const _0x27c0df=this['_escapeRatio'];VisuMZ[_0x535ffd(0xae2)][_0x535ffd(0xace)]['call'](this),this['_escapeRatio']=_0x27c0df+VisuMZ[_0x535ffd(0xae2)][_0x535ffd(0x837)][_0x535ffd(0x73d)]['CalcEscapeRaiseJS'][_0x535ffd(0xc4a)](this),this['processPostBattleCommonEvents'](_0x535ffd(0x692));},BattleManager['displayStartMessages']=function(){const _0x4524ec=_0x4fbf70;let _0x3a3a2f=![];if(this[_0x4524ec(0xaae)]())for(const _0x41222d of $gameTroop[_0x4524ec(0x738)]()){this[_0x4524ec(0x2e0)][_0x4524ec(0x25b)](_0x4524ec(0xb70),TextManager[_0x4524ec(0x936)][_0x4524ec(0x946)](_0x41222d)),this['_logWindow'][_0x4524ec(0x25b)](_0x4524ec(0x438)),_0x3a3a2f=!![];}if(this[_0x4524ec(0x3c0)])this[_0x4524ec(0x2e0)][_0x4524ec(0x25b)](_0x4524ec(0xb70),TextManager['preemptive'][_0x4524ec(0x946)]($gameParty[_0x4524ec(0x27a)]())),this[_0x4524ec(0x2e0)]['push'](_0x4524ec(0x438));else this[_0x4524ec(0x8c0)]&&(this[_0x4524ec(0x2e0)]['push']('addText',TextManager['surprise'][_0x4524ec(0x946)]($gameParty[_0x4524ec(0x27a)]())),this[_0x4524ec(0x2e0)]['push'](_0x4524ec(0x438)));_0x3a3a2f&&(this[_0x4524ec(0x2e0)][_0x4524ec(0x25b)](_0x4524ec(0x438)),this[_0x4524ec(0x2e0)]['push'](_0x4524ec(0xb36))),this[_0x4524ec(0x814)]()&&this[_0x4524ec(0x792)]()&&(this[_0x4524ec(0xaf3)]=![]);},BattleManager[_0x4fbf70(0xaae)]=function(){const _0x4331d9=_0x4fbf70;if(BattleManager[_0x4331d9(0x2ce)])return![];return VisuMZ[_0x4331d9(0xae2)][_0x4331d9(0x837)][_0x4331d9(0x73f)]['EmergeText'];},VisuMZ['BattleCore'][_0x4fbf70(0x322)]=BattleManager['startInput'],BattleManager['startInput']=function(){const _0x3abcfa=_0x4fbf70;VisuMZ[_0x3abcfa(0xae2)]['BattleManager_startInput']['call'](this);if(this[_0x3abcfa(0x698)]()&&this[_0x3abcfa(0x792)]()&&!this[_0x3abcfa(0x8c0)]&&$gameParty[_0x3abcfa(0x5a1)]()){if('YktJZ'!==_0x3abcfa(0xae7)){this[_0x3abcfa(0x6d0)]['clear']();const _0x181f35=_0xe3a217[_0x3abcfa(0xae2)][_0x3abcfa(0x837)][_0x3abcfa(0x5f2)][_0x3abcfa(0xc1c)],_0x237777=_0x181f35[_0x3abcfa(0x946)](this[_0x3abcfa(0x8ef)](),this[_0x3abcfa(0x2aa)]()),_0x4396f0=this[_0x3abcfa(0x69d)](_0x237777)[_0x3abcfa(0x606)],_0x482666=_0x4e83cd[_0x3abcfa(0xb2d)]((this['innerWidth']-_0x4396f0)/0x2);this['drawTextEx'](_0x237777,_0x482666,0x0,_0x4396f0);}else this[_0x3abcfa(0xbb2)]();}},BattleManager[_0x4fbf70(0x792)]=function(){const _0x468bab=_0x4fbf70;return VisuMZ[_0x468bab(0xae2)]['Settings'][_0x468bab(0xbd7)][_0x468bab(0xbce)];},BattleManager[_0x4fbf70(0x4f0)]=function(){const _0x16929c=_0x4fbf70;if(this[_0x16929c(0x7ba)]()){if(_0x16929c(0x84b)!==_0x16929c(0x687))this[_0x16929c(0xbb2)]();else{if(!_0x40225c[_0x16929c(0x2ee)]())return;const _0x2a23c9=this[_0x16929c(0xb81)]();if(!_0x2a23c9)return;if(_0x1566e4)this['setBattlerFacePoint'](_0x197ea2+_0x2a23c9[_0x16929c(0xd6b)],_0xf2186b+_0x2a23c9[_0x16929c(0x571)],![]);_0x10131e+=_0x2a23c9[_0x16929c(0xd6b)]-_0x2a23c9[_0x16929c(0x818)],_0x554dc0+=_0x2a23c9['_baseY']-_0x2a23c9[_0x16929c(0xd1d)],_0x2a23c9['startMove'](_0x282682,_0x80b7ae,_0x292018);if(_0x88a893[_0x16929c(0xcaf)])_0x2a23c9[_0x16929c(0xadd)](_0x1be2ce||_0x16929c(0x60a));}}},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x8f7)]=Scene_Battle['prototype'][_0x4fbf70(0x1dc)],Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x1dc)]=function(){const _0x5aa3b6=_0x4fbf70;VisuMZ['BattleCore'][_0x5aa3b6(0x8f7)][_0x5aa3b6(0xc4a)](this);if(BattleManager[_0x5aa3b6(0x814)]()&&BattleManager['_tpbNeedsPartyCommand']){if(_0x5aa3b6(0x6dd)===_0x5aa3b6(0x342))return this[_0x5aa3b6(0x568)];else BattleManager[_0x5aa3b6(0xaf3)]=![],this[_0x5aa3b6(0x9ac)]();}},BattleManager[_0x4fbf70(0x33b)]=function(_0x2275d7,_0x8c07b1){const _0x5da6b4=_0x4fbf70;this['_action']['_reflectionTarget']=_0x8c07b1,this[_0x5da6b4(0x2e0)][_0x5da6b4(0x49c)](_0x8c07b1),this[_0x5da6b4(0x2e0)][_0x5da6b4(0x7ea)](_0x2275d7,this[_0x5da6b4(0xb15)]),this[_0x5da6b4(0xb15)][_0x5da6b4(0xbdf)](_0x2275d7),this[_0x5da6b4(0x2e0)]['displayActionResults'](_0x2275d7,_0x2275d7);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x54b)]=BattleManager[_0x4fbf70(0x441)],BattleManager[_0x4fbf70(0x441)]=function(){const _0xe2af50=_0x4fbf70;VisuMZ[_0xe2af50(0xae2)]['BattleManager_makeActionOrders'][_0xe2af50(0xc4a)](this),this['_actionBattlers']=this[_0xe2af50(0xbac)][_0xe2af50(0xa29)](_0x263630=>_0x263630&&_0x263630[_0xe2af50(0x8cf)]());},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x5b9)]=BattleManager[_0x4fbf70(0x9f8)],BattleManager[_0x4fbf70(0x9f8)]=function(_0x278ad8){const _0x156699=_0x4fbf70;if(this['_phase']===_0x156699(0x6b1))this['updateCustomActionSequence']();else{if(this[_0x156699(0x3e4)]==='forceAction'){if(_0x156699(0x6b9)!=='UQhQO')return _0xd2c6f['weapons']()[_0x156699(0x9d2)]||0x1;else this[_0x156699(0x5c8)]();}else VisuMZ[_0x156699(0xae2)]['BattleManager_updatePhase'][_0x156699(0xc4a)](this,_0x278ad8);}},BattleManager[_0x4fbf70(0x557)]=function(){const _0x4589ce=_0x4fbf70;this[_0x4589ce(0x5de)]=this[_0x4589ce(0x3ae)]['slice'](0x0),this[_0x4589ce(0x991)]=0x0,this[_0x4589ce(0x97e)]=this[_0x4589ce(0x5de)][0x0]||null,this[_0x4589ce(0x3e4)]='custom';},BattleManager[_0x4fbf70(0x899)]=function(){const _0x279364=_0x4fbf70;if(!this[_0x279364(0xb7b)]()&&!this[_0x279364(0x2e0)]['isBusy']()){if(_0x279364(0x4a6)==='UfpIU')this['_phase']=_0x279364(0x8f2);else{const _0x5c73e0=new _0x920266(_0x217651);this[_0x279364(0x196)]['addChild'](_0x5c73e0);}}},BattleManager[_0x4fbf70(0x28f)]=function(_0x7f9608){const _0x18827c=_0x4fbf70;this['_actionBattlers'][_0x18827c(0x5d9)](_0x7f9608);if(_0x7f9608===this[_0x18827c(0xb38)])return;const _0x2e36e9=JsonEx['makeDeepCopy'](_0x7f9608[_0x18827c(0x69f)]());this[_0x18827c(0xc92)]['push']([_0x7f9608,_0x2e36e9]);},BattleManager[_0x4fbf70(0x8f3)]=function(){},BattleManager[_0x4fbf70(0xa90)]=function(){const _0x58b245=_0x4fbf70;if(this[_0x58b245(0x814)]())this[_0x58b245(0x3e4)]=_0x58b245(0x6bd);else this[_0x58b245(0xc92)][_0x58b245(0x9d2)]>0x0?this[_0x58b245(0x3e4)]='turn':_0x58b245(0x397)===_0x58b245(0xce9)?_0x5d2716[_0x58b245(0xa42)](_0x2d54e9(_0x3c0258['$1'])):this[_0x58b245(0xceb)]();},BattleManager[_0x4fbf70(0x767)]=function(){const _0x351a2a=_0x4fbf70,_0x12df89=this[_0x351a2a(0xb38)];_0x12df89&&this[_0x351a2a(0x814)]()&&(_0x351a2a(0x6b2)!=='nnKgv'?_0x3d8efe=(_0x1a8298+_0x3b07d9)/0x2:_0x12df89['setActionState'](_0x351a2a(0xc2c)));for(;;){const _0x1c75c8=this['getNextSubjectFromPool']();if(!_0x1c75c8){if('QhtoI'===_0x351a2a(0x38c))return null;else{if(!_0x175cab[_0x351a2a(0x90d)]())return;if(!_0x3fe7d1[_0x351a2a(0x632)])return;_0xe62b3c[_0x351a2a(0x334)](_0x18659d,_0x42a6f4);const _0x11d952=_0x3ef6f9[_0x351a2a(0xc52)](),_0x2d3812=_0x8f48b1['WaitForProjectile'];if(!_0x11d952)return;const _0x31fdd4=_0x58176e[_0x351a2a(0x7cf)];if(!_0x31fdd4)return;_0x31fdd4[_0x351a2a(0xd66)](_0x7a565a);if(_0x2d3812)_0x11d952[_0x351a2a(0x645)](_0x351a2a(0xcff));}}if(_0x1c75c8[_0x351a2a(0x71e)]()&&_0x1c75c8[_0x351a2a(0x4e4)]())return _0x1c75c8;}},BattleManager[_0x4fbf70(0xa19)]=function(){const _0x5a046b=_0x4fbf70;if(this[_0x5a046b(0xc92)]['length']>0x0){if('xCrag'===_0x5a046b(0xa70)){const _0x133cab=this[_0x5a046b(0xc92)][_0x5a046b(0x5c3)](),_0x5d9511=_0x133cab[0x0];return _0x5d9511[_0x5a046b(0xaee)]=_0x5d9511[_0x5a046b(0xaee)]||[],_0x5d9511['_actions'][0x0]=_0x133cab[0x1],_0x5d9511;}else _0x25eea6[_0x5a046b(0xae2)][_0x5a046b(0x298)][_0x5a046b(0xc4a)](this),this['performFlinch']();}else return this[_0x5a046b(0xbac)][_0x5a046b(0x5c3)]();},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xa23)]=Game_Battler[_0x4fbf70(0x92c)]['forceAction'],Game_Battler[_0x4fbf70(0x92c)]['forceAction']=function(_0xe839e8,_0x47d0c1){const _0x34556d=_0x4fbf70;VisuMZ[_0x34556d(0xae2)][_0x34556d(0xa23)][_0x34556d(0xc4a)](this,_0xe839e8,_0x47d0c1),this[_0x34556d(0xaee)][this[_0x34556d(0xaee)]['length']-0x1][_0x34556d(0x6d8)]=!![];},Game_Interpreter[_0x4fbf70(0x92c)]['command339']=function(_0x5a8173){const _0x2d2a47=_0x4fbf70;return this[_0x2d2a47(0xd45)](_0x5a8173[0x0],_0x5a8173[0x1],_0x208b5b=>{const _0x26cbfa=_0x2d2a47;!_0x208b5b[_0x26cbfa(0x664)]()&&(_0x208b5b[_0x26cbfa(0x28f)](_0x5a8173[0x2],_0x5a8173[0x3]),BattleManager[_0x26cbfa(0x28f)](_0x208b5b));}),!![];},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x880)]=Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x43c)],Game_Battler['prototype'][_0x4fbf70(0x43c)]=function(){const _0x57b406=_0x4fbf70;VisuMZ[_0x57b406(0xae2)][_0x57b406(0x880)]['call'](this),this[_0x57b406(0xaee)][_0x57b406(0x9d2)]<=0x0&&(this[_0x57b406(0xa2f)]=Number[_0x57b406(0xc16)]);},BattleManager[_0x4fbf70(0x3bd)]=function(){const _0x2fd7b7=_0x4fbf70;if(VisuMZ[_0x2fd7b7(0xae2)][_0x2fd7b7(0x837)]['Damage'][_0x2fd7b7(0x419)]??!![])return![];return SceneManager[_0x2fd7b7(0x90d)]()&&this[_0x2fd7b7(0x265)];},VisuMZ[_0x4fbf70(0xae2)]['BattleManager_selectNextCommand']=BattleManager['selectNextCommand'],BattleManager[_0x4fbf70(0xbb2)]=function(){const _0xa5b931=_0x4fbf70;this[_0xa5b931(0x814)]()?_0xa5b931(0x753)!==_0xa5b931(0x450)?this[_0xa5b931(0xacd)]():(this[_0xa5b931(0xb1b)]['y']=this[_0xa5b931(0x389)]*0.5,this[_0xa5b931(0xb1b)]['y']+=_0x593e8d[_0xa5b931(0x545)](this['_shakeFlinchPower'])*(_0x558b72['random']()<0.5?-0x1:0x1)):VisuMZ[_0xa5b931(0xae2)]['BattleManager_selectNextCommand'][_0xa5b931(0xc4a)](this);},BattleManager['selectNextCommandTpb']=function(){const _0x1050af=_0x4fbf70;if(this[_0x1050af(0x2f7)]){if(this[_0x1050af(0x2f7)]['selectNextCommand']())return;this[_0x1050af(0x530)](),this[_0x1050af(0xa07)](),!this[_0x1050af(0xb38)]&&!this[_0x1050af(0x2f7)]&&(_0x1050af(0x4f8)!==_0x1050af(0x4f8)?_0x5e909f=_0x1050af(0x8ea):SceneManager[_0x1050af(0x32c)][_0x1050af(0xc85)]());}else!this['_subject']&&this[_0x1050af(0x6c8)]();},BattleManager[_0x4fbf70(0xa07)]=function(){const _0x322c8a=_0x4fbf70;(!this[_0x322c8a(0x7ba)]()||this[_0x322c8a(0x2e9)]())&&(this['_tpbSceneChangeCacheActor']&&(!$gameParty[_0x322c8a(0x914)]()[_0x322c8a(0x6e3)](this[_0x322c8a(0xa8a)])&&(this[_0x322c8a(0xa8a)]=null)),!this['_tpbSceneChangeCacheActor']?(this[_0x322c8a(0x800)](),this[_0x322c8a(0x2f7)]=null,this[_0x322c8a(0x6eb)]=![]):this[_0x322c8a(0xca8)]());},BattleManager['revertTpbCachedActor']=function(){const _0x48973c=_0x4fbf70;!$gameParty[_0x48973c(0x914)]()['includes'](this[_0x48973c(0xa8a)])&&(_0x48973c(0xab5)===_0x48973c(0xab5)?this[_0x48973c(0xa8a)]=null:_0x42c0cd=_0x2d6fc2>=_0x46a758?_0x3d39eb:_0x181a0d);if(this[_0x48973c(0xa8a)])this[_0x48973c(0x2f7)]=this[_0x48973c(0xa8a)],this[_0x48973c(0x2f7)][_0x48973c(0xcb8)]=_0x48973c(0x617),this['_inputting']=!![],this['_tpbSceneChangeCacheActor']=null;else{if(_0x48973c(0xb43)===_0x48973c(0xb43))this['cancelActorInput'](),this[_0x48973c(0x2f7)]=null,this[_0x48973c(0x6eb)]=![];else{const _0x212a0a=_0x57fce9[_0x48973c(0xae2)][_0x48973c(0x837)][_0x48973c(0xb1f)];if(_0x212a0a&&_0x212a0a['jsScaleToFit'])return _0x212a0a['jsScaleToFit'][_0x48973c(0xc4a)](this);this['width']=_0x48f8f1[_0x48973c(0x606)],this[_0x48973c(0x389)]=_0x5c1465[_0x48973c(0x389)];const _0x32354a=this[_0x48973c(0x606)]/this[_0x48973c(0x597)][_0x48973c(0x606)],_0x5bf552=this[_0x48973c(0x389)]/this[_0x48973c(0x597)][_0x48973c(0x389)],_0x2196fd=_0x86d6fa[_0x48973c(0x6f0)](_0x32354a,_0x5bf552);this[_0x48973c(0xbfa)]['x']=_0x2196fd,this[_0x48973c(0xbfa)]['y']=_0x2196fd,this['x']=(_0x5a1942[_0x48973c(0x606)]-this[_0x48973c(0x606)])/0x2,this['y']=_0x134bcd['height']-this['height'];}}},VisuMZ['BattleCore'][_0x4fbf70(0x400)]=BattleManager['isTpbMainPhase'],BattleManager[_0x4fbf70(0x96e)]=function(){const _0x3fe0f8=_0x4fbf70;return this[_0x3fe0f8(0x3e4)]===_0x3fe0f8(0x6b1)?this[_0x3fe0f8(0xd67)]():VisuMZ['BattleCore']['BattleManager_isTpbMainPhase'][_0x3fe0f8(0xc4a)](this);},BattleManager[_0x4fbf70(0xd67)]=function(){const _0x3942ab=_0x4fbf70;return this[_0x3942ab(0xa52)]();},VisuMZ['BattleCore']['BattleManager_cancelActorInput']=BattleManager[_0x4fbf70(0x800)],BattleManager[_0x4fbf70(0x800)]=function(){const _0x348546=_0x4fbf70;this['isTpb']()&&this[_0x348546(0x3e4)]==='battleEnd'&&(this[_0x348546(0x2f7)]=null),VisuMZ[_0x348546(0xae2)]['BattleManager_cancelActorInput']['call'](this);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xb47)]=BattleManager['inputtingAction'],BattleManager[_0x4fbf70(0x206)]=function(){const _0x1643b2=_0x4fbf70,_0x762713=this[_0x1643b2(0x2f7)];if(_0x762713&&!_0x762713[_0x1643b2(0x206)]()){const _0x2b0274=_0x762713[_0x1643b2(0x1e8)];_0x762713[_0x1643b2(0xaee)][_0x2b0274]=new Game_Action(_0x762713);}return VisuMZ[_0x1643b2(0xae2)]['BattleManager_inputtingAction']['call'](this);},VisuMZ['BattleCore'][_0x4fbf70(0x961)]=BattleManager[_0x4fbf70(0x45f)],BattleManager[_0x4fbf70(0x45f)]=function(_0x35ca06){const _0x49c60e=_0x4fbf70;if(this[_0x49c60e(0xb15)][_0x49c60e(0x477)]())return![];return VisuMZ['BattleCore']['BattleManager_checkSubstitute'][_0x49c60e(0xc4a)](this,_0x35ca06);},SceneManager[_0x4fbf70(0x90d)]=function(){const _0x38bd9c=_0x4fbf70;return this['_scene']&&this[_0x38bd9c(0x32c)][_0x38bd9c(0x631)]===Scene_Battle;},SceneManager[_0x4fbf70(0x916)]=function(){const _0x71f55=_0x4fbf70;return Spriteset_Battle[_0x71f55(0x92c)][_0x71f55(0xbdd)]();},SceneManager[_0x4fbf70(0x5dc)]=function(){const _0x50aa1a=_0x4fbf70;if(SceneManager[_0x50aa1a(0x7ca)](Scene_Options))return!![];return![];},SceneManager['isNextSceneBattleTransitionable']=function(){if(SceneManager['isNextScene'](Scene_Options))return!![];return![];},SceneManager[_0x4fbf70(0x59d)]=function(_0xfc843f){const _0x5718c6=_0x4fbf70;if(!SceneManager[_0x5718c6(0x90d)]())return!![];const _0x91706b=[_0x5718c6(0x70b),_0x5718c6(0x3e2)];return _0x91706b[_0x5718c6(0x6e3)](_0xfc843f['name']);},VisuMZ['BattleCore'][_0x4fbf70(0x98f)]=SceneManager['push'],SceneManager[_0x4fbf70(0x25b)]=function(_0x3df1be){const _0x126d46=_0x4fbf70;if(!SceneManager['checkSceneBattleTransitionable'](_0x3df1be))return this[_0x126d46(0x60f)](_0x3df1be);VisuMZ['BattleCore'][_0x126d46(0x98f)][_0x126d46(0xc4a)](this,_0x3df1be);},SceneManager[_0x4fbf70(0x60f)]=function(_0x2fb332){const _0x1526cc=_0x4fbf70;if(!$gameTemp[_0x1526cc(0x6a5)]())return;if(this[_0x1526cc(0xc8d)])return;this[_0x1526cc(0xc8d)]=!![];let _0x49f40e='';_0x49f40e+=_0x1526cc(0x54a),_0x49f40e+='\x20to\x20%1\x20midbattle.'['format'](_0x2fb332[_0x1526cc(0x27a)]),alert(_0x49f40e);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x2ec)]=Game_Temp[_0x4fbf70(0x92c)][_0x4fbf70(0x889)],Game_Temp[_0x4fbf70(0x92c)][_0x4fbf70(0x889)]=function(_0x4204a5,_0x5a94f6,_0x1d6ca2){const _0x42eaae=_0x4fbf70;_0x4204a5=_0x4204a5[_0x42eaae(0xa29)]((_0x330777,_0x4ff1da,_0x5545cd)=>_0x5545cd[_0x42eaae(0xd48)](_0x330777)===_0x4ff1da);SceneManager[_0x42eaae(0x90d)]()&&SceneManager[_0x42eaae(0x916)]()&&(_0x1d6ca2=!_0x1d6ca2);VisuMZ[_0x42eaae(0xae2)]['Game_Temp_requestAnimation'][_0x42eaae(0xc4a)](this,_0x4204a5,_0x5a94f6,_0x1d6ca2);if(SceneManager['isSceneBattle']()){if(_0x42eaae(0x940)===_0x42eaae(0x27c)){if(this[_0x42eaae(0x631)]===_0x340889&&!_0x24538b['hasSvBattler']())return;}else BattleManager[_0x42eaae(0x7cf)][_0x42eaae(0x368)]();}},Game_Temp[_0x4fbf70(0x92c)]['setLastPluginCommandInterpreter']=function(_0x3aba4b){const _0x1afbda=_0x4fbf70;this[_0x1afbda(0x761)]=_0x3aba4b;},Game_Temp['prototype'][_0x4fbf70(0xc52)]=function(){const _0x461c57=_0x4fbf70;return this[_0x461c57(0x761)];},Game_Temp['prototype'][_0x4fbf70(0x484)]=function(){this['_forcedBattleLayout']=undefined;},Game_Temp[_0x4fbf70(0x92c)]['applyForcedGameTroopSettingsBattleCore']=function(_0x4517da){const _0x37c6f2=_0x4fbf70;$gameMap&&$dataMap&&$dataMap[_0x37c6f2(0x9c1)]&&this[_0x37c6f2(0x217)]($dataMap['note']);const _0x4ca4d2=$dataTroops[_0x4517da];if(_0x4ca4d2){let _0x3e1595=DataManager['createTroopNote'](_0x4ca4d2['id']);this[_0x37c6f2(0x217)](_0x3e1595);}},Game_Temp[_0x4fbf70(0x92c)]['parseForcedGameTroopSettingsBattleCore']=function(_0x3111a6){const _0x19e76e=_0x4fbf70;if(!_0x3111a6)return;if(_0x3111a6['match'](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*?)>/i)){const _0x5da675=String(RegExp['$1']);if(_0x5da675[_0x19e76e(0xc4b)](/DEFAULT/i))this[_0x19e76e(0xc62)]=_0x19e76e(0x23c);else{if(_0x5da675[_0x19e76e(0xc4b)](/LIST/i)){if(_0x19e76e(0x363)===_0x19e76e(0x4f7))return this[_0x19e76e(0x82b)]()[_0x19e76e(0x2b0)];else this[_0x19e76e(0xc62)]=_0x19e76e(0xa31);}else{if(_0x5da675['match'](/XP/i)){if(_0x19e76e(0xa86)==='encdi'){if(_0x28a738[_0x19e76e(0xae2)]['Settings'][_0x19e76e(0x835)][_0x19e76e(0x419)]??!![])return![];return _0x51d1ac[_0x19e76e(0x90d)]()&&this['_endingBattle'];}else this[_0x19e76e(0xc62)]='xp';}else{if(_0x5da675[_0x19e76e(0xc4b)](/PORTRAIT/i))'WzgPH'==='WzgPH'?this[_0x19e76e(0xc62)]=_0x19e76e(0x1c0):_0x59cd17=_0x17bf8f>=_0x7baed7?_0xea3dfe:_0x58a939;else{if(_0x5da675[_0x19e76e(0xc4b)](/BORDER/i))this[_0x19e76e(0xc62)]=_0x19e76e(0x972);else{if(_0x5da675[_0x19e76e(0xc4b)](/(?:SIDEVIEW UI|SIDEVIEW)/i)){if(_0x19e76e(0x234)===_0x19e76e(0x234))Imported[_0x19e76e(0xc11)]?this[_0x19e76e(0xc62)]='sideview_ui':this['_forcedBattleLayout']=_0x19e76e(0x23c);else{const _0x1d546d=_0x2efae7[_0x19e76e(0xae2)][_0x19e76e(0x837)][_0x19e76e(0x41c)];if(_0x1d546d['StatusWindowAttachmentBack']){const _0x5b8e39=new _0x5cdcde();_0x5b8e39[_0x19e76e(0x597)]=_0x5e11a2['loadSystem'](_0x1d546d[_0x19e76e(0x7e1)]),_0x5b8e39['x']=_0x1d546d[_0x19e76e(0x695)]||0x0,_0x5b8e39['y']=_0x1d546d[_0x19e76e(0xba0)]||0x0,this[_0x19e76e(0xcbc)](_0x5b8e39),this[_0x19e76e(0x93d)]=_0x5b8e39;}if(_0x1d546d[_0x19e76e(0xacb)]){const _0x21f520=new _0x3c1d88();_0x21f520[_0x19e76e(0x597)]=_0x1820a0[_0x19e76e(0x5b7)](_0x1d546d[_0x19e76e(0xacb)]),_0x21f520['x']=_0x1d546d['StatusWindowAttachmentFrontOffsetX']||0x0,_0x21f520['y']=_0x1d546d[_0x19e76e(0x37c)]||0x0,this[_0x19e76e(0x52a)](_0x21f520),this[_0x19e76e(0x22f)]=_0x21f520;}}}else _0x5da675['match'](/(?:FRONTVIEW UI|FRONTVIEW)/i)&&(Imported[_0x19e76e(0xb94)]?this['_forcedBattleLayout']=_0x19e76e(0x8e8):this['_forcedBattleLayout']=_0x19e76e(0x23c));}}}}}}},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x6e2)]=Game_System[_0x4fbf70(0x92c)][_0x4fbf70(0x691)],Game_System['prototype'][_0x4fbf70(0x691)]=function(){const _0x496c20=_0x4fbf70;VisuMZ[_0x496c20(0xae2)][_0x496c20(0x6e2)]['call'](this),this[_0x496c20(0x4d0)]();},Game_System['prototype'][_0x4fbf70(0x4d0)]=function(){const _0x357b9a=_0x4fbf70;this[_0x357b9a(0xafb)]=this[_0x357b9a(0xafb)]||[];},Game_System['prototype']['getDefeatedEnemies']=function(){const _0x447176=_0x4fbf70;if(this[_0x447176(0xafb)]===undefined)this['initBattleCore']();return this[_0x447176(0xafb)];},Game_System['prototype'][_0x4fbf70(0x85e)]=function(_0x22175a){const _0x389cf3=_0x4fbf70;if(this['_defeatedEnemies']===undefined)this[_0x389cf3(0x4d0)]();if(!_0x22175a)return;if(this['_defeatedEnemies']['includes'](_0x22175a))return;this['_defeatedEnemies'][_0x389cf3(0x25b)](_0x22175a),this['_defeatedEnemies'][_0x389cf3(0x72f)]((_0x3231c0,_0x1e8110)=>_0x3231c0-_0x1e8110);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x37f)]=Game_BattlerBase['prototype'][_0x4fbf70(0x6a0)],Game_BattlerBase[_0x4fbf70(0x92c)]['addNewState']=function(_0x49dbb9){const _0x583b9a=_0x4fbf70,_0x253c67=this[_0x583b9a(0x4e4)](),_0x2c2b6c=this[_0x583b9a(0x963)]();VisuMZ['BattleCore']['Game_BattlerBase_addNewState'][_0x583b9a(0xc4a)](this,_0x49dbb9),this[_0x583b9a(0x923)]()&&_0x253c67&&this['isDead']()&&(this[_0x583b9a(0xba5)]=!this['hasBeenDefeatedBefore'](),$gameSystem[_0x583b9a(0x85e)](this[_0x583b9a(0x3ea)]())),SceneManager[_0x583b9a(0x90d)]()&&_0x2c2b6c!==this[_0x583b9a(0x963)]()&&(this['battler']()&&this[_0x583b9a(0xb81)]()[_0x583b9a(0x2f0)]());},Game_Enemy[_0x4fbf70(0x92c)][_0x4fbf70(0x902)]=function(){const _0x319265=_0x4fbf70;return $gameSystem[_0x319265(0x4cf)]()[_0x319265(0x6e3)](this['_enemyId']);},VisuMZ[_0x4fbf70(0xae2)]['Game_BattlerBase_eraseState']=Game_BattlerBase[_0x4fbf70(0x92c)][_0x4fbf70(0xc89)],Game_BattlerBase[_0x4fbf70(0x92c)]['eraseState']=function(_0xf3e021){const _0x2c2f4d=_0x4fbf70;VisuMZ[_0x2c2f4d(0xae2)][_0x2c2f4d(0x464)][_0x2c2f4d(0xc4a)](this,_0xf3e021),this[_0x2c2f4d(0x923)]()&&_0xf3e021===this[_0x2c2f4d(0xc8a)]()&&this[_0x2c2f4d(0x4e4)]()&&(this[_0x2c2f4d(0xba5)]=![]),!this[_0x2c2f4d(0x913)]&&!this[_0x2c2f4d(0x42d)]&&SceneManager[_0x2c2f4d(0x90d)]()&&this[_0x2c2f4d(0xc12)]();},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x49e)]=Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0xb36)],Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0xb36)]=function(){const _0x22c453=_0x4fbf70;VisuMZ['BattleCore']['Game_Action_clear']['call'](this),this[_0x22c453(0x5af)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x22c453(0xc4d)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x22c453(0x7b9)]=_0x22c453(0x23c),this[_0x22c453(0x919)]();},Game_Action['prototype'][_0x4fbf70(0x919)]=function(){this['_targetBattlerKey']='';},VisuMZ[_0x4fbf70(0xae2)]['Game_Action_setSubject']=Game_Action['prototype'][_0x4fbf70(0x690)],Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x690)]=function(_0x3a7dbf){const _0x18a012=_0x4fbf70;VisuMZ[_0x18a012(0xae2)][_0x18a012(0x69c)][_0x18a012(0xc4a)](this,_0x3a7dbf),this[_0x18a012(0x919)]();},VisuMZ['BattleCore'][_0x4fbf70(0x44b)]=Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x26c)],Game_Action['prototype'][_0x4fbf70(0x26c)]=function(_0xebb9b8){const _0x318800=_0x4fbf70;VisuMZ[_0x318800(0xae2)]['Game_Action_setSkill'][_0x318800(0xc4a)](this,_0xebb9b8),this[_0x318800(0x919)]();},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x75d)]=Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x1f1)],Game_Action[_0x4fbf70(0x92c)]['setItem']=function(_0x23e3e4){const _0x4cabd4=_0x4fbf70;VisuMZ[_0x4cabd4(0xae2)][_0x4cabd4(0x75d)]['call'](this,_0x23e3e4),this[_0x4cabd4(0x919)]();},Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x67c)]=function(_0x269cd5,_0x3f0b77){const _0x3fac19=_0x4fbf70;return VisuMZ[_0x3fac19(0xae2)]['Settings'][_0x3fac19(0x835)][_0x3fac19(0x5c0)][_0x3fac19(0xc4a)](this,_0x269cd5,_0x3f0b77);},Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x3b1)]=function(_0x5509ab,_0x3b1d6f){const _0x1f59fb=_0x4fbf70;return VisuMZ[_0x1f59fb(0xae2)][_0x1f59fb(0x837)][_0x1f59fb(0x835)][_0x1f59fb(0x601)][_0x1f59fb(0xc4a)](this,_0x5509ab,_0x3b1d6f);},Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x755)]=function(_0x18f357,_0x2ef019){const _0x1258d1=_0x4fbf70;return VisuMZ[_0x1258d1(0xae2)][_0x1258d1(0x837)][_0x1258d1(0x835)][_0x1258d1(0x3d9)][_0x1258d1(0xc4a)](this,_0x18f357,_0x2ef019);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xa17)]=Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x793)],Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x793)]=function(_0x212fad){const _0x5af158=_0x4fbf70,_0x514f4e=this[_0x5af158(0x98d)]()[_0x5af158(0x9c1)];if(_0x514f4e['match'](/<ALWAYS HIT>/i))return 0x1;else{if(_0x514f4e[_0x5af158(0xc4b)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{let _0x45bd55=VisuMZ[_0x5af158(0xae2)]['Game_Action_itemHit'][_0x5af158(0xc4a)](this,_0x212fad);return _0x45bd55=this[_0x5af158(0xc4d)][_0x5af158(0x41b)]*_0x45bd55+this['_multipliers']['hitFlat'],_0x45bd55;}}},Game_Action['prototype']['itemCri']=function(_0x52c085){const _0x2ca77f=_0x4fbf70;if(!this[_0x2ca77f(0x98d)]()[_0x2ca77f(0x36f)][_0x2ca77f(0x881)])return 0x0;let _0x4a71a6=VisuMZ['BattleCore'][_0x2ca77f(0x837)][_0x2ca77f(0x835)][_0x2ca77f(0xb8e)][_0x2ca77f(0xc4a)](this,_0x52c085);return _0x4a71a6=this['_multipliers'][_0x2ca77f(0x82f)]*_0x4a71a6+this['_multipliers'][_0x2ca77f(0xcbe)],_0x4a71a6;},Game_Action['prototype']['applyCritical']=function(_0x3cb9b5){const _0x3d58ff=_0x4fbf70;return _0x3cb9b5=VisuMZ['BattleCore'][_0x3d58ff(0x837)][_0x3d58ff(0x835)]['CriticalHitMultiplier']['call'](this,_0x3cb9b5),_0x3cb9b5=this['_multipliers'][_0x3d58ff(0x2a6)]*_0x3cb9b5+this[_0x3d58ff(0xc4d)][_0x3d58ff(0x556)],_0x3cb9b5;},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x35d)]=Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x577)],Game_Action['prototype']['evalDamageFormula']=function(_0x17e280){const _0x3ef542=_0x4fbf70;if(this[_0x3ef542(0x7b9)]!==_0x3ef542(0x23c)){if(_0x3ef542(0xa7f)!==_0x3ef542(0x416))return this[_0x3ef542(0x904)](_0x17e280);else{const _0x1b5335=_0x564fd1(_0x26ad6c['$1'])['split'](/[\r\n]+/)[_0x3ef542(0x5d9)](''),_0x37d5e2=_0x2d81d8[_0x3ef542(0x794)](_0x1b5335);_0x1cb395['wtypeId']=_0x533371[_0x3ef542(0x3f9)](_0x37d5e2);}}else{if(DataManager[_0x3ef542(0x6fe)](this[_0x3ef542(0x98d)]())==='MANUAL')return VisuMZ[_0x3ef542(0xae2)][_0x3ef542(0x35d)][_0x3ef542(0xc4a)](this,_0x17e280);else{if(_0x3ef542(0xbe2)==='liaoP')return this[_0x3ef542(0x467)](_0x17e280);else _0x40a2a0[_0x3ef542(0x645)]('cutinEnter');}}},Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x65e)]=function(_0x43ffbe){const _0x30a114=_0x4fbf70;this[_0x30a114(0x7b9)]=_0x43ffbe;},Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x904)]=function(_0xa730f4){const _0xb391b7=_0x4fbf70,_0xb58d79=this['item'](),_0x57b4e9=_0xb58d79['damage']['formula'];_0xb58d79[_0xb391b7(0x36f)][_0xb391b7(0xcb5)]=this[_0xb391b7(0x7b9)];let _0x46bccf=VisuMZ[_0xb391b7(0xae2)][_0xb391b7(0x35d)]['call'](this,_0xa730f4);return _0xb58d79[_0xb391b7(0x36f)][_0xb391b7(0xcb5)]=_0x57b4e9,_0x46bccf;},Game_Action['prototype'][_0x4fbf70(0x5b1)]=function(){const _0x1ae3d0=_0x4fbf70;if(this[_0x1ae3d0(0x98d)]()[_0x1ae3d0(0x9c1)][_0x1ae3d0(0xc4b)](/<DAMAGE STYLE:[ ](.*)>/i)){if(_0x1ae3d0(0x62c)!==_0x1ae3d0(0x62c))_0x4a65d9=_0xcc2870;else{const _0x78a18f=String(RegExp['$1'])[_0x1ae3d0(0x7a4)]()[_0x1ae3d0(0xcda)]();return _0x78a18f;}}return'MANUAL';},Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x467)]=function(_0x3d57e7){const _0xe925c6=_0x4fbf70,_0xdbe3f4=DataManager['getDamageStyle'](this[_0xe925c6(0x98d)]()),_0x45d0d4=VisuMZ[_0xe925c6(0xb48)][_0xdbe3f4];try{return _0x45d0d4['Formula'][_0xe925c6(0xc4a)](this,_0x3d57e7);}catch(_0x29b521){if($gameTemp[_0xe925c6(0x6a5)]())console['log'](_0x29b521);return VisuMZ['BattleCore'][_0xe925c6(0x35d)][_0xe925c6(0xc4a)](this);}},Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x33a)]=function(_0x129e16,_0x451196){const _0x175d1f=_0x4fbf70;if(this[_0x175d1f(0xc71)]())return _0x451196;const _0x1a8b89=this[_0x175d1f(0x928)](),_0x100ec2=_0x129e16;let _0x4a4f0a=[],_0x172e1e=[];_0x4a4f0a[_0x175d1f(0x25b)](this[_0x175d1f(0x5af)][_0x175d1f(0x825)],this[_0x175d1f(0x5af)][_0x175d1f(0xa0a)]),_0x172e1e[_0x175d1f(0x25b)](this[_0x175d1f(0x5af)][_0x175d1f(0x610)],this[_0x175d1f(0x5af)][_0x175d1f(0x5a4)]);const _0x19c2cc=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x31d580=this[_0x175d1f(0x6bf)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x9795d1=this[_0x175d1f(0x6bf)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x91556f=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;_0x4a4f0a=_0x4a4f0a[_0x175d1f(0xc9b)](_0x100ec2[_0x175d1f(0xabd)]()[_0x175d1f(0x990)](_0x139baf=>_0x139baf&&_0x139baf[_0x175d1f(0x9c1)][_0x175d1f(0xc4b)](_0x19c2cc)?Number(RegExp['$1']):0x0)),_0x172e1e=_0x172e1e['concat'](_0x100ec2[_0x175d1f(0xabd)]()['map'](_0x488a72=>_0x488a72&&_0x488a72[_0x175d1f(0x9c1)]['match'](_0x31d580)?Number(RegExp['$1'])/0x64:0x0)),_0x4a4f0a=_0x4a4f0a['concat'](_0x1a8b89[_0x175d1f(0xabd)]()['map'](_0x30a3ce=>_0x30a3ce&&_0x30a3ce[_0x175d1f(0x9c1)][_0x175d1f(0xc4b)](_0x9795d1)?Number(RegExp['$1']):0x0)),_0x172e1e=_0x172e1e[_0x175d1f(0xc9b)](_0x1a8b89[_0x175d1f(0xabd)]()[_0x175d1f(0x990)](_0x2b4be4=>_0x2b4be4&&_0x2b4be4[_0x175d1f(0x9c1)][_0x175d1f(0xc4b)](_0x91556f)?Number(RegExp['$1'])/0x64:0x0));this['item']()[_0x175d1f(0x9c1)][_0x175d1f(0xc4b)](_0x9795d1)&&_0x4a4f0a['push'](Number(RegExp['$1']));this['item']()['note'][_0x175d1f(0xc4b)](_0x91556f)&&_0x172e1e[_0x175d1f(0x25b)](Number(RegExp['$1']));_0x451196=_0x4a4f0a['reduce']((_0x25d837,_0x16baad)=>_0x25d837-_0x16baad,_0x451196);if(_0x451196>0x0){if('wIynn'!==_0x175d1f(0xc1a))_0x451196=_0x172e1e['reduce']((_0x1fd9b9,_0x1111dd)=>_0x1fd9b9*(0x1-_0x1111dd),_0x451196);else return!![];}return _0x451196;},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xb49)]=Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x6c1)],Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x6c1)]=function(_0x4c76f5,_0x1ffbcd){const _0x1f6131=_0x4fbf70;_0x1ffbcd=_0x1ffbcd*this['_multipliers'][_0x1f6131(0xa4f)],_0x1ffbcd+=this[_0x1f6131(0xc4d)][_0x1f6131(0xc66)]*(_0x1ffbcd>=0x0?0x1:-0x1),_0x1ffbcd=this[_0x1f6131(0x6ee)]('PreDamage%1JS',_0x4c76f5,_0x1ffbcd,![]),_0x1ffbcd=this[_0x1f6131(0xa7e)](_0x1ffbcd),_0x1ffbcd=Math[_0x1f6131(0xbec)](_0x1ffbcd),this[_0x1f6131(0x68a)]=_0x1ffbcd,this['_totalValue']=this[_0x1f6131(0xa5f)]||0x0,this[_0x1f6131(0xa5f)]+=_0x1ffbcd,VisuMZ[_0x1f6131(0xae2)][_0x1f6131(0xb49)][_0x1f6131(0xc4a)](this,_0x4c76f5,_0x1ffbcd),this[_0x1f6131(0x6ee)]('PostDamage%1JS',_0x4c76f5,_0x1ffbcd,!![]);},Game_Action['prototype'][_0x4fbf70(0xa7e)]=function(_0x4a9ba7){const _0x4d187c=_0x4fbf70;if(this[_0x4d187c(0xa38)]())return _0x4a9ba7;return _0x4a9ba7=this['applySoftDamageCap'](_0x4a9ba7),_0x4a9ba7=this['applyHardDamageCap'](_0x4a9ba7),_0x4a9ba7;},Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0xa38)]=function(){const _0x1f0ca9=_0x4fbf70,_0x20afb4=/<BYPASS DAMAGE CAP>/i;if(this[_0x1f0ca9(0x98d)]()[_0x1f0ca9(0x9c1)][_0x1f0ca9(0xc4b)](_0x20afb4))return!![];if(this[_0x1f0ca9(0x928)]()[_0x1f0ca9(0xabd)]()['some'](_0xec32d2=>_0xec32d2&&_0xec32d2[_0x1f0ca9(0x9c1)][_0x1f0ca9(0xc4b)](_0x20afb4)))return!![];return!VisuMZ[_0x1f0ca9(0xae2)][_0x1f0ca9(0x837)][_0x1f0ca9(0x835)][_0x1f0ca9(0x359)];},Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x337)]=function(_0x5404a6){const _0x39db9e=_0x4fbf70;if(!VisuMZ['BattleCore'][_0x39db9e(0x837)][_0x39db9e(0x835)]['EnableSoftCap'])return _0x5404a6;const _0x2fbe5f=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x39db9e(0x98d)]()[_0x39db9e(0x9c1)][_0x39db9e(0xc4b)](_0x2fbe5f))return _0x5404a6;if(this['subject']()[_0x39db9e(0xabd)]()[_0x39db9e(0xbb8)](_0x3fc31b=>_0x3fc31b&&_0x3fc31b[_0x39db9e(0x9c1)]['match'](_0x2fbe5f)))return _0x5404a6;const _0x239b9e=_0x5404a6<0x0?-0x1:0x1;_0x5404a6=Math['abs'](_0x5404a6);let _0xec8204=this[_0x39db9e(0x928)]()['softDamageCapRate']();if(this[_0x39db9e(0x98d)]()['note'][_0x39db9e(0xc4b)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)){if('rtXaJ'!==_0x39db9e(0xc96)){const _0xe3b635=_0x220cef[_0x5a9fb7];if(!_0xe3b635)return;const _0x226c39=new _0x44b933();this[_0x39db9e(0xb42)](_0x226c39),_0x226c39[_0x39db9e(0x609)](_0xdd350);}else _0xec8204+=Number(RegExp['$1'])/0x64;}_0xec8204=_0xec8204[_0x39db9e(0x6b4)](0.01,0x1);const _0x1a05ee=this[_0x39db9e(0xa08)](),_0x19f075=_0xec8204*_0x1a05ee;if(_0x5404a6>_0x19f075&&_0x1a05ee>_0x19f075){_0x5404a6-=_0x19f075;const _0x374b6e=VisuMZ['BattleCore'][_0x39db9e(0x837)]['Damage'][_0x39db9e(0xcdf)],_0x274e4b=Math[_0x39db9e(0x6f0)](0x1-_0x5404a6/((_0x1a05ee-_0x19f075)*_0x374b6e+_0x5404a6),0.01);_0x5404a6*=_0x274e4b,_0x5404a6+=_0x19f075;}return _0x5404a6*_0x239b9e;},Game_Action['prototype'][_0x4fbf70(0xa08)]=function(){const _0x388492=_0x4fbf70;if(this['item']()[_0x388492(0x9c1)]['match'](/<DAMAGE CAP:[ ](\d+)>/i)){if(_0x388492(0xb2c)===_0x388492(0xb2c))return Number(RegExp['$1']);else this['addChild'](this[_0x388492(0x50b)]);}else{if(_0x388492(0x7ad)===_0x388492(0x94f))this['drawItemStyleIconText'](_0x3128c4);else return this[_0x388492(0x928)]()[_0x388492(0x3ef)]();}},Game_Action['prototype'][_0x4fbf70(0x1e9)]=function(_0x3ac433){const _0x50c6b7=_0x4fbf70;console[_0x50c6b7(0x4f1)](_0x3ac433);let _0x51a4c3=this[_0x50c6b7(0xa08)]();return _0x3ac433['clamp'](-_0x51a4c3,_0x51a4c3);},Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x7ec)]=function(){const _0x47a76e=_0x4fbf70;if(!this[_0x47a76e(0x98d)]())return![];return(this[_0x47a76e(0x98d)]()[_0x47a76e(0x9c1)]||'')['match'](/<DISPERSE DAMAGE>/i);},Game_Action['prototype'][_0x4fbf70(0xd20)]=function(_0x34ba1b){const _0x276ed4=_0x4fbf70;if(this[_0x276ed4(0x7ec)]()){let _0x3409ea=BattleManager['_targets'];_0x34ba1b/=_0x3409ea[_0x276ed4(0x9d2)],this[_0x276ed4(0x4c0)]()&&(_0x34ba1b*=this['subject']()[_0x276ed4(0x9ff)]()+0x1),_0x34ba1b=_0x34ba1b>0x0?Math['ceil'](_0x34ba1b):Math[_0x276ed4(0xb2d)](_0x34ba1b);}return _0x34ba1b;},VisuMZ[_0x4fbf70(0xae2)]['Game_Action_makeDamageValueDisperse']=Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x67c)],Game_Action[_0x4fbf70(0x92c)]['makeDamageValue']=function(_0x2c2eec,_0x56c625){const _0x1b8785=_0x4fbf70;let _0x4a6e3c=VisuMZ[_0x1b8785(0xae2)][_0x1b8785(0x729)][_0x1b8785(0xc4a)](this,_0x2c2eec,_0x56c625);return this[_0x1b8785(0xd20)](_0x4a6e3c);},Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x4dd)]=function(_0x578283,_0x78cb2b){const _0x3dc501=_0x4fbf70;let _0x534eae=(_0x578283[_0x3dc501(0x273)]*_0x78cb2b[_0x3dc501(0x998)]+_0x78cb2b['value2'])*_0x578283[_0x3dc501(0xac6)];_0x534eae=this[_0x3dc501(0xd20)](_0x534eae);if(this[_0x3dc501(0x3a8)]()){if('RDoSC'!==_0x3dc501(0x2f3)){this[_0x3dc501(0xbb9)]=_0x120373,this[_0x3dc501(0x307)]='';const _0x4ff37e=new _0x5b5635(0x0,0x0,_0x1acfd3[_0x3dc501(0x2d5)],this[_0x3dc501(0x445)]()*0x4);_0x1cb221[_0x3dc501(0x92c)]['initialize'][_0x3dc501(0xc4a)](this,_0x4ff37e),this[_0x3dc501(0x2fb)](0x2),this[_0x3dc501(0x8ed)]=0x0;}else _0x534eae*=this[_0x3dc501(0x928)]()['pha'];}_0x534eae=Math[_0x3dc501(0xb2d)](_0x534eae),_0x534eae!==0x0&&(_0x3dc501(0xa5a)===_0x3dc501(0xa5a)?(_0x578283['gainHp'](_0x534eae),this[_0x3dc501(0xb88)](_0x578283)):(this[_0x3dc501(0x8dc)](),this['createUIContainer'](),this[_0x3dc501(0x668)](),this['createDamageContainer'](),this['adjustFlippedBattlefield']()));},Game_Action['prototype'][_0x4fbf70(0xcf0)]=function(_0x5e5d72,_0x1ef954){const _0x7430ff=_0x4fbf70;let _0x136ce9=(_0x5e5d72[_0x7430ff(0xc73)]*_0x1ef954[_0x7430ff(0x998)]+_0x1ef954[_0x7430ff(0x222)])*_0x5e5d72[_0x7430ff(0xac6)];_0x136ce9=this['disperseDamage'](_0x136ce9);this['isItem']()&&('ntZHM'!==_0x7430ff(0xa13)?_0x136ce9*=this['subject']()[_0x7430ff(0x333)]:(this['_shadowSprite'][_0x7430ff(0x737)]=this[_0x7430ff(0x80d)]['hasSvBattler'](),this['updateShadowPosition']()));_0x136ce9=Math[_0x7430ff(0xb2d)](_0x136ce9);if(_0x136ce9!==0x0){if(_0x7430ff(0xcdc)===_0x7430ff(0x534))return _0x6daf3e[_0x7430ff(0xae2)][_0x7430ff(0x7db)]['call'](this);else _0x5e5d72[_0x7430ff(0x43a)](_0x136ce9),this['makeSuccess'](_0x5e5d72);}},Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0xb9b)]=function(_0xd0c7cb,_0xc05c4b){const _0x5a266e=_0x4fbf70;let _0x5b226c=Math[_0x5a266e(0xb2d)](_0xc05c4b['value1']);_0x5b226c=this[_0x5a266e(0xd20)](_0x5b226c),_0x5b226c!==0x0&&('YrZdf'===_0x5a266e(0x354)?(_0xd0c7cb[_0x5a266e(0x4b9)](_0x5b226c),this[_0x5a266e(0xb88)](_0xd0c7cb)):(_0x2a3307[_0x5a266e(0xae2)][_0x5a266e(0x679)][_0x5a266e(0xc4a)](this),this[_0x5a266e(0x90c)]()));},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x564)]=Game_Action['prototype'][_0x4fbf70(0xbdf)],Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0xbdf)]=function(_0x3f1050){const _0x13cd6e=_0x4fbf70;this[_0x13cd6e(0x6ee)](_0x13cd6e(0x382),_0x3f1050,0x0,!![]),VisuMZ[_0x13cd6e(0xae2)][_0x13cd6e(0x564)][_0x13cd6e(0xc4a)](this,_0x3f1050),this['applyBattleCoreJS'](_0x13cd6e(0x8d2),_0x3f1050,this[_0x13cd6e(0x68a)]||0x0,!![]),this[_0x13cd6e(0x87c)](_0x3f1050);},Game_Action['prototype'][_0x4fbf70(0x6ee)]=function(_0x28143f,_0x55b86c,_0x38e005,_0x1c4121){const _0x47b2ac=_0x4fbf70;if(this[_0x47b2ac(0x42d)]||this[_0x47b2ac(0x913)])return;_0x38e005=_0x38e005||0x0;const _0xc8e5e1=_0x38e005,_0x5b72ab=VisuMZ['BattleCore']['Settings'][_0x47b2ac(0x73d)],_0x1f7c31=_0x28143f['format']('');if(_0x5b72ab[_0x1f7c31]){if(_0x47b2ac(0x3a1)!==_0x47b2ac(0x3a1))this[_0x47b2ac(0xb1b)]&&this['_mainSprite'][_0x47b2ac(0xaaa)](_0x148351);else{_0x38e005=_0x5b72ab[_0x1f7c31][_0x47b2ac(0xc4a)](this,_0x38e005,_0x55b86c);if(_0x1c4121)_0x38e005=_0xc8e5e1;}}let _0x5bca97=VisuMZ['BattleCore']['createKeyJS'](this[_0x47b2ac(0x98d)](),_0x28143f[_0x47b2ac(0x946)](''));if(VisuMZ[_0x47b2ac(0xae2)]['JS'][_0x5bca97]){_0x38e005=VisuMZ[_0x47b2ac(0xae2)]['JS'][_0x5bca97][_0x47b2ac(0xc4a)](this,this['subject'](),_0x55b86c,this[_0x47b2ac(0x98d)](),_0x38e005);if(_0x1c4121)_0x38e005=_0xc8e5e1;}for(const _0x100452 of this['subject']()[_0x47b2ac(0xabd)]()){if(_0x47b2ac(0x6fc)!==_0x47b2ac(0x8e1)){if(!_0x100452)continue;_0x5bca97=VisuMZ[_0x47b2ac(0xae2)][_0x47b2ac(0xd27)](_0x100452,_0x28143f[_0x47b2ac(0x946)](_0x47b2ac(0xbfc)));if(VisuMZ['BattleCore']['JS'][_0x5bca97]){_0x38e005=VisuMZ[_0x47b2ac(0xae2)]['JS'][_0x5bca97]['call'](this,this[_0x47b2ac(0x928)](),_0x55b86c,_0x100452,_0x38e005);if(_0x1c4121)_0x38e005=_0xc8e5e1;}}else return this[_0x47b2ac(0xafc)]()['filter'](_0x1786a3=>_0x1786a3[_0x47b2ac(0x822)]());}for(const _0x316d25 of _0x55b86c['traitObjects']()){if(!_0x316d25)continue;_0x5bca97=VisuMZ[_0x47b2ac(0xae2)][_0x47b2ac(0xd27)](_0x316d25,_0x28143f[_0x47b2ac(0x946)](_0x47b2ac(0x3ac)));if(VisuMZ[_0x47b2ac(0xae2)]['JS'][_0x5bca97]){if('JxUnU'===_0x47b2ac(0x241)){_0x38e005=VisuMZ[_0x47b2ac(0xae2)]['JS'][_0x5bca97]['call'](this,this[_0x47b2ac(0x928)](),_0x55b86c,_0x316d25,_0x38e005);if(_0x1c4121)_0x38e005=_0xc8e5e1;}else this[_0x47b2ac(0x66c)]['x']=-this[_0x47b2ac(0x66c)][_0x47b2ac(0x606)]-0x4;}}return _0x38e005;},Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x815)]=function(_0x816767){const _0x21c4c1=_0x4fbf70,_0x513ab1=this['_totalValue']||0x0,_0x2214d7=VisuMZ[_0x21c4c1(0xae2)]['Settings'][_0x21c4c1(0x73d)],_0x2bbb1b=_0x816767[_0x21c4c1(0x946)]('');_0x2214d7[_0x2bbb1b]&&_0x2214d7[_0x2bbb1b]['call'](this,_0x513ab1);let _0x44e332=VisuMZ[_0x21c4c1(0xae2)][_0x21c4c1(0xd27)](this[_0x21c4c1(0x98d)](),_0x816767);VisuMZ[_0x21c4c1(0xae2)]['JS'][_0x44e332]&&VisuMZ[_0x21c4c1(0xae2)]['JS'][_0x44e332][_0x21c4c1(0xc4a)](this,this['subject'](),this['subject'](),this[_0x21c4c1(0x98d)](),_0x513ab1);for(const _0x921fa8 of this[_0x21c4c1(0x928)]()[_0x21c4c1(0xabd)]()){if(_0x21c4c1(0x37a)!==_0x21c4c1(0xa10)){if(!_0x921fa8)continue;_0x44e332=VisuMZ[_0x21c4c1(0xae2)][_0x21c4c1(0xd27)](_0x921fa8,_0x816767),VisuMZ[_0x21c4c1(0xae2)]['JS'][_0x44e332]&&(_0x21c4c1(0x45a)!=='mTJCK'?VisuMZ[_0x21c4c1(0xae2)]['JS'][_0x44e332][_0x21c4c1(0xc4a)](this,this[_0x21c4c1(0x928)](),this[_0x21c4c1(0x928)](),_0x921fa8,_0x513ab1):(this['_onceParallelInterpreters']=this[_0x21c4c1(0x364)]||[],this['_onceParallelInterpreters'][_0x21c4c1(0x25b)](_0x1945a0)));}else{const _0x246081=_0x244f3b(_0x391737['$1']);return[_0x121c35[_0x21c4c1(0x9d7)]()[_0x246081]];}}},Game_Action['prototype'][_0x4fbf70(0x73e)]=function(){const _0x5522f6=_0x4fbf70;return VisuMZ[_0x5522f6(0xae2)][_0x5522f6(0x837)][_0x5522f6(0x73d)][_0x5522f6(0x641)]['call'](this);},Game_Action['prototype'][_0x4fbf70(0xc43)]=function(){const _0x374f5c=_0x4fbf70;return VisuMZ[_0x374f5c(0xae2)]['Settings']['Mechanics'][_0x374f5c(0x406)];},Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x650)]=function(){const _0x24aff6=_0x4fbf70;if(this[_0x24aff6(0x349)]===_0x24aff6(0xc76))return![];if(this['_targetBattlerKey']===_0x24aff6(0xb98))return![];if(!this[_0x24aff6(0x98d)]())return![];return this[_0x24aff6(0x98d)]()[_0x24aff6(0x9c1)][_0x24aff6(0xc4b)](/<JS TARGETS>/i);},Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x3f8)]=function(){const _0x10f761=_0x4fbf70;if(this[_0x10f761(0x349)]===_0x10f761(0xc76))return![];if(this[_0x10f761(0x349)]===_0x10f761(0xb98))return![];if(!this[_0x10f761(0x20c)]&&this['subject']()['isConfused']())return![];if(this['isCustomBattleScope']())return!![];if(!this[_0x10f761(0x98d)]())return![];return typeof this[_0x10f761(0x98d)]()[_0x10f761(0x302)]===_0x10f761(0x662);},VisuMZ[_0x4fbf70(0xae2)]['Game_Action_isForOpponent']=Game_Action['prototype']['isForOpponent'],Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x7c1)]=function(){const _0x2f3f7b=_0x4fbf70;if(this[_0x2f3f7b(0x349)]===_0x2f3f7b(0xc76))return![];if(this[_0x2f3f7b(0x349)]==='all\x20enemies')return!![];if(this[_0x2f3f7b(0x3f8)]()&&!this[_0x2f3f7b(0x650)]())return this[_0x2f3f7b(0xc97)]();else{if('KSFQD'===_0x2f3f7b(0x296))return VisuMZ[_0x2f3f7b(0xae2)][_0x2f3f7b(0x84c)]['call'](this);else _0x5dc5cc[_0x2f3f7b(0xae2)][_0x2f3f7b(0x324)](_0x416a76,_0x1e438e);}},Game_Action['prototype'][_0x4fbf70(0xc97)]=function(){const _0x4b227d=_0x4fbf70,_0x171f30=this[_0x4b227d(0x98d)]()['scope'];return _0x171f30[_0x4b227d(0xc4b)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xb2a)]=Game_Action['prototype'][_0x4fbf70(0x477)],Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x477)]=function(){const _0x352c3d=_0x4fbf70;if(this[_0x352c3d(0x349)]===_0x352c3d(0xc76))return!![];if(this[_0x352c3d(0x349)]===_0x352c3d(0xb98))return![];if(this[_0x352c3d(0x3f8)]()&&!this['isCustomBattleScope']()){if('SAzEK'!=='yRcte')return this[_0x352c3d(0xd61)]();else{const _0x2d18dd=_0x3f3587[0x0][_0x352c3d(0x946)](_0x162b3f[0x0]),_0x512ec9=_0x520b1e[0x1][_0x352c3d(0x946)](_0x2cc5f7[0x1]),_0x149fe5=new _0x2597c8(_0x930b45[_0x352c3d(0x946)](_0x512ec9),'i');_0x4df6e7[_0x2d18dd]=_0x149fe5;}}else{if(_0x352c3d(0x6a4)!==_0x352c3d(0x6a4)){if(!_0x5f2b1f)return![];return _0x10bd4b[_0x352c3d(0xa93)]()===this[_0x352c3d(0x4e8)]();}else return VisuMZ['BattleCore'][_0x352c3d(0xb2a)]['call'](this);}},Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0xd61)]=function(){const _0x4c3ce3=_0x4fbf70,_0x4ac1ba=this[_0x4c3ce3(0x98d)]()[_0x4c3ce3(0x302)];return _0x4ac1ba[_0x4c3ce3(0xc4b)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x83f)]=function(){const _0x56df21=_0x4fbf70;if(this[_0x56df21(0x3f8)]()&&!this[_0x56df21(0x650)]()){const _0x166209=this[_0x56df21(0x98d)]()[_0x56df21(0x302)];return _0x166209[_0x56df21(0xc4b)](/(?:ENEMY|FOE)/i)&&_0x166209['match'](/OR/i)&&_0x166209['match'](/(?:ALLY|FRIEND)/i);}else return![];},Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x1cd)]=function(){const _0x54776d=_0x4fbf70;if(this[_0x54776d(0x83f)]()){const _0x1b2ac9=this[_0x54776d(0x98d)]()[_0x54776d(0x302)];if(_0x1b2ac9['match'](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];}return![];},Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x47c)]=function(){const _0x2cc5e6=_0x4fbf70;if(this[_0x2cc5e6(0x83f)]()){const _0x32e998=this['item']()['scope'];if(_0x32e998[_0x2cc5e6(0xc4b)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];}return![];},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x92d)]=Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x875)],Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x875)]=function(){const _0x48f3d1=_0x4fbf70;return this['isBattleCoreTargetScope']()&&!this['isCustomBattleScope']()?this[_0x48f3d1(0x9d4)]():VisuMZ[_0x48f3d1(0xae2)][_0x48f3d1(0x92d)]['call'](this);},Game_Action['prototype'][_0x4fbf70(0x9d4)]=function(){const _0x374ca9=_0x4fbf70;if(this[_0x374ca9(0x83f)]())return!![];return![];},Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x570)]=function(){const _0x4eb273=_0x4fbf70;return this[_0x4eb273(0x98d)]()&&this[_0x4eb273(0x98d)]()['note'][_0x4eb273(0xc4b)](/<CANNOT TARGET (?:USER|SELF)>/i);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x7db)]=Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0xa44)],Game_Action[_0x4fbf70(0x92c)]['isForOne']=function(){const _0x6cc75b=_0x4fbf70;if(this[_0x6cc75b(0x349)]===_0x6cc75b(0xc76))return![];if(this[_0x6cc75b(0x349)]===_0x6cc75b(0xb98))return![];if(this['isBattleCoreTargetScope']()&&!this[_0x6cc75b(0x650)]())return _0x6cc75b(0xa95)===_0x6cc75b(0xa95)?this[_0x6cc75b(0x971)]():_0x28d2bd['_baseY']-_0x32f68f['_baseY'];else{if('vUviq'!==_0x6cc75b(0xc51))this[_0x6cc75b(0xafb)]=this[_0x6cc75b(0xafb)]||[];else return VisuMZ['BattleCore'][_0x6cc75b(0x7db)][_0x6cc75b(0xc4a)](this);}},Game_Action[_0x4fbf70(0x92c)]['isForOneBattleCore']=function(){const _0x5266a1=_0x4fbf70;if(this[_0x5266a1(0x83f)]())return!![];return![];},VisuMZ[_0x4fbf70(0xae2)]['Game_Action_isForRandom']=Game_Action['prototype'][_0x4fbf70(0xa61)],Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0xa61)]=function(){const _0x141a13=_0x4fbf70;if(this['_targetBattlerKey']===_0x141a13(0xc76))return![];if(this['_targetBattlerKey']===_0x141a13(0xb98))return![];return this[_0x141a13(0x3f8)]()&&!this[_0x141a13(0x650)]()?this['isForRandomBattleCore']():VisuMZ['BattleCore'][_0x141a13(0x527)][_0x141a13(0xc4a)](this);},Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x466)]=function(){const _0x82af8c=_0x4fbf70,_0xd32333=this[_0x82af8c(0x98d)]()[_0x82af8c(0x302)];return _0xd32333['match'](/(?:RAND|RANDOM)/i);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xa97)]=Game_Action['prototype'][_0x4fbf70(0x5c7)],Game_Action[_0x4fbf70(0x92c)]['isForAll']=function(){const _0x2c2bcc=_0x4fbf70;if(this[_0x2c2bcc(0x349)]===_0x2c2bcc(0xc76))return!![];if(this['_targetBattlerKey']==='all\x20enemies')return!![];return VisuMZ[_0x2c2bcc(0xae2)]['Game_Action_isForAll'][_0x2c2bcc(0xc4a)](this);},Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x9dd)]=function(){const _0x5ad8c3=_0x4fbf70;if(!this[_0x5ad8c3(0x98d)]())return![];if(this[_0x5ad8c3(0x5e3)]())return![];return(this[_0x5ad8c3(0x98d)]()[_0x5ad8c3(0x9c1)]||'')[_0x5ad8c3(0xc4b)](/<SINGLE OR MULTIPLE SELECT>/i);},VisuMZ['BattleCore'][_0x4fbf70(0x19a)]=Game_Action[_0x4fbf70(0x92c)]['testApply'],Game_Action['prototype'][_0x4fbf70(0x8d7)]=function(_0x4d393c){const _0x4e5f86=_0x4fbf70;if(this[_0x4e5f86(0x570)]()&&_0x4d393c===this[_0x4e5f86(0x928)]())return![];return VisuMZ['BattleCore'][_0x4e5f86(0x19a)][_0x4e5f86(0xc4a)](this,_0x4d393c);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xd6c)]=Game_Action['prototype']['itemTargetCandidates'],Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x20b)]=function(){const _0x4bdab8=_0x4fbf70,_0x1f4490=VisuMZ[_0x4bdab8(0xae2)][_0x4bdab8(0xd6c)]['call'](this);if(this[_0x4bdab8(0x570)]())_0x1f4490['remove'](this[_0x4bdab8(0x928)]());return _0x1f4490;},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x3a7)]=Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0xcbf)],Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0xcbf)]=function(){const _0x50d070=_0x4fbf70;if(this[_0x50d070(0x3f8)]()&&!this['isCustomBattleScope']())return this[_0x50d070(0x7be)]();else{if('uEzxv'!==_0x50d070(0x8fd))this[_0x50d070(0x691)](...arguments);else return VisuMZ[_0x50d070(0xae2)][_0x50d070(0x3a7)][_0x50d070(0xc4a)](this);}},Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x7be)]=function(){const _0x6b68fb=_0x4fbf70,_0x29255d=this[_0x6b68fb(0x98d)]()[_0x6b68fb(0x302)];if(_0x29255d['match'](/RANDOM/i))return![];if(_0x29255d['match'](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x29255d[_0x6b68fb(0xc4b)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];if(_0x29255d['match'](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];if(_0x29255d['match'](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];return VisuMZ[_0x6b68fb(0xae2)][_0x6b68fb(0x3a7)][_0x6b68fb(0xc4a)](this);},VisuMZ[_0x4fbf70(0xae2)]['Game_Action_makeTargets']=Game_Action['prototype'][_0x4fbf70(0x57c)],Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x57c)]=function(){const _0x11ad2a=_0x4fbf70;let _0x54b1e9=[];return this[_0x11ad2a(0x3f8)]()?this['isCustomBattleScope']()?_0x54b1e9=this[_0x11ad2a(0x8c9)]():_0x54b1e9=this[_0x11ad2a(0xca5)]():_0x54b1e9=VisuMZ[_0x11ad2a(0xae2)][_0x11ad2a(0x267)][_0x11ad2a(0xc4a)](this),_0x54b1e9=this[_0x11ad2a(0x6f2)](_0x54b1e9),_0x54b1e9;},Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0xcd3)]=function(){const _0x73ba0b=_0x4fbf70;return this['subject']()[_0x73ba0b(0xc9f)]()&&!this['subject']()[_0x73ba0b(0x652)]();},Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x8c9)]=function(){const _0x12c513=_0x4fbf70,_0xa46373=VisuMZ[_0x12c513(0xae2)][_0x12c513(0xd27)](this[_0x12c513(0x98d)](),_0x12c513(0x2c9));if(VisuMZ[_0x12c513(0xae2)]['JS'][_0xa46373]){targets=VisuMZ['BattleCore'][_0x12c513(0x267)]['call'](this);const _0x9af535=VisuMZ['BattleCore'][_0x12c513(0xd27)](this[_0x12c513(0x98d)](),'Targets');return targets=VisuMZ[_0x12c513(0xae2)]['JS'][_0x9af535][_0x12c513(0xc4a)](this,this['subject'](),targets),this[_0x12c513(0x305)](targets);}return this[_0x12c513(0xca5)]();},Game_Action['prototype'][_0x4fbf70(0xca5)]=function(){const _0xfdc091=_0x4fbf70;let _0xd0e369=[];const _0x3c0a61=String(this[_0xfdc091(0x98d)]()[_0xfdc091(0x302)]);if(this[_0xfdc091(0x47c)]())return this[_0xfdc091(0xcd3)]()?(_0xd0e369=this[_0xfdc091(0x5e9)](),this['repeatTargets'](_0xd0e369)):(this['_targetIndex']=-0x1,_0xd0e369[_0xfdc091(0x25b)](...this[_0xfdc091(0x30a)]()),this[_0xfdc091(0x305)](_0xd0e369));if(this['isForAnyoneFocusFriends']()){if('vbxkR'===_0xfdc091(0x299)){if(!_0x1c1b0d[_0xfdc091(0x90d)]())return;if(!_0x4db3f4[_0xfdc091(0x524)])return;_0x9dcb04[_0xfdc091(0x334)](_0x58a263,_0x111f8f);const _0x201485=_0xdd4a8b[_0xfdc091(0xc52)](),_0x3b24c3=_0x148011[_0xfdc091(0x938)](_0x267e2f[_0xfdc091(0x2c9)]),_0x1f3aeb=_0x5f1640[_0xfdc091(0x554)];_0x3a24de['setBattleCameraTargets'](_0x3b24c3,_0x2b0749[_0xfdc091(0x590)],_0xa7eec6[_0xfdc091(0x483)]);if(_0x1f3aeb)_0x201485['setWaitMode']('battleCamera');}else{if(this['isSubjectValidForAnyoneSelect']()){if(_0xfdc091(0x83a)!==_0xfdc091(0xa33))return _0xd0e369=this['getBattlerKeyTargets'](),this[_0xfdc091(0x305)](_0xd0e369);else _0x4a983f[_0xfdc091(0x8f5)]([this],_0x184786);}else{if(Imported[_0xfdc091(0xcf8)]){if(VisuMZ['BattleAI'][_0xfdc091(0x1a8)]<1.19){let _0x4624de='';_0x4624de+=_0xfdc091(0x686),_0x4624de+=_0xfdc091(0x620),_0x4624de+='with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!',alert(_0x4624de),SceneManager[_0xfdc091(0x4c5)]();}}return this[_0xfdc091(0x991)]=-0x1,_0xd0e369[_0xfdc091(0x25b)](...this[_0xfdc091(0x29d)]()),this['repeatTargets'](_0xd0e369);}}}if(_0x3c0a61[_0xfdc091(0xc4b)](/(\d+) RANDOM ANY/i)){let _0x31cb13=Number(RegExp['$1']);while(_0x31cb13--){if(_0xfdc091(0x4d4)!==_0xfdc091(0x63c)){const _0x43c918=Math[_0xfdc091(0x545)](0x2)===0x0?this[_0xfdc091(0xa93)]():this[_0xfdc091(0x4e8)]();_0xd0e369['push'](_0x43c918[_0xfdc091(0x82c)]());}else return this[_0xfdc091(0xc9f)]&&this['isActor']()?_0x40f41b['BattleCore'][_0xfdc091(0x837)][_0xfdc091(0x410)][_0xfdc091(0xd71)]:_0x41c90d[_0xfdc091(0xae2)][_0xfdc091(0x837)][_0xfdc091(0x73f)][_0xfdc091(0xd71)];}return this[_0xfdc091(0x305)](_0xd0e369);}if(_0x3c0a61[_0xfdc091(0xc4b)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){if(_0xfdc091(0x671)===_0xfdc091(0x671)){let _0x4f4c50=Number(RegExp['$1']);while(_0x4f4c50--){_0xd0e369[_0xfdc091(0x25b)](this[_0xfdc091(0xa93)]()['trueRandomTarget']());}return this[_0xfdc091(0x305)](_0xd0e369);}else{const _0x1c24f8=this[_0xfdc091(0xb81)]();if(_0x1c24f8)_0x1c24f8[_0xfdc091(0x581)](_0x2ad738);}}if(_0x3c0a61[_0xfdc091(0xc4b)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0xc8248d=Number(RegExp['$1']);while(_0xc8248d--){_0xd0e369[_0xfdc091(0x25b)](this[_0xfdc091(0x4e8)]()[_0xfdc091(0x82c)]());}return this[_0xfdc091(0x305)](_0xd0e369);}if(_0x3c0a61[_0xfdc091(0xc4b)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0xfdc091(0x4f6)!==_0xfdc091(0x4f6)?_0x5afe28['BattleCore'][_0xfdc091(0x527)][_0xfdc091(0xc4a)](this):(_0xd0e369['push'](...this[_0xfdc091(0x4e8)]()[_0xfdc091(0x1c3)]()[_0xfdc091(0xa29)](_0x20c2d7=>_0x20c2d7!==this['subject']())),this[_0xfdc091(0x305)](_0xd0e369));return VisuMZ['BattleCore'][_0xfdc091(0x267)][_0xfdc091(0xc4a)](this);},Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x939)]=function(_0x2a8044){const _0x46a983=_0x4fbf70,_0x3f5b8c=[];for(let _0x237e60=0x0;_0x237e60<this[_0x46a983(0x33f)]();_0x237e60++){_0x46a983(0x424)!==_0x46a983(0x424)?(this['_skillWindow']['close'](),this[_0x46a983(0x32a)][_0x46a983(0x5f4)]()):_0x3f5b8c[_0x46a983(0x25b)](_0x2a8044[_0x46a983(0x82c)]());}return _0x3f5b8c;},Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x6f2)]=function(_0x372a08){const _0x2b3b68=_0x4fbf70;if(!this[_0x2b3b68(0x98d)]())return _0x372a08;const _0x4a853a=this[_0x2b3b68(0x98d)]()[_0x2b3b68(0x9c1)];if(this[_0x2b3b68(0x570)]()){this['isForAll']()&&_0x372a08[_0x2b3b68(0x5d9)](this[_0x2b3b68(0x928)]());if(_0x372a08[_0x2b3b68(0x6e3)](this['subject']())){const _0x540876=this[_0x2b3b68(0x4e8)]()[_0x2b3b68(0x1c3)]()[_0x2b3b68(0x5d9)](this[_0x2b3b68(0x928)]());if(_0x540876[_0x2b3b68(0x9d2)]>0x0){if('tFCSt'==='pXEET')this['drawItemStyleIcon'](_0x20d161);else{_0x540876[_0x2b3b68(0x72f)]((_0x178a5e,_0x57feec)=>_0x178a5e[_0x2b3b68(0xb21)]()-_0x57feec[_0x2b3b68(0xb21)]());while(_0x372a08['includes'](this['subject']())){if('KDGNL'==='KDGNL'){const _0x44c190=_0x372a08['indexOf'](this[_0x2b3b68(0x928)]());_0x372a08[_0x44c190]=_0x540876[Math['randomInt'](_0x540876[_0x2b3b68(0x9d2)])];}else _0x277d86=_0x516b12>=_0x2dd257?_0x2d9eae:_0x2eda74;}}}else _0x372a08[_0x2b3b68(0x5d9)](this[_0x2b3b68(0x928)]());}}return _0x372a08;},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x8ba)]=Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0xb3c)],Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0xb3c)]=function(_0xb9cac1,_0x40d8c6){const _0x99bb7a=_0x4fbf70;VisuMZ[_0x99bb7a(0xae2)][_0x99bb7a(0x8ba)][_0x99bb7a(0xc4a)](this,_0xb9cac1,_0x40d8c6);if(!_0xb9cac1['isImmortal']())return;for(const _0x4df872 of this['subject']()[_0x99bb7a(0xaa8)]()){if('QLTQw'===_0x99bb7a(0xc02)){if(_0x4df872===_0xb9cac1[_0x99bb7a(0xc8a)]()){let _0x19aee9=_0x40d8c6[_0x99bb7a(0x998)];_0x19aee9*=_0xb9cac1[_0x99bb7a(0x3f1)](_0x4df872),_0x19aee9*=this[_0x99bb7a(0x928)]()[_0x99bb7a(0xd1a)](_0x4df872),_0x19aee9*=this[_0x99bb7a(0x33c)](_0xb9cac1);if(Math[_0x99bb7a(0x69a)]()<_0x19aee9){if(_0x99bb7a(0x589)===_0x99bb7a(0x589))_0xb9cac1[_0x99bb7a(0xb66)]=!![],this[_0x99bb7a(0xb88)](_0xb9cac1);else{const _0x1c2228=this['faceRect'](_0x2f1eee);this['drawActorFace'](_0x1803a5,_0x1c2228['x'],_0x1c2228['y'],_0x1c2228['width'],_0x1c2228[_0x99bb7a(0x389)]);}}}}else{const _0x507cae=_0x5fb50e(_0x389825['$1'])['split'](/[\r\n]+/)[_0x99bb7a(0x5d9)](''),_0x80967e=this['processRandomizedData'](_0x507cae);_0x34d30a=this['getEnemyIdWithName'](_0x80967e)||_0x1d01fc,_0x248862=_0x54db5a[_0x99bb7a(0xcf6)](_0x38cf98);}}},VisuMZ[_0x4fbf70(0xae2)]['Game_Action_itemEffectAddNormalState']=Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0xbda)],Game_Action['prototype'][_0x4fbf70(0xbda)]=function(_0x45a2c3,_0x4be9c2){const _0x4d41ff=_0x4fbf70;VisuMZ[_0x4d41ff(0xae2)][_0x4d41ff(0x9fd)]['call'](this,_0x45a2c3,_0x4be9c2);if(!_0x45a2c3['isImmortal']())return;if(_0x4be9c2[_0x4d41ff(0x1d8)]!==_0x45a2c3[_0x4d41ff(0xc8a)]())return;let _0x2fbfe2=_0x4be9c2['value1'];if(!this['isCertainHit']()){if(_0x4d41ff(0xa4e)===_0x4d41ff(0xa4e))_0x2fbfe2*=_0x45a2c3[_0x4d41ff(0x3f1)](_0x4be9c2[_0x4d41ff(0x1d8)]),_0x2fbfe2*=this[_0x4d41ff(0x33c)](_0x45a2c3);else{_0x3d5838[_0x4d41ff(0xae2)][_0x4d41ff(0xb0c)][_0x4d41ff(0xc4a)](this,_0x1de35b),this[_0x4d41ff(0x27b)](),this[_0x4d41ff(0x719)]();const _0x4304a0=this[_0x4d41ff(0xb81)]();_0x4304a0&&(_0x4304a0[_0x4d41ff(0x33e)]=_0x1b2518,_0x4304a0['setBattler'](this));}}Math['random']()<_0x2fbfe2&&(_0x4d41ff(0xd29)===_0x4d41ff(0x6d6)?_0x4f782f[_0x4d41ff(0xd78)](_0x8ffbe7):(_0x45a2c3[_0x4d41ff(0xb66)]=!![],this['makeSuccess'](_0x45a2c3)));},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x787)]=Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0xab9)],Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0xab9)]=function(){const _0x51a42b=_0x4fbf70;VisuMZ['BattleCore']['Game_Action_applyGlobal']['call'](this),this['applyGlobalCommonEventNotetags'](),this[_0x51a42b(0x98c)]();},Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0xb29)]=function(){const _0x21ea8b=_0x4fbf70;if(!SceneManager[_0x21ea8b(0x90d)]())return;const _0x5df28c=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x16535f=this[_0x21ea8b(0x98d)]()[_0x21ea8b(0x9c1)][_0x21ea8b(0xc4b)](_0x5df28c);if(_0x16535f)for(const _0x3cfb3e of _0x16535f){if(!_0x3cfb3e)continue;_0x3cfb3e[_0x21ea8b(0xc4b)](_0x5df28c);const _0x33cd7f=String(RegExp['$1'])[_0x21ea8b(0x94a)](',')['map'](_0x28d3d2=>String(_0x28d3d2)[_0x21ea8b(0xcda)]()),_0x162e04=_0x33cd7f['map'](_0x372d60=>DataManager['getCommonEventIdWithName'](_0x372d60));for(const _0xff5d47 of _0x162e04){const _0x4b363d=$dataCommonEvents[_0xff5d47];_0x4b363d&&$gameTemp[_0x21ea8b(0x892)](_0xff5d47);}}},DataManager[_0x4fbf70(0x9f5)]=function(_0x37e699){const _0x2980f8=_0x4fbf70;_0x37e699=_0x37e699['toUpperCase']()[_0x2980f8(0xcda)](),this[_0x2980f8(0x1d2)]=this[_0x2980f8(0x1d2)]||{};if(this[_0x2980f8(0x1d2)][_0x37e699])return this[_0x2980f8(0x1d2)][_0x37e699];for(const _0x4b4117 of $dataCommonEvents){if('IhSTN'===_0x2980f8(0x300)){if(!_0x4b4117)continue;let _0x38e352=_0x4b4117[_0x2980f8(0x27a)];_0x38e352=_0x38e352['replace'](/\x1I\[(\d+)\]/gi,''),_0x38e352=_0x38e352['replace'](/\\I\[(\d+)\]/gi,''),this['_commonEventIDs'][_0x38e352[_0x2980f8(0x7a4)]()[_0x2980f8(0xcda)]()]=_0x4b4117['id'];}else this['targetActionSet'](_0x344f47,_0x36570c,_0x5b360f);}return this[_0x2980f8(0x1d2)][_0x37e699]||0x0;},Game_Action['prototype'][_0x4fbf70(0x98c)]=function(){const _0x44cbdf=_0x4fbf70;if(!SceneManager[_0x44cbdf(0x90d)]())return;const _0x485376=VisuMZ['BattleCore'][_0x44cbdf(0x837)]['Mechanics'];if(_0x485376[_0x44cbdf(0x9ca)]){if(_0x44cbdf(0xae6)===_0x44cbdf(0xaa0)){this['_borderPortraitDuration']=0x14,this['_borderPortraitSprite'][_0x44cbdf(0x597)]=_0x5c876a;_0x4db886['_scene'][_0x44cbdf(0xbea)]()?(this[_0x44cbdf(0x46d)]['x']=0x0,this['_borderPortraitTargetX']=_0x58c6f8['ceil'](_0x29416e[_0x44cbdf(0x606)]/0x2)):(this['_borderPortraitSprite']['x']=this[_0x44cbdf(0x606)],this['_borderPortraitTargetX']=this[_0x44cbdf(0x606)]*0x3/0x4);this['_borderPortraitSprite']['opacity']=0x0,this[_0x44cbdf(0x46d)]['y']=this['y']+this['height'];const _0x4d3f8a=_0x27f662[_0x44cbdf(0x55a)]();_0x4d3f8a&&(this[_0x44cbdf(0x97d)]+=_0x4d3f8a[_0x44cbdf(0x9fa)](),this[_0x44cbdf(0x46d)]['y']+=_0x4d3f8a[_0x44cbdf(0x821)]());}else $gameSwitches[_0x44cbdf(0x988)](_0x485376['SwitchCritical'],![]);}if(_0x485376[_0x44cbdf(0x9f7)]){if(_0x44cbdf(0x90b)!==_0x44cbdf(0x856))$gameSwitches[_0x44cbdf(0x988)](_0x485376[_0x44cbdf(0x9f7)],![]);else{const _0x36b92c=_0x2dbb64[_0x44cbdf(0xae2)][_0x44cbdf(0x837)][_0x44cbdf(0x835)];this['_flashColor']=_0x36b92c['CriticalColor'][_0x44cbdf(0xb12)](0x0),this[_0x44cbdf(0x212)]=_0x36b92c['CriticalDuration'];}}_0x485376[_0x44cbdf(0x7ee)]&&('wqzUs'!==_0x44cbdf(0xcf7)?_0x455285[_0x44cbdf(0xb38)][_0x44cbdf(0x4e8)]()[_0x44cbdf(0xb07)](_0x50d310):$gameVariables[_0x44cbdf(0x988)](_0x485376[_0x44cbdf(0x7ee)],0x0)),_0x485376[_0x44cbdf(0x80b)]&&$gameVariables['setValue'](_0x485376[_0x44cbdf(0x80b)],0x0);},Game_Action[_0x4fbf70(0x92c)]['applyResultSwitches']=function(_0x5c6b98){const _0x435ddb=_0x4fbf70;if(!SceneManager[_0x435ddb(0x90d)]())return;if(!_0x5c6b98)return;const _0x564c80=_0x5c6b98['result'](),_0x42508b=VisuMZ[_0x435ddb(0xae2)][_0x435ddb(0x837)][_0x435ddb(0x73d)];if(_0x42508b[_0x435ddb(0x9ca)]&&_0x564c80[_0x435ddb(0x881)]){if(_0x435ddb(0xa43)!==_0x435ddb(0xa43)){const _0x489181=_0x470d39[_0x435ddb(0x5ec)][0x0];if(_0x489181[_0x435ddb(0xc4b)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}else $gameSwitches[_0x435ddb(0x988)](_0x42508b[_0x435ddb(0x9ca)],!![]);}_0x42508b[_0x435ddb(0x9f7)]&&(_0x564c80[_0x435ddb(0x658)]||_0x564c80['evaded'])&&$gameSwitches[_0x435ddb(0x988)](_0x42508b[_0x435ddb(0x9f7)],!![]);if(_0x42508b[_0x435ddb(0x7ee)]){let _0x457c20=$gameVariables[_0x435ddb(0x9fb)](_0x42508b[_0x435ddb(0x7ee)]);_0x564c80[_0x435ddb(0xd4f)]>0x0&&(_0x457c20+=Math['abs'](_0x564c80['hpDamage'])),$gameVariables[_0x435ddb(0x988)](_0x42508b[_0x435ddb(0x7ee)],_0x457c20);}if(_0x42508b[_0x435ddb(0x80b)]){let _0x2fcc53=$gameVariables['value'](_0x42508b[_0x435ddb(0x80b)]);_0x564c80[_0x435ddb(0xd4f)]<0x0&&(_0x2fcc53+=Math['abs'](_0x564c80['hpDamage'])),$gameVariables[_0x435ddb(0x988)](_0x42508b[_0x435ddb(0x80b)],_0x2fcc53);}},VisuMZ['BattleCore'][_0x4fbf70(0x9ab)]=Game_BattlerBase[_0x4fbf70(0x92c)][_0x4fbf70(0xa77)],Game_BattlerBase[_0x4fbf70(0x92c)][_0x4fbf70(0xa77)]=function(){const _0x376901=_0x4fbf70;VisuMZ[_0x376901(0xae2)][_0x376901(0x9ab)][_0x376901(0xc4a)](this),this['initMembersBattleCore']();},Game_BattlerBase[_0x4fbf70(0x92c)][_0x4fbf70(0xa7c)]=function(){this['_immortal']=![];},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x672)]=Game_BattlerBase[_0x4fbf70(0x92c)][_0x4fbf70(0x1e5)],Game_BattlerBase[_0x4fbf70(0x92c)][_0x4fbf70(0x1e5)]=function(){const _0x1502a8=_0x4fbf70;this['_cache']={},VisuMZ['BattleCore'][_0x1502a8(0x672)]['call'](this);},Game_BattlerBase[_0x4fbf70(0x92c)][_0x4fbf70(0x607)]=function(_0x55bf3f){const _0x382f3d=_0x4fbf70;return this[_0x382f3d(0x7ff)]=this[_0x382f3d(0x7ff)]||{},this[_0x382f3d(0x7ff)][_0x55bf3f]!==undefined;},Game_BattlerBase['prototype'][_0x4fbf70(0x3ef)]=function(){const _0x7cc8f9=_0x4fbf70;if(this[_0x7cc8f9(0x7ff)][_0x7cc8f9(0x3ef)]!==undefined)return this[_0x7cc8f9(0x7ff)]['hardDamageCap'];const _0x4bfa2b=/<DAMAGE CAP:[ ](\d+)>/i,_0x22a8c4=this[_0x7cc8f9(0xabd)]()['map'](_0x27a9ff=>_0x27a9ff&&_0x27a9ff['note'][_0x7cc8f9(0xc4b)](_0x4bfa2b)?Number(RegExp['$1']):0x0);let _0x41d7fe=_0x22a8c4['length']>0x0?Math[_0x7cc8f9(0x6f0)](..._0x22a8c4):0x0;if(_0x41d7fe<=0x0)_0x41d7fe=VisuMZ['BattleCore'][_0x7cc8f9(0x837)]['Damage'][_0x7cc8f9(0x2b9)];return this[_0x7cc8f9(0x7ff)][_0x7cc8f9(0x3ef)]=_0x41d7fe,this[_0x7cc8f9(0x7ff)][_0x7cc8f9(0x3ef)];},Game_BattlerBase[_0x4fbf70(0x92c)][_0x4fbf70(0xb26)]=function(){const _0x18ad6a=_0x4fbf70;if(this[_0x18ad6a(0x7ff)]['softDamageCap']!==undefined)return this[_0x18ad6a(0x7ff)]['softDamageCap'];let _0x330963=VisuMZ[_0x18ad6a(0xae2)][_0x18ad6a(0x837)][_0x18ad6a(0x835)][_0x18ad6a(0x531)];const _0x41e66c=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x4d854a=this[_0x18ad6a(0xabd)]()[_0x18ad6a(0x990)](_0x308e73=>_0x308e73&&_0x308e73[_0x18ad6a(0x9c1)][_0x18ad6a(0xc4b)](_0x41e66c)?Number(RegExp['$1'])/0x64:0x0);return _0x330963=_0x4d854a[_0x18ad6a(0x731)]((_0x1d54d0,_0x577f9f)=>_0x1d54d0+_0x577f9f,_0x330963),this[_0x18ad6a(0x7ff)]['softDamageCap']=_0x330963,this[_0x18ad6a(0x7ff)][_0x18ad6a(0x97f)]['clamp'](0.01,0x1);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x4cb)]=Game_BattlerBase[_0x4fbf70(0x92c)]['die'],Game_BattlerBase['prototype'][_0x4fbf70(0xb9f)]=function(){const _0x425868=_0x4fbf70;VisuMZ[_0x425868(0xae2)][_0x425868(0x4cb)]['call'](this);if(SceneManager[_0x425868(0x90d)]()){if(_0x425868(0xba6)!==_0x425868(0xcf1))this[_0x425868(0x9eb)](_0x425868(0xd18));else return this['chantStyle']()?this[_0x425868(0x69f)]()&&this[_0x425868(0x69f)]()[_0x425868(0x98d)]()&&this['currentAction']()[_0x425868(0x8ca)]():this[_0x425868(0x69f)]()&&this['currentAction']()[_0x425868(0x98d)]()&&this['currentAction']()[_0x425868(0x3c3)]();}},Game_BattlerBase['prototype']['battler']=function(){const _0xa9768e=_0x4fbf70;if(!SceneManager[_0xa9768e(0x90d)]())return null;if(!SceneManager[_0xa9768e(0x32c)]['_spriteset'])return null;return SceneManager['_scene'][_0xa9768e(0x7cf)]['findTargetSprite'](this);},Game_BattlerBase[_0x4fbf70(0x92c)][_0x4fbf70(0xa3a)]=function(){const _0x35886d=_0x4fbf70;return VisuMZ[_0x35886d(0xae2)][_0x35886d(0x837)][_0x35886d(0x410)][_0x35886d(0x4ce)];},Game_BattlerBase[_0x4fbf70(0x92c)][_0x4fbf70(0xac8)]=function(){const _0x1930a8=_0x4fbf70;return VisuMZ['BattleCore'][_0x1930a8(0x837)][_0x1930a8(0x410)][_0x1930a8(0x295)];},Game_BattlerBase[_0x4fbf70(0x92c)][_0x4fbf70(0xbf3)]=function(){const _0x2e2583=_0x4fbf70;if(this[_0x2e2583(0xc9f)]&&this[_0x2e2583(0xc9f)]()){if(_0x2e2583(0x232)===_0x2e2583(0x2f4)){if(!_0x400d1a[_0x2e2583(0x90d)]())return;_0x32621a['ConvertParams'](_0x452ebe,_0x22e1c4);const _0x22c7ae=_0xee9463[_0x2e2583(0xc52)](),_0x3f8580=_0x527b5d[_0x2e2583(0xb15)],_0xe7b727=_0x46a385[_0x2e2583(0xb38)],_0x5c96ac=_0xe3484c['CreateActionSequenceTargets'](_0x4e8636[_0x2e2583(0x2c9)]),_0xd611c4=_0x32e983[_0x2e2583(0x76e)],_0x57a624=_0x2cb44d['_logWindow'];if(!_0x22c7ae||!_0x3f8580||!_0xe7b727)return;if(!_0x3f8580[_0x2e2583(0x98d)]())return;let _0x8bde42=_0x3f8580[_0x2e2583(0x98d)]()[_0x2e2583(0x475)];if(_0x8bde42<0x0)_0x8bde42=_0xe7b727[_0x2e2583(0x9f1)]();_0x3ffbaf[_0x2e2583(0x889)](_0x5c96ac,_0x8bde42,_0xd611c4),_0x34a21e[_0x2e2583(0x413)]&&_0x22c7ae['setWaitMode']('battleAnimation');}else return VisuMZ[_0x2e2583(0xae2)]['Settings'][_0x2e2583(0x410)][_0x2e2583(0xd71)];}else return VisuMZ[_0x2e2583(0xae2)][_0x2e2583(0x837)][_0x2e2583(0x73f)][_0x2e2583(0xd71)];},Game_BattlerBase[_0x4fbf70(0x92c)][_0x4fbf70(0xcb6)]=function(){return!![];},Game_BattlerBase[_0x4fbf70(0x92c)]['battleUIOffsetX']=function(){return 0x0;},Game_BattlerBase[_0x4fbf70(0x92c)][_0x4fbf70(0xb74)]=function(){return 0x0;},Game_BattlerBase['prototype'][_0x4fbf70(0x1cf)]=function(_0x740c72){const _0xb6fd93=_0x4fbf70;if(!_0x740c72)return 0x0;let _0x4b4290=0x0;const _0x260cff=_0x740c72[_0xb6fd93(0x9c1)];_0x260cff['match'](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0xb6fd93(0xc86)!==_0xb6fd93(0xc86)?this['_distortionSprite'][_0xb6fd93(0x52a)](this['_svBattlerSprite']):_0x4b4290+=Number(RegExp['$1']));if(_0x260cff[_0xb6fd93(0xc4b)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if(_0xb6fd93(0x5d4)!==_0xb6fd93(0x9c0))_0x4b4290+=Number(RegExp['$1']);else return 0x0;}return _0x4b4290;},Game_BattlerBase[_0x4fbf70(0x92c)][_0x4fbf70(0xa46)]=function(_0x57f8b8){const _0x324a2f=_0x4fbf70;if(!_0x57f8b8)return 0x0;let _0x51efdb=0x0;const _0x40eaeb=_0x57f8b8['note'];if(_0x40eaeb[_0x324a2f(0xc4b)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)){if('LOkiq'===_0x324a2f(0xbdb))_0x51efdb+=Number(RegExp['$1']);else return this[_0x324a2f(0x60f)](_0x2892c4);}return _0x40eaeb[_0x324a2f(0xc4b)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x51efdb+=Number(RegExp['$2'])),_0x51efdb;},VisuMZ['BattleCore'][_0x4fbf70(0xa01)]=Game_BattlerBase[_0x4fbf70(0x92c)][_0x4fbf70(0x88b)],Game_BattlerBase[_0x4fbf70(0x92c)][_0x4fbf70(0x88b)]=function(_0x2782d3){const _0x4462ce=_0x4fbf70;if(_0x2782d3===this[_0x4462ce(0xc8a)]()&&this[_0x4462ce(0x8c3)]())return!![];return VisuMZ[_0x4462ce(0xae2)]['Game_BattlerBase_isStateResist'][_0x4462ce(0xc4a)](this,_0x2782d3);},Game_BattlerBase[_0x4fbf70(0x92c)][_0x4fbf70(0x8c3)]=function(){const _0x1c9bfb=_0x4fbf70;return this[_0x1c9bfb(0x1ad)];},Game_BattlerBase[_0x4fbf70(0x92c)][_0x4fbf70(0x99e)]=function(_0x573260){const _0x3109ea=_0x4fbf70;if(_0x573260){if(_0x3109ea(0x82d)!==_0x3109ea(0x82d))return this[_0x3109ea(0x69f)]()&&this[_0x3109ea(0x69f)]()[_0x3109ea(0x98d)]()&&!this[_0x3109ea(0x69f)]()['isMagicSkill']();else this[_0x3109ea(0xd6f)]();}else _0x3109ea(0xd17)===_0x3109ea(0x66a)?(_0x503bfb[_0x3109ea(0xae2)][_0x3109ea(0x733)][_0x3109ea(0xc4a)](this),this[_0x3109ea(0x597)]&&(this[_0x3109ea(0x597)][_0x3109ea(0x3a9)]=_0xd0821c[_0x3109ea(0xae2)][_0x3109ea(0x837)][_0x3109ea(0x410)][_0x3109ea(0x8d8)])):this[_0x3109ea(0x8e4)]();},Game_BattlerBase[_0x4fbf70(0x92c)][_0x4fbf70(0xd6f)]=function(){const _0x8396fa=_0x4fbf70;if(this['isDead']())return;this['_immortal']=!![],this[_0x8396fa(0xb66)]=![];},Game_BattlerBase[_0x4fbf70(0x92c)][_0x4fbf70(0x8e4)]=function(){const _0x24cae0=_0x4fbf70,_0x413c87=this[_0x24cae0(0x4e4)]();this[_0x24cae0(0x1ad)]=![],_0x413c87&&this[_0x24cae0(0xb66)]&&(_0x24cae0(0x301)!==_0x24cae0(0x301)?_0x3fb88c+=_0x567671[_0x24cae0(0x77e)](_0x11b984[_0x24cae0(0xd4f)]):this['die']()),this[_0x24cae0(0xb66)]=![],this[_0x24cae0(0x1e5)](),this[_0x24cae0(0x521)]()&&_0x413c87&&(this[_0x24cae0(0xc2a)](),this[_0x24cae0(0xc12)]());},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x80a)]=Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x725)],Game_Action['prototype']['numRepeats']=function(){const _0x202496=_0x4fbf70;if(this[_0x202496(0x98d)]()){if(_0x202496(0x1df)!==_0x202496(0x1df)){const _0x2803d6=_0x192eac[_0x50dc3e];if(!_0x2803d6)return'';let _0x462fd5='';_0x462fd5+=_0x2803d6['name'];for(const _0x173768 of _0x2803d6[_0x202496(0xa81)]){for(const _0x114263 of _0x173768[_0x202496(0xa31)]){[0x6c,0x198][_0x202496(0x6e3)](_0x114263['code'])&&(_0x462fd5+='\x0a',_0x462fd5+=_0x114263[_0x202496(0x5ec)][0x0]);}}return _0x462fd5;}else return VisuMZ[_0x202496(0xae2)]['Game_Action_numRepeats']['call'](this);}else return _0x202496(0xa20)===_0x202496(0xbc6)?_0x1898dd['BattleCore'][_0x202496(0x4e0)][_0x202496(0xc4a)](this):0x0;},VisuMZ[_0x4fbf70(0xae2)]['Game_Action_setAttack']=Game_Action['prototype'][_0x4fbf70(0x28c)],Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0x28c)]=function(){const _0x36f6fd=_0x4fbf70;this[_0x36f6fd(0x928)]()&&this[_0x36f6fd(0x928)]()[_0x36f6fd(0x772)]()?VisuMZ[_0x36f6fd(0xae2)][_0x36f6fd(0xb9e)][_0x36f6fd(0xc4a)](this):this[_0x36f6fd(0xb36)]();},VisuMZ[_0x4fbf70(0xae2)]['Game_BattlerBase_canAttack']=Game_BattlerBase[_0x4fbf70(0x92c)]['canAttack'],Game_BattlerBase[_0x4fbf70(0x92c)][_0x4fbf70(0x772)]=function(){const _0x5b4a5e=_0x4fbf70;if(!this[_0x5b4a5e(0xc0d)]())return![];return VisuMZ[_0x5b4a5e(0xae2)][_0x5b4a5e(0x447)][_0x5b4a5e(0xc4a)](this);},Game_BattlerBase['prototype'][_0x4fbf70(0xc0d)]=function(){const _0x41582e=_0x4fbf70;for(const _0x2fb0e7 of this[_0x41582e(0xabd)]()){if(_0x41582e(0x801)===_0x41582e(0x801)){if(!_0x2fb0e7)continue;if(_0x2fb0e7[_0x41582e(0x9c1)]['match'](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}else this[_0x41582e(0x9eb)](_0x41582e(0x36f));}return!![];},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xb53)]=Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0xbcb)],Game_Action[_0x4fbf70(0x92c)][_0x4fbf70(0xbcb)]=function(){const _0x36d801=_0x4fbf70;this[_0x36d801(0x928)]()[_0x36d801(0x44a)]()&&VisuMZ[_0x36d801(0xae2)][_0x36d801(0xb53)]['call'](this);},VisuMZ[_0x4fbf70(0xae2)]['Game_BattlerBase_canGuard']=Game_BattlerBase[_0x4fbf70(0x92c)][_0x4fbf70(0x44a)],Game_BattlerBase[_0x4fbf70(0x92c)][_0x4fbf70(0x44a)]=function(){const _0x5013f9=_0x4fbf70;if(!this[_0x5013f9(0x9e3)]())return![];return VisuMZ[_0x5013f9(0xae2)][_0x5013f9(0x754)]['call'](this);},Game_BattlerBase[_0x4fbf70(0x92c)]['canGuardBattleCore']=function(){const _0x5ade73=_0x4fbf70;for(const _0x15ca93 of this[_0x5ade73(0xabd)]()){if(!_0x15ca93)continue;if(_0x15ca93[_0x5ade73(0x9c1)][_0x5ade73(0xc4b)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase[_0x4fbf70(0x92c)][_0x4fbf70(0xb10)]=function(){const _0x225db7=_0x4fbf70;for(const _0xf1012c of this[_0x225db7(0xabd)]()){if(_0x225db7(0x804)!==_0x225db7(0x804))return _0x209290[_0x225db7(0xae2)][_0x225db7(0x3a7)]['call'](this);else{if(!_0xf1012c)continue;if(_0xf1012c[_0x225db7(0x9c1)][_0x225db7(0xc4b)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}}return!![];},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x49d)]=Game_BattlerBase['prototype'][_0x4fbf70(0x320)],Game_BattlerBase[_0x4fbf70(0x92c)][_0x4fbf70(0x320)]=function(_0x30c81d){const _0xaa1e47=_0x4fbf70;if(_0x30c81d&&_0x30c81d['note'][_0xaa1e47(0xc4b)](/<CANNOT TARGET (?:USER|SELF)>/i)){const _0x467f1e=this[_0xaa1e47(0x4e8)]()[_0xaa1e47(0x1c3)]();if(_0x467f1e['length']===0x1&&_0x467f1e[0x0]===this)return![];}return VisuMZ[_0xaa1e47(0xae2)][_0xaa1e47(0x49d)][_0xaa1e47(0xc4a)](this,_0x30c81d);},Game_Battler[_0x4fbf70(0x92c)]['allowRandomSpeed']=function(){const _0x4c21e8=_0x4fbf70;return VisuMZ['BattleCore'][_0x4c21e8(0x837)]['Mechanics'][_0x4c21e8(0x406)];},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x227)]=Game_Battler[_0x4fbf70(0x92c)]['regenerateAll'],Game_Battler['prototype'][_0x4fbf70(0x9ec)]=function(){const _0x13eca0=_0x4fbf70;if(SceneManager[_0x13eca0(0x90d)]()){if(BattleManager[_0x13eca0(0x814)]()){if(this['turnCount']()<=0x0)return;}else{if($gameTroop[_0x13eca0(0xd32)]()<=0x0){if(_0x13eca0(0xd82)===_0x13eca0(0xd82))return;else _0x402ad0[_0x13eca0(0x509)]=_0x1d45c1(_0x38bae4['$1'])[_0x13eca0(0x39e)]()[_0x13eca0(0xcda)]();}}}if(SceneManager[_0x13eca0(0x90d)]()&&BattleManager[_0x13eca0(0x814)]()&&this['_lastRegenFrameCount']===Graphics['frameCount']){if('LycOf'!==_0x13eca0(0x491))_0x271dbf[_0x13eca0(0x4b9)](_0x3cb822),this[_0x13eca0(0xb88)](_0x382430);else return;}this[_0x13eca0(0xcfa)]=Graphics[_0x13eca0(0x59e)];SceneManager[_0x13eca0(0x90d)]()&&(_0x13eca0(0x5aa)!==_0x13eca0(0x53f)?this['processBattleCoreJS'](_0x13eca0(0x489)):(_0x5c6b69[_0x13eca0(0xae2)][_0x13eca0(0x464)][_0x13eca0(0xc4a)](this,_0x8374fc),this[_0x13eca0(0x923)]()&&_0x3f0094===this[_0x13eca0(0xc8a)]()&&this[_0x13eca0(0x4e4)]()&&(this[_0x13eca0(0xba5)]=![]),!this[_0x13eca0(0x913)]&&!this[_0x13eca0(0x42d)]&&_0x5dd872[_0x13eca0(0x90d)]()&&this[_0x13eca0(0xc12)]()));VisuMZ['BattleCore'][_0x13eca0(0x227)][_0x13eca0(0xc4a)](this);if(SceneManager[_0x13eca0(0x90d)]()){if(_0x13eca0(0x271)==='DNlfI')this[_0x13eca0(0x23d)](),this[_0x13eca0(0x7d8)](_0x13eca0(0x666));else{if(!_0x1fc796['isSceneBattle']())return;if(!_0x492b3f[_0x13eca0(0x3b4)])return;const _0x3cba0f=_0x3155ec[_0x13eca0(0xc52)]();_0x3cba0f[_0x13eca0(0x645)]('cutinExit');}}},Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x23d)]=function(){const _0x1b64bb=_0x4fbf70;if(SceneManager[_0x1b64bb(0x90d)]()){if(_0x1b64bb(0x665)==='bNEAT')_0x5d9475[_0x1b64bb(0xae2)][_0x1b64bb(0x9cd)][_0x1b64bb(0xc4a)](this),this[_0x1b64bb(0x7d6)]();else for(const _0x1dfabf of this[_0x1b64bb(0xabd)]()){if(!_0x1dfabf)continue;this[_0x1b64bb(0x844)](_0x1dfabf);}}},Game_Battler['prototype'][_0x4fbf70(0x844)]=function(_0x3ca104){const _0x194b5e=_0x4fbf70;if(!Imported[_0x194b5e(0xcaf)])return;if(!SceneManager[_0x194b5e(0x90d)]())return;if(this['isDead']())return;if(this['isHidden']())return;if(_0x3ca104[_0x194b5e(0x9c1)]['match'](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x5e448f=Number(RegExp['$1']);$gameTemp[_0x194b5e(0x8f5)]([this],_0x5e448f,![],![]);}},VisuMZ[_0x4fbf70(0xae2)]['Game_Battler_startTpbTurn']=Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x30b)],Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x30b)]=function(){const _0x3b033f=_0x4fbf70;this[_0x3b033f(0x7d8)](_0x3b033f(0x7f7)),VisuMZ['BattleCore'][_0x3b033f(0x6d2)][_0x3b033f(0xc4a)](this),this[_0x3b033f(0x7d8)](_0x3b033f(0x43b));},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x468)]=Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x4ae)],Game_Battler[_0x4fbf70(0x92c)]['onTurnEnd']=function(){const _0x597770=_0x4fbf70;this['processBattleCoreJS'](_0x597770(0x744)),VisuMZ[_0x597770(0xae2)][_0x597770(0x468)][_0x597770(0xc4a)](this),this[_0x597770(0x7d8)](_0x597770(0xc2e));},Game_Battler[_0x4fbf70(0x92c)]['processBattleCoreJS']=function(_0x2a66b5){const _0x215393=_0x4fbf70;if(this[_0x215393(0x42d)]||this['_tempActor'])return;const _0x582f69=VisuMZ['BattleCore']['Settings']['Mechanics'];if(_0x582f69[_0x2a66b5])_0x582f69[_0x2a66b5][_0x215393(0xc4a)](this);for(const _0x5176ab of this['traitObjects']()){if(!_0x5176ab)continue;key=VisuMZ[_0x215393(0xae2)][_0x215393(0xd27)](_0x5176ab,_0x2a66b5);if(VisuMZ[_0x215393(0xae2)]['JS'][key]){if(_0x215393(0xd34)==='yKLWh')VisuMZ[_0x215393(0xae2)]['JS'][key]['call'](this,this,this,_0x5176ab,0x0);else{if(!this[_0x215393(0x98d)]())return![];return(this[_0x215393(0x98d)]()[_0x215393(0x9c1)]||'')[_0x215393(0xc4b)](/<DISPERSE DAMAGE>/i);}}}},Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x353)]=function(){const _0x3e51d8=_0x4fbf70;return VisuMZ[_0x3e51d8(0xae2)][_0x3e51d8(0x837)]['Actor'][_0x3e51d8(0xb8f)]||![];},Game_Battler['prototype']['isChanting']=function(){const _0xb2e5b4=_0x4fbf70;if(this[_0xb2e5b4(0x40e)]()){if(this['chantStyle']()){if(_0xb2e5b4(0x7c8)!==_0xb2e5b4(0x993)){if(this['_actions']['some'](_0x12ec04=>_0x12ec04[_0xb2e5b4(0x98d)]()&&_0x12ec04[_0xb2e5b4(0x8ca)]())){if(_0xb2e5b4(0x83b)!=='BOYRE')return!![];else _0x2ea249[_0xb2e5b4(0xae2)][_0xb2e5b4(0x909)]['call'](this),_0xf000f1['BattleCore'][_0xb2e5b4(0x837)][_0xb2e5b4(0x2c8)]['ShowActorGauge']&&this[_0xb2e5b4(0x2dc)]();}}else this[_0xb2e5b4(0xaf9)]=![],this['_autoBattle']=_0x41a3a3[_0xb2e5b4(0x8f8)],this[_0xb2e5b4(0x265)]=![],this[_0xb2e5b4(0x7d8)](_0xb2e5b4(0x9f9)),_0x527a59[_0xb2e5b4(0xae2)][_0xb2e5b4(0x886)]['call'](this),this[_0xb2e5b4(0x7d8)](_0xb2e5b4(0xaec));}else{if('sRnDG'===_0xb2e5b4(0xa3f))_0x4a9e95[_0xb2e5b4(0x988)](_0xe5e7e['SwitchMissEvade'],!![]);else{if(this[_0xb2e5b4(0xaee)]['some'](_0x545feb=>_0x545feb[_0xb2e5b4(0x98d)]()&&_0x545feb['isMagicSkill']()))return!![];}}}if(BattleManager[_0xb2e5b4(0x814)]()&&this['_tpbState']==='casting'){if(this[_0xb2e5b4(0x353)]()){if(_0xb2e5b4(0x408)===_0xb2e5b4(0x7c6))_0x5151ff['BattleCore']['Game_Interpreter_terminate'][_0xb2e5b4(0xc4a)](this),this[_0xb2e5b4(0xae5)]&&(this['_preBattleCommonEvent']=_0x15027f,_0x58f6d4[_0xb2e5b4(0x32c)]['battleCoreResumeLaunchBattle']());else return this[_0xb2e5b4(0x69f)]()&&this['currentAction']()['item']()&&this[_0xb2e5b4(0x69f)]()[_0xb2e5b4(0x8ca)]();}else{if('sNLZq'===_0xb2e5b4(0x96f))return this[_0xb2e5b4(0x69f)]()&&this[_0xb2e5b4(0x69f)]()['item']()&&this[_0xb2e5b4(0x69f)]()[_0xb2e5b4(0x3c3)]();else{if(!_0x3fcc7b[_0xb2e5b4(0x90d)]())return;const _0x5c24e8=_0x3d23dd[_0xb2e5b4(0x2e0)];_0x5c24e8[_0xb2e5b4(0x1e5)]();}}}return![];},Game_Battler['prototype'][_0x4fbf70(0x6ab)]=function(){const _0x8bc044=_0x4fbf70;if(BattleManager[_0x8bc044(0x814)]()&&this[_0x8bc044(0xcb8)]===_0x8bc044(0x970)){if(_0x8bc044(0xc67)===_0x8bc044(0x2ba)){const _0x878c64=this[_0x8bc044(0x370)]();if(_0x878c64&&this[_0x8bc044(0x853)]<0xff)this[_0x8bc044(0x853)]+=0x10;else!_0x878c64&&this[_0x8bc044(0x853)]>0x0&&(this[_0x8bc044(0x853)]-=0x10);}else return this[_0x8bc044(0x353)]()?this['currentAction']()&&this[_0x8bc044(0x69f)]()[_0x8bc044(0x98d)]()&&!this['currentAction']()[_0x8bc044(0x8ca)]():this[_0x8bc044(0x69f)]()&&this[_0x8bc044(0x69f)]()[_0x8bc044(0x98d)]()&&!this[_0x8bc044(0x69f)]()['isMagicSkill']();}return![];},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x9de)]=Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x8fa)],Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x8fa)]=function(){const _0x26436c=_0x4fbf70;VisuMZ['BattleCore'][_0x26436c(0x9de)]['call'](this),this[_0x26436c(0x516)]=[];},Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x550)]=function(){const _0x4012c7=_0x4fbf70;if(!this[_0x4012c7(0x516)])this[_0x4012c7(0x8fa)]();return this[_0x4012c7(0x516)][_0x4012c7(0x9d2)]>0x0;},Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x845)]=function(){const _0x348952=_0x4fbf70;if(!SceneManager[_0x348952(0x90d)]())return;if(BattleManager[_0x348952(0x3bd)]())return;if(!this[_0x348952(0x516)])this['clearDamagePopup']();this[_0x348952(0xb92)]();const _0x555d79=this['battler']();if(_0x555d79)_0x555d79['setupDamagePopup']();},Game_Battler[_0x4fbf70(0x92c)]['createSeparateDamagePopups']=function(){const _0x507de5=_0x4fbf70,_0x2ddaec=this['result']();if(_0x2ddaec[_0x507de5(0x658)]||_0x2ddaec[_0x507de5(0x908)]){const _0x2aaca1=JsonEx[_0x507de5(0xca7)](_0x2ddaec);_0x2aaca1[_0x507de5(0x762)]=![],_0x2aaca1[_0x507de5(0x807)]=0x0,this[_0x507de5(0x516)]['push'](_0x2aaca1);}if(_0x2ddaec[_0x507de5(0x762)]){const _0x38dc9d=JsonEx[_0x507de5(0xca7)](_0x2ddaec);_0x38dc9d[_0x507de5(0x658)]=![],_0x38dc9d[_0x507de5(0x908)]=![],_0x38dc9d[_0x507de5(0x807)]=0x0,this['_damagePopupArray'][_0x507de5(0x25b)](_0x38dc9d);}if(_0x2ddaec[_0x507de5(0x807)]!==0x0){const _0x3c3fb8=JsonEx[_0x507de5(0xca7)](_0x2ddaec);_0x3c3fb8[_0x507de5(0x658)]=![],_0x3c3fb8[_0x507de5(0x908)]=![],_0x3c3fb8[_0x507de5(0x762)]=![],this[_0x507de5(0x516)][_0x507de5(0x25b)](_0x3c3fb8);}},Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0xa00)]=function(){const _0x20f42e=_0x4fbf70;if(!this[_0x20f42e(0x516)])this[_0x20f42e(0x8fa)]();return VisuMZ[_0x20f42e(0xae2)][_0x20f42e(0x837)][_0x20f42e(0x835)][_0x20f42e(0xbcf)]?this[_0x20f42e(0x516)][_0x20f42e(0x5c3)]():this['_damagePopupArray']['pop']();},Game_Battler[_0x4fbf70(0x92c)]['setupTextPopup']=function(_0xf3a5f3,_0x2830e7){const _0x1c15ea=_0x4fbf70;if(!SceneManager[_0x1c15ea(0x90d)]())return;if(BattleManager[_0x1c15ea(0x3bd)]())return;if(!this[_0x1c15ea(0xb81)]())return;if(_0xf3a5f3[_0x1c15ea(0x9d2)]<=0x0)return;_0x2830e7=_0x2830e7||{},_0x2830e7[_0x1c15ea(0xc46)]=_0x2830e7[_0x1c15ea(0xc46)]||_0x1c15ea(0xa6f),_0x2830e7[_0x1c15ea(0x5d3)]=_0x2830e7[_0x1c15ea(0x5d3)]||[0x0,0x0,0x0,0x0],_0x2830e7[_0x1c15ea(0x4d6)]=_0x2830e7['flashDuration']||0x0,this[_0x1c15ea(0xb81)]()[_0x1c15ea(0x5e8)](_0xf3a5f3,_0x2830e7);},Game_Battler['prototype'][_0x4fbf70(0x887)]=function(_0x3e84db,_0x3677eb,_0x254054){const _0x3c709e=_0x4fbf70;if(!SceneManager['isSceneBattle']())return;if(BattleManager['shouldHideBattleEndPopups']())return;if(!this[_0x3c709e(0xb81)]())return;if(_0x3677eb[_0x3c709e(0x9d2)]<=0x0)return;_0x254054=_0x254054||{},_0x254054[_0x3c709e(0xc46)]=_0x254054[_0x3c709e(0xc46)]||_0x3c709e(0xa6f),_0x254054[_0x3c709e(0x5d3)]=_0x254054[_0x3c709e(0x5d3)]||[0x0,0x0,0x0,0x0],_0x254054['flashDuration']=_0x254054[_0x3c709e(0x4d6)]||0x0,this[_0x3c709e(0xb81)]()[_0x3c709e(0x887)](_0x3e84db,_0x3677eb,_0x254054);},Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x304)]=function(){const _0x5cbedc=_0x4fbf70;if(this[_0x5cbedc(0x8a2)]())return![];if(this[_0x5cbedc(0x4e4)]()&&this[_0x5cbedc(0x8cf)]())return!![];if(this[_0x5cbedc(0x923)]()&&this[_0x5cbedc(0x42f)]()){if(_0x5cbedc(0xa60)===_0x5cbedc(0x3a0)){const _0x2c6e85=this[_0x5cbedc(0xb83)];if(_0x2c6e85[_0x523050])return _0x2c6e85[_0x5ebb00];else{const _0x476128=new _0x4d3950();return _0x2c6e85[_0x2dc692]=_0x476128,this[_0x5cbedc(0xcbc)](_0x476128),this['addChildToBack'](this['_cursorArea']),_0x476128;}}else{if(this[_0x5cbedc(0x521)]()&&this['allowCollapse']())return![];}}else{if(this['isDead']())return _0x5cbedc(0xc82)!=='HDocr'?![]:_0x1d7623(_0x31ce11['$1'])[_0x5cbedc(0x94a)](/[\r\n]+/);}return!![];},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x3d3)]=Game_Battler['prototype'][_0x4fbf70(0x510)],Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x510)]=function(){const _0x2e579d=_0x4fbf70;VisuMZ[_0x2e579d(0xae2)][_0x2e579d(0x3d3)]['call'](this),this['clearFreezeMotion']();},Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x34a)]=function(){return!![];},Game_Battler['prototype'][_0x4fbf70(0xa71)]=function(){return![];},VisuMZ['BattleCore'][_0x4fbf70(0x9c5)]=Game_Battler[_0x4fbf70(0x92c)]['onBattleStart'],Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x1ca)]=function(_0x35c79d){const _0x162f17=_0x4fbf70;VisuMZ['BattleCore'][_0x162f17(0x9c5)][_0x162f17(0xc4a)](this,_0x35c79d),this['onBattleStartBattleCore'](_0x35c79d),this['clearDamagePopup']();},Game_Battler['prototype'][_0x4fbf70(0x2ca)]=function(_0x366930){const _0x2401b7=_0x4fbf70;this['setBattlerFlip'](![]),this[_0x2401b7(0x9aa)]=undefined,this[_0x2401b7(0x5f0)]=undefined;},VisuMZ[_0x4fbf70(0xae2)]['Game_Battler_onBattleEnd']=Game_Battler['prototype'][_0x4fbf70(0xa7a)],Game_Battler[_0x4fbf70(0x92c)]['onBattleEnd']=function(){const _0x289218=_0x4fbf70;VisuMZ[_0x289218(0xae2)][_0x289218(0xc81)][_0x289218(0xc4a)](this),this[_0x289218(0x8f1)]();},Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x8f1)]=function(){const _0x36e2f7=_0x4fbf70;this['_forcedHomeX']=undefined,this[_0x36e2f7(0x5f0)]=undefined;},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x26b)]=Game_Battler[_0x4fbf70(0x92c)]['performActionStart'],Game_Battler[_0x4fbf70(0x92c)]['performActionStart']=function(_0x3f554d){const _0x248528=_0x4fbf70;VisuMZ[_0x248528(0xae2)]['Game_Battler_performActionStart'][_0x248528(0xc4a)](this,_0x3f554d);if(!_0x3f554d[_0x248528(0x612)]()){const _0x214037=this[_0x248528(0xb81)]();_0x214037&&_0x214037[_0x248528(0x4ef)]();}this[_0x248528(0x980)](![]);},Game_Battler['prototype'][_0x4fbf70(0xce5)]=function(){const _0x117e31=_0x4fbf70,_0x53e02f=this[_0x117e31(0x5fc)];this[_0x117e31(0x5fc)]=![];if(BattleManager[_0x117e31(0xa52)]()&&this[_0x117e31(0x5dd)]()){const _0x343e79=this[_0x117e31(0xb81)]();if(_0x343e79&&_0x53e02f)_0x343e79[_0x117e31(0x4ef)]();return;}const _0x587560=this[_0x117e31(0xb81)]();if(_0x587560)_0x587560[_0x117e31(0x551)]();this[_0x117e31(0x980)](![]),this[_0x117e31(0xc12)]();},Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x396)]=function(_0x597519){const _0x4d0906=_0x4fbf70;if(_0x597519['isAttack']())this[_0x4d0906(0x30f)]();else{if(_0x597519[_0x4d0906(0x612)]())this[_0x4d0906(0x9eb)](_0x4d0906(0x73a));else{if(_0x597519[_0x4d0906(0x8ca)]()){if(_0x4d0906(0xb13)!==_0x4d0906(0xb13)){const _0x1bef5f=[_0x4d0906(0x703),'PostApplyAsUserJS','PreDamageAsUserJS',_0x4d0906(0x243),'PreApplyAsTargetJS',_0x4d0906(0x5bf),'PreDamageAsTargetJS','PostDamageAsTargetJS','PreStartActionJS',_0x4d0906(0x740),'PreEndActionJS','PostEndActionJS',_0x4d0906(0x9f9),'PostStartBattleJS',_0x4d0906(0x472),_0x4d0906(0xc31),'BattleVictoryJS','BattleDefeatJS',_0x4d0906(0x563),_0x4d0906(0x74a),_0x4d0906(0x7f7),_0x4d0906(0x43b),_0x4d0906(0x744),_0x4d0906(0xc2e),_0x4d0906(0x489),_0x4d0906(0x666)];for(const _0xe783cc of _0x1bef5f){_0x4a4834['BattleCore'][_0x4d0906(0x324)](_0x2c180d,_0xe783cc);}}else this[_0x4d0906(0x9eb)](_0x4d0906(0x470));}else{if(_0x597519[_0x4d0906(0x547)]())[0x1,0x2,0x5,0x6]['includes'](_0x597519[_0x4d0906(0x98d)]()[_0x4d0906(0x36f)][_0x4d0906(0x2ff)])?this[_0x4d0906(0x30f)]():this['requestMotion'](_0x4d0906(0xac9));else _0x597519[_0x4d0906(0x3a8)]()&&this[_0x4d0906(0x9eb)](_0x4d0906(0x98d));}}}},Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0xb62)]=function(){const _0x476442=_0x4fbf70;return $dataSystem[_0x476442(0xb7f)][0x0];},Game_Battler[_0x4fbf70(0x92c)]['getAttackWeaponAnimationId']=function(){const _0x4ae3d4=_0x4fbf70,_0x1d821a=this['getAttackMotion']();return _0x1d821a?_0x1d821a[_0x4ae3d4(0x25f)]:0x0;},Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x829)]=function(_0x517b47){const _0x3f4a91=_0x4fbf70;if(!$gameSystem['isSideView']())return;const _0x505a86=this['battler'](),_0x5d894d=_0x517b47['battler']();if(!_0x505a86||!_0x5d894d)return;const _0x59ea45=_0x5d894d[_0x3f4a91(0xd6b)],_0x5e32f2=_0x5d894d[_0x3f4a91(0x571)];this['moveBattlerToPoint'](_0x59ea45,_0x5e32f2,0x0,![],_0x3f4a91(0x60a),-0x1),_0x505a86[_0x3f4a91(0xd25)]();const _0x2706d7=VisuMZ[_0x3f4a91(0xae2)]['Settings'][_0x3f4a91(0xc03)];let _0x5158e3=(_0x5d894d[_0x3f4a91(0x606)]+_0x505a86['width'])/0x2;_0x5158e3*=this[_0x3f4a91(0xc9f)]()?0x1:-0x1;let _0x3dfcce=_0x2706d7[_0x3f4a91(0x593)]*(this['isActor']()?0x1:-0x1);_0x517b47[_0x3f4a91(0xd4c)](_0x5158e3,_0x3dfcce,0x0,![],'Linear'),_0x5d894d[_0x3f4a91(0xd25)]();},Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x9eb)]=function(_0x1d04e8){const _0x286149=_0x4fbf70;if(SceneManager['isSceneBattle']()){if('ejYuW'===_0x286149(0x558)){const _0x39d2ae=_0x16836e(_0x2a8820['$1']);_0x39d2ae<_0x2274f2?(_0x3be30d('%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.'['format'](_0x9cfeb0,_0x39d2ae,_0x4ce85d)),_0x4cd5fd[_0x286149(0x4c5)]()):_0x4c724a=_0x57d172[_0x286149(0x6f0)](_0x39d2ae,_0x2dc1c7);}else{const _0x5c34ff=this[_0x286149(0xb81)]();_0x5c34ff&&(_0x286149(0x488)==='TxgCw'?(_0x5c34ff[_0x286149(0xc00)](_0x1d04e8),[_0x286149(0x809),_0x286149(0x805),_0x286149(0x54d)][_0x286149(0x6e3)](_0x1d04e8)&&(_0x286149(0x23a)===_0x286149(0x23a)?this[_0x286149(0x795)]():(_0x1b244f=_0x2b4f85[_0x286149(0xb81)]()[_0x286149(0x818)],_0x96cd3d=_0x189c45['battler']()[_0x286149(0xd1d)]))):_0x55fabd[_0x286149(0x9eb)](_0xddf076));}}this[_0x286149(0x245)]();},Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x795)]=function(){},Game_Battler['prototype'][_0x4fbf70(0x4a7)]=function(_0x435ae4){const _0x30f405=_0x4fbf70;if(SceneManager['isSceneBattle']()){const _0x4fe6e9=this[_0x30f405(0xb81)]();if(_0x4fe6e9)_0x4fe6e9['forceWeaponAnimation'](_0x435ae4);}},Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0xcb9)]=function(){const _0x202e3d=_0x4fbf70;if(SceneManager[_0x202e3d(0x90d)]()){const _0x28d589=this['getAttackWeaponAnimationId']();this['startWeaponAnimation'](_0x28d589);}},Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0xbfb)]=function(_0x571e1a,_0x448d1c){const _0x4dc2fa=_0x4fbf70;if(!_0x571e1a)return;if(!_0x571e1a[_0x4dc2fa(0x98d)]())return;if(_0x571e1a[_0x4dc2fa(0x4c0)]())return;if(_0x571e1a['isGuard']())return;if(_0x571e1a[_0x4dc2fa(0x3a8)]())return;let _0x2f3170=0x0;const _0xdf0efe=VisuMZ[_0x4dc2fa(0xae2)][_0x4dc2fa(0x837)][_0x4dc2fa(0xc03)],_0x351bf9=_0x571e1a[_0x4dc2fa(0x98d)]()[_0x4dc2fa(0x9c1)];if(_0x351bf9[_0x4dc2fa(0xc4b)](/<CAST ANIMATION: (\d+)>/i))_0x2f3170=Number(RegExp['$1']);else{if(_0x351bf9['match'](/<NO CAST ANIMATION>/i)){if('HwrKR'!==_0x4dc2fa(0x7b4))return _0x18032e;else return;}else{if(_0x571e1a[_0x4dc2fa(0xc71)]())_0x2f3170=_0xdf0efe[_0x4dc2fa(0xbc0)];else{if(_0x571e1a[_0x4dc2fa(0x6bf)]())_0x4dc2fa(0xae4)===_0x4dc2fa(0x195)?this['subject']()&&this['subject']()[_0x4dc2fa(0x772)]()?_0x57b176['BattleCore']['Game_Action_setAttack'][_0x4dc2fa(0xc4a)](this):this[_0x4dc2fa(0xb36)]():_0x2f3170=_0xdf0efe[_0x4dc2fa(0x843)];else _0x571e1a[_0x4dc2fa(0x8ca)]()&&(_0x2f3170=_0xdf0efe['CastMagical']);}}}_0x2f3170>0x0&&$gameTemp[_0x4dc2fa(0x889)]([this],_0x2f3170,!!_0x448d1c);},Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x1ee)]=function(){const _0x2b8734=_0x4fbf70;SoundManager[_0x2b8734(0x6c3)]();let _0x2a918b=VisuMZ[_0x2b8734(0xae2)]['Settings'][_0x2b8734(0xc03)][_0x2b8734(0x827)];_0x2a918b>0x0&&(Imported[_0x2b8734(0xcaf)]?_0x2b8734(0x924)!=='Lbqtz'?$gameTemp[_0x2b8734(0x8f5)]([this],_0x2a918b):(this['_animationContainer']['x']=this[_0x2b8734(0x8aa)]['x'],this[_0x2b8734(0xbcc)]['y']=this[_0x2b8734(0x8aa)]['y']):$gameTemp['requestAnimation']([this],_0x2a918b));},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x7d0)]=Game_Battler[_0x4fbf70(0x92c)]['performDamage'],Game_Battler[_0x4fbf70(0x92c)]['performDamage']=function(){const _0x24466d=_0x4fbf70;VisuMZ['BattleCore'][_0x24466d(0x7d0)]['call'](this),this[_0x24466d(0x36b)](),this[_0x24466d(0xd44)]();},VisuMZ[_0x4fbf70(0xae2)]['Game_Battler_performMiss']=Game_Battler['prototype'][_0x4fbf70(0x45d)],Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x45d)]=function(){const _0x2c846d=_0x4fbf70;VisuMZ['BattleCore'][_0x2c846d(0x298)][_0x2c846d(0xc4a)](this),this[_0x2c846d(0x36b)]();},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xb44)]=Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x863)],Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x863)]=function(){const _0x3d7379=_0x4fbf70;VisuMZ[_0x3d7379(0xae2)]['Game_Battler_performEvasion'][_0x3d7379(0xc4a)](this),this[_0x3d7379(0x36b)]();},Game_Battler['prototype'][_0x4fbf70(0x36b)]=function(){const _0x1d6b5e=_0x4fbf70;if(!$gameSystem['isSideView']())return;if(this[_0x1d6b5e(0x5fc)])return;this[_0x1d6b5e(0x5fc)]=!![];const _0x326ab2=this[_0x1d6b5e(0xb81)]();if(_0x326ab2)_0x326ab2['stepFlinch']();},Game_Battler['prototype'][_0x4fbf70(0xd44)]=function(){const _0x21b6d6=_0x4fbf70;if(!this[_0x21b6d6(0x34a)]())return;const _0x44d8cb=VisuMZ[_0x21b6d6(0xae2)][_0x21b6d6(0x837)][_0x21b6d6(0x410)];if(!(_0x44d8cb[_0x21b6d6(0x63d)]??![]))return;if(this['_lastHpDamage']<=0x0)return;const _0x5625a7=this['battler']();if(_0x5625a7){const _0x114189=this[_0x21b6d6(0x878)],_0x12cfef=(_0x114189/this[_0x21b6d6(0x273)])['clamp'](0.8,0x1),_0x3a59e5=_0x44d8cb[_0x21b6d6(0x3da)]??0x30,_0x33c5b2=_0x12cfef*_0x3a59e5;_0x5625a7['startShakeFlinch'](_0x33c5b2,_0x12cfef);}},Game_Battler['prototype'][_0x4fbf70(0xc12)]=function(){const _0x1d3c4e=_0x4fbf70;if(this[_0x1d3c4e(0x521)]()&&this[_0x1d3c4e(0x67f)]!==_0x1d3c4e(0xd18)){this[_0x1d3c4e(0x9eb)](_0x1d3c4e(0xd18));return;}if(this['isDead']()&&this['_motionType']==='dead')return;if(!!this[_0x1d3c4e(0x5eb)])return;if(this['isEnemy']()){if(_0x1d3c4e(0x539)!==_0x1d3c4e(0x539))return _0x143001[_0x1d3c4e(0x585)](this),_0x1895bd[_0x1d3c4e(0xae2)]['Game_Interpreter_PluginCommand'][_0x1d3c4e(0xc4a)](this,_0x1e215a);else{if(!this['isDuringNonLoopingMotion']()&&this!==BattleManager[_0x1d3c4e(0xb38)]){if(_0x1d3c4e(0x7b1)===_0x1d3c4e(0x8c4))_0x598c5a[_0x1d3c4e(0xae2)][_0x1d3c4e(0x3d3)][_0x1d3c4e(0xc4a)](this),this[_0x1d3c4e(0x245)]();else{if(this[_0x1d3c4e(0xb81)]())this['battler']()[_0x1d3c4e(0x2f0)]();}}this['clearFreezeMotion']();return;}}if(this[_0x1d3c4e(0x67f)]===_0x1d3c4e(0x64c))return;if(this[_0x1d3c4e(0x67f)]==='escape'&&!BattleManager[_0x1d3c4e(0x5dd)]())return;if(this[_0x1d3c4e(0x67f)]===_0x1d3c4e(0x73a)&&!BattleManager[_0x1d3c4e(0x5dd)]())return;this[_0x1d3c4e(0x510)]();if(BattleManager['isActiveTpb']()&&this===BattleManager[_0x1d3c4e(0xb38)])return;if(this[_0x1d3c4e(0xb81)]()&&BattleManager['isInputting']()){this['battler']()[_0x1d3c4e(0x2f0)](),this[_0x1d3c4e(0x245)]();return;}},Game_Enemy[_0x4fbf70(0x92c)][_0x4fbf70(0x431)]=function(){const _0xa3a55e=_0x4fbf70;if(!this[_0xa3a55e(0x42f)]())return![];const _0x27f7e5=this['battler']();if(!_0x27f7e5)return![];const _0xd3b7c3=_0x27f7e5[_0xa3a55e(0xcd7)];if(!_0xd3b7c3)return![];const _0x4b8d27=_0xd3b7c3['_motion'];return _0x4b8d27&&!_0x4b8d27[_0xa3a55e(0x460)];},Game_Battler['prototype'][_0x4fbf70(0x4af)]=function(){const _0x1dbfb7=_0x4fbf70;return this[_0x1dbfb7(0x568)];},Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x980)]=function(_0x55a051){const _0x1619da=_0x4fbf70;if(!$gameSystem['isSideView']())return;this[_0x1619da(0x568)]=_0x55a051;const _0x57a360=this[_0x1619da(0xb81)]();if(_0x57a360)_0x57a360[_0x1619da(0x9b7)]();},Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x3eb)]=function(_0x47aeaf,_0x245a23,_0x501d85){const _0xa06ef0=_0x4fbf70;if(!$gameSystem[_0xa06ef0(0x2ee)]())return;const _0x1fa7e5=this[_0xa06ef0(0xb81)]();if(!_0x1fa7e5)return;if(_0x47aeaf===_0x1fa7e5[_0xa06ef0(0xd6b)])return;let _0x53ac9e=![];if(this['isActor']()){if(_0x47aeaf>_0x1fa7e5[_0xa06ef0(0xd6b)])_0x53ac9e=!![];if(_0x47aeaf<_0x1fa7e5[_0xa06ef0(0xd6b)])_0x53ac9e=![];}else{if(this[_0xa06ef0(0x923)]()){if(_0x47aeaf>_0x1fa7e5['_baseX'])_0x53ac9e=![];if(_0x47aeaf<_0x1fa7e5[_0xa06ef0(0xd6b)])_0x53ac9e=!![];}};this[_0xa06ef0(0x980)](_0x501d85?!_0x53ac9e:_0x53ac9e),_0x1fa7e5['updateFlip']();},Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0xd4c)]=function(_0x3a7659,_0x47af87,_0x5a7618,_0x4ab148,_0x4e62a8){const _0x1f59a8=_0x4fbf70;if(!$gameSystem[_0x1f59a8(0x2ee)]())return;const _0x1263f6=this[_0x1f59a8(0xb81)]();if(!_0x1263f6)return;if(_0x4ab148)this[_0x1f59a8(0x3eb)](_0x3a7659+_0x1263f6['_baseX'],_0x47af87+_0x1263f6[_0x1f59a8(0x571)],![]);_0x3a7659+=_0x1263f6[_0x1f59a8(0xd6b)]-_0x1263f6[_0x1f59a8(0x818)],_0x47af87+=_0x1263f6[_0x1f59a8(0x571)]-_0x1263f6[_0x1f59a8(0xd1d)],_0x1263f6[_0x1f59a8(0x256)](_0x3a7659,_0x47af87,_0x5a7618);if(Imported[_0x1f59a8(0xcaf)])_0x1263f6[_0x1f59a8(0xadd)](_0x4e62a8||_0x1f59a8(0x60a));},Game_Battler['prototype']['moveBattlerToPoint']=function(_0x29e889,_0x689bfa,_0xd42262,_0x5b5cf7,_0x4d43f2,_0x20ccd0){const _0x530b7b=_0x4fbf70;if(!$gameSystem[_0x530b7b(0x2ee)]())return;const _0x4fb9e1=this[_0x530b7b(0xb81)]();if(!_0x4fb9e1)return;if(_0x29e889===Infinity||_0x689bfa===Infinity)return;if(isNaN(_0x29e889)||isNaN(_0x689bfa))return;_0x20ccd0=_0x20ccd0||0x0;if(_0x20ccd0>0x0){if(_0x4fb9e1[_0x530b7b(0xd6b)]>_0x29e889)_0x29e889+=_0x4fb9e1['width']/0x2+_0x20ccd0;if(_0x4fb9e1['_baseX']<_0x29e889)_0x29e889-=_0x4fb9e1['width']/0x2+_0x20ccd0;}if(_0x5b5cf7)this[_0x530b7b(0x3eb)](_0x29e889,_0x689bfa,![]);_0x29e889-=_0x4fb9e1[_0x530b7b(0x818)],_0x689bfa-=_0x4fb9e1[_0x530b7b(0xd1d)],_0x4fb9e1[_0x530b7b(0x256)](_0x29e889,_0x689bfa,_0xd42262);if(Imported[_0x530b7b(0xcaf)])_0x4fb9e1[_0x530b7b(0xadd)](_0x4d43f2||_0x530b7b(0x60a));},Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0xaba)]=function(_0x184f2b,_0x33fa49,_0x816d7c,_0x3a0786,_0x520cca){const _0x27eeb7=_0x4fbf70;if(!$gameSystem[_0x27eeb7(0x2ee)]())return;const _0x44d002=this[_0x27eeb7(0xb81)]();if(!_0x44d002)return;if(_0x3a0786)this['setBattlerFacePoint'](_0x184f2b+_0x44d002['_baseX'],_0x33fa49+_0x44d002[_0x27eeb7(0x571)],![]);_0x184f2b+=_0x44d002[_0x27eeb7(0x818)],_0x33fa49+=_0x44d002[_0x27eeb7(0xd1d)],_0x44d002[_0x27eeb7(0x6b8)](_0x184f2b,_0x33fa49,_0x816d7c,_0x520cca),this[_0x27eeb7(0x9aa)]=_0x184f2b,this[_0x27eeb7(0x5f0)]=_0x33fa49;},Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x1d0)]=function(_0x59631e,_0x4185b5,_0x289c6f,_0x24db6b,_0x15064d,_0x25e99c){const _0x1ce241=_0x4fbf70;if(!$gameSystem['isSideView']())return;const _0x555ed1=this['battler']();if(!_0x555ed1)return;_0x25e99c=_0x25e99c||0x0;if(_0x25e99c>0x0){if(_0x1ce241(0xcad)===_0x1ce241(0x4de))this[_0x1ce241(0x25b)](_0x1ce241(0x55f),_0x39cc98,_0x5b2a68);else{if(_0x555ed1[_0x1ce241(0xd6b)]>_0x59631e)_0x59631e+=_0x555ed1['width']/0x2+_0x25e99c;if(_0x555ed1[_0x1ce241(0xd6b)]<_0x59631e)_0x59631e-=_0x555ed1[_0x1ce241(0x606)]/0x2+_0x25e99c;}}if(_0x24db6b)this[_0x1ce241(0x3eb)](_0x59631e,_0x4185b5,![]);_0x555ed1['startHomeMove'](_0x59631e,_0x4185b5,_0x289c6f,_0x15064d),this['_forcedHomeX']=_0x59631e,this['_forcedHomeY']=_0x4185b5;},Game_Battler['prototype'][_0x4fbf70(0x6cb)]=function(_0x352141,_0x5a6e4e,_0x48a853){const _0x4bc91c=_0x4fbf70;if(!$gameSystem[_0x4bc91c(0x2ee)]())return;const _0x5bd2c2=this[_0x4bc91c(0xb81)]();if(!_0x5bd2c2)return;_0x5bd2c2[_0x4bc91c(0x2a1)](_0x352141,_0x5a6e4e,_0x48a853);},Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x968)]=function(_0x1d7a0f,_0x133bc9){const _0x553e4c=_0x4fbf70;if(!$gameSystem[_0x553e4c(0x2ee)]())return;const _0xd93619=this[_0x553e4c(0xb81)]();if(!_0xd93619)return;_0xd93619['startJump'](_0x1d7a0f,_0x133bc9);},Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x4d3)]=function(_0x34fb4a,_0x4ec9e5,_0x30c3ba,_0x24e70c){const _0xfca7c1=_0x4fbf70;if(!$gameSystem[_0xfca7c1(0x2ee)]())return;const _0x42c556=this[_0xfca7c1(0xb81)]();if(!_0x42c556)return;_0x42c556['startSpin'](_0x34fb4a,_0x4ec9e5,_0x30c3ba,_0x24e70c);},Game_Battler['prototype'][_0x4fbf70(0xb24)]=function(_0x266991,_0x12b7ba,_0x3fdf5a,_0x1b6fe8){const _0x424730=_0x4fbf70;if(!$gameSystem[_0x424730(0x2ee)]())return;const _0x5077ba=this[_0x424730(0xb81)]();if(!_0x5077ba)return;this[_0x424730(0xc9f)]()&&(_0x266991*=-0x1,_0x12b7ba*=-0x1),_0x5077ba[_0x424730(0x22c)](_0x266991,_0x12b7ba,_0x3fdf5a,_0x1b6fe8);},Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x40c)]=function(_0xaddb78,_0x1a13f0,_0x3c4196,_0x33b865){const _0x42cbe2=_0x4fbf70;if(!$gameSystem['isSideView']())return;const _0x372fe5=this[_0x42cbe2(0xb81)]();if(!_0x372fe5)return;_0x372fe5[_0x42cbe2(0x3e6)](_0xaddb78,_0x1a13f0,_0x3c4196,_0x33b865);},Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x659)]=function(_0xbeac7,_0x55563d,_0xbaa046){const _0x4f4984=_0x4fbf70;if(!$gameSystem[_0x4f4984(0x2ee)]())return;const _0x4b14ab=this[_0x4f4984(0xb81)]();if(!_0x4b14ab)return;_0x4b14ab[_0x4f4984(0xcb0)](_0xbeac7,_0x55563d,_0xbaa046);},Game_Battler['prototype'][_0x4fbf70(0x245)]=function(){const _0x5d34e3=_0x4fbf70,_0x547ce4=!!this[_0x5d34e3(0x5eb)];this[_0x5d34e3(0x5eb)]=undefined;if(_0x547ce4){if(_0x5d34e3(0x790)!==_0x5d34e3(0x790)){const _0x37a172=_0x4c7ea6['round'](_0x571dcb[_0x5d34e3(0x2d5)]/0x3),_0x3b51c1=_0x5b94e9['round'](_0x4bc938['boxWidth']/_0x9cd0a5[_0x5d34e3(0x914)]()[_0x5d34e3(0x9d2)]),_0x48040d=_0x2acaa1[_0x5d34e3(0x872)](_0x37a172,_0x3b51c1),_0x4a8500=this[_0x5d34e3(0xaa2)](_0x1c4ba3['BattleCore'][_0x5d34e3(0x837)][_0x5d34e3(0x41c)][_0x5d34e3(0x7f6)]),_0xbde779=_0x11a441[_0x5d34e3(0xbec)](_0x3b51c1*_0x1542ce['index']())+_0xfec0fe[_0x5d34e3(0xbec)]((_0x3b51c1-_0x48040d)/0x2),_0x577864=_0x481245[_0x5d34e3(0xbec)](_0x2d21f1[_0x5d34e3(0x32c)][_0x5d34e3(0x9e4)]['y']-_0x4a8500);this['move'](_0xbde779,_0x577864,_0x48040d,_0x4a8500),this[_0x5d34e3(0xcb1)](),this[_0x5d34e3(0x2fb)](0x1);}else this['requestMotionRefresh'](),this['clearFreezeMotionForWeapons']();}},Game_Battler[_0x4fbf70(0x92c)]['clearFreezeMotionForWeapons']=function(){const _0x151236=_0x4fbf70;if(!SceneManager[_0x151236(0x90d)]())return;const _0x4234fc=this['battler']();if(!_0x4234fc)return;let _0xf9d8c0=this['isActor']()?_0x4234fc['_weaponSprite']:_0x4234fc[_0x151236(0xcd7)][_0x151236(0x651)];_0xf9d8c0&&_0xf9d8c0[_0x151236(0xc55)](0x0);},Game_Battler['prototype'][_0x4fbf70(0x6ae)]=function(_0x119f36,_0x53fa04,_0x4454d4){const _0x2ad150=_0x4fbf70;if(this[_0x2ad150(0x923)]()&&!this['hasSvBattler']())return;let _0x1423d2=0x0,_0x5e8162=0x0;_0x119f36[_0x2ad150(0xc4b)](/ATTACK[ ](\d+)/i)&&(_0x5e8162=Number(RegExp['$1']),_0x5e8162--);if(this['isActor']()){const _0xc3203d=this[_0x2ad150(0x4b2)]();_0x1423d2=_0xc3203d[_0x5e8162]?_0xc3203d[_0x5e8162][_0x2ad150(0x621)]:0x0;}else this[_0x2ad150(0x923)]()&&(_0x1423d2=this[_0x2ad150(0x82b)]()[_0x2ad150(0x621)]||0x0);const _0xbc8529=$dataSystem['attackMotions'][_0x1423d2];_0x119f36['match'](/attack/i)&&(_0x119f36=['thrust',_0x2ad150(0x809),_0x2ad150(0x54d)][_0xbc8529[_0x2ad150(0x2ff)]]||'swing'),this[_0x2ad150(0x5eb)]={'motionType':_0x119f36,'weaponImageId':_0x53fa04?_0xbc8529[_0x2ad150(0x25f)]:0x0,'pattern':_0x4454d4};},Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0xd79)]=function(_0x9019f6){const _0x1de345=_0x4fbf70;if(!_0x9019f6)return![];return _0x9019f6['friendsUnit']()===this[_0x1de345(0x4e8)]();},Game_Battler['prototype'][_0x4fbf70(0x8d5)]=function(_0x1c25b6){const _0x541162=_0x4fbf70;if(!_0x1c25b6)return![];return _0x1c25b6[_0x541162(0xa93)]()===this['friendsUnit']();},Game_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0xcc4)]=function(){return![];},Game_Actor[_0x4fbf70(0x92c)][_0x4fbf70(0xcc4)]=function(){const _0x398870=_0x4fbf70;return this['battlerName']()[_0x398870(0xc4b)](/\$/i);},Game_Enemy[_0x4fbf70(0x92c)][_0x4fbf70(0xcc4)]=function(){const _0x52db8c=_0x4fbf70;return this[_0x52db8c(0x42f)]()&&this[_0x52db8c(0x278)]()[_0x52db8c(0xc4b)](/\$/i);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xae3)]=Game_Actor[_0x4fbf70(0x92c)][_0x4fbf70(0xc55)],Game_Actor['prototype'][_0x4fbf70(0xc55)]=function(_0x3a497c){const _0x3c6ae5=_0x4fbf70;VisuMZ[_0x3c6ae5(0xae2)][_0x3c6ae5(0xae3)][_0x3c6ae5(0xc4a)](this,_0x3a497c),this[_0x3c6ae5(0x1c2)]();},Game_Actor[_0x4fbf70(0x92c)][_0x4fbf70(0x1c2)]=function(){const _0x5ce44e=_0x4fbf70;this['_battlePortrait']='',this[_0x5ce44e(0x55a)]()&&this[_0x5ce44e(0x55a)]()['note'][_0x5ce44e(0xc4b)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this['_battlePortrait']=String(RegExp['$1']));},Game_Actor[_0x4fbf70(0x92c)][_0x4fbf70(0xa4d)]=function(){const _0x4516d0=_0x4fbf70;if(this['getBattlePortrait']()!=='')return this[_0x4516d0(0x31e)]();else{if(Imported['VisuMZ_1_MainMenuCore']&&this[_0x4516d0(0x4f2)]()!==''){if(_0x4516d0(0x2f2)!==_0x4516d0(0x2f2)){if(this[_0x4516d0(0x306)]<=0x0)return;const _0x24e699=this[_0x4516d0(0x306)],_0x5689f8=this['_homeWholeDuration'],_0x4600bd=this[_0x4516d0(0x5ce)];_0x3d355c['VisuMZ_0_CoreEngine']?(this[_0x4516d0(0x818)]=this[_0x4516d0(0xbd3)](this['_homeX'],this[_0x4516d0(0xd21)],_0x24e699,_0x5689f8,_0x4600bd),this[_0x4516d0(0xd1d)]=this['applyEasing'](this[_0x4516d0(0xd1d)],this[_0x4516d0(0x449)],_0x24e699,_0x5689f8,_0x4600bd)):(this[_0x4516d0(0x818)]=(this[_0x4516d0(0x818)]*(_0x24e699-0x1)+this['_targetHomeX'])/_0x24e699,this[_0x4516d0(0xd1d)]=(this[_0x4516d0(0xd1d)]*(_0x24e699-0x1)+this[_0x4516d0(0x449)])/_0x24e699);this[_0x4516d0(0x306)]--;if(this[_0x4516d0(0x306)]<=0x0)this[_0x4516d0(0x4dc)]();}else return this[_0x4516d0(0x4f2)]();}}return'';},Game_Actor[_0x4fbf70(0x92c)][_0x4fbf70(0x31e)]=function(){const _0x5cfe73=_0x4fbf70;if(this[_0x5cfe73(0x461)]===undefined)this[_0x5cfe73(0x1c2)]();return this[_0x5cfe73(0x461)];},Game_Actor[_0x4fbf70(0x92c)]['setBattlePortrait']=function(_0x146354){const _0x2b070c=_0x4fbf70;if(this[_0x2b070c(0x461)]===undefined)this[_0x2b070c(0x1c2)]();this[_0x2b070c(0x461)]=_0x146354;if(SceneManager['isSceneBattle']()&&$gameParty[_0x2b070c(0x914)]()['includes'](this)){const _0x1bcae8=SceneManager['_scene'][_0x2b070c(0x9e4)];_0x1bcae8&&('XgYUW'===_0x2b070c(0x696)?_0x1bcae8[_0x2b070c(0x68d)](this):(_0x40817e[_0x2b070c(0xae2)][_0x2b070c(0x1a7)][_0x2b070c(0xc4a)](this,_0x1815e0),this['initBattleCore'](),this[_0x2b070c(0x5da)]()));}},Game_Actor[_0x4fbf70(0x92c)]['isSpriteVisible']=function(){return!![];},Game_Actor[_0x4fbf70(0x92c)][_0x4fbf70(0x652)]=function(){const _0x2afa82=_0x4fbf70;if(!this[_0x2afa82(0xd70)]()&&BattleManager[_0x2afa82(0x2ce)])return!![];return Game_Battler[_0x2afa82(0x92c)]['isAutoBattle'][_0x2afa82(0xc4a)](this);},VisuMZ[_0x4fbf70(0xae2)]['Game_Actor_makeActionList']=Game_Actor[_0x4fbf70(0x92c)]['makeActionList'],Game_Actor[_0x4fbf70(0x92c)]['makeActionList']=function(){const _0x30dc9c=_0x4fbf70;if(BattleManager[_0x30dc9c(0x2ce)]&&!ConfigManager[_0x30dc9c(0x1a5)])return this['makeActionListAutoAttack']();else{if(_0x30dc9c(0x9d3)===_0x30dc9c(0xd08))_0x182c9f--;else{return VisuMZ[_0x30dc9c(0xae2)][_0x30dc9c(0x262)]['call'](this);;}}},Game_Actor[_0x4fbf70(0x92c)][_0x4fbf70(0x613)]=function(){const _0x42fa30=_0x4fbf70,_0x506b30=[],_0x2c248b=new Game_Action(this);return _0x2c248b['setAttack'](),_0x506b30[_0x42fa30(0x25b)](_0x2c248b),_0x506b30;},Game_Actor[_0x4fbf70(0x92c)][_0x4fbf70(0x3a4)]=function(){const _0x537bd1=_0x4fbf70;if(this[_0x537bd1(0xbab)]()[_0x537bd1(0x9c1)]['match'](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i))return String(RegExp['$1'])['split'](/[\r\n]+/);else{if('gyAKY'===_0x537bd1(0xd2d)){const _0x22b24a=_0x2dd2af[_0x526fdb];if(_0x22b24a)this[_0x537bd1(0x343)](_0x22b24a);}else return VisuMZ['BattleCore']['Settings'][_0x537bd1(0x22d)]['BattleCmdList'];}},Game_Actor['prototype'][_0x4fbf70(0xa3a)]=function(){const _0xe810fc=_0x4fbf70;if(this[_0xe810fc(0x7ff)][_0xe810fc(0x3f0)]!==undefined)return this[_0xe810fc(0x7ff)][_0xe810fc(0x3f0)];if(this[_0xe810fc(0x55a)]()[_0xe810fc(0x9c1)][_0xe810fc(0xc4b)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i))this[_0xe810fc(0x7ff)][_0xe810fc(0x3f0)]=eval(RegExp['$1']),this[_0xe810fc(0x7ff)][_0xe810fc(0x448)]=eval(RegExp['$2']);else{if('lKSTt'!==_0xe810fc(0x1db))this[_0xe810fc(0x7ff)][_0xe810fc(0x3f0)]=Game_Battler['prototype'][_0xe810fc(0xa3a)][_0xe810fc(0xc4a)](this);else{const _0x2a8405=this[_0xe810fc(0x371)][_0xe810fc(0xbaf)]();if(_0x2a8405){const _0x180bf4=this[_0xe810fc(0x7d3)](_0xe810fc(0x4be),_0x2a8405['id']);this[_0xe810fc(0x76b)](_0x180bf4||0x0);}}}return this[_0xe810fc(0x7ff)][_0xe810fc(0x3f0)];},Game_Actor[_0x4fbf70(0x92c)][_0x4fbf70(0xac8)]=function(){const _0x1b59c7=_0x4fbf70;if(this[_0x1b59c7(0x7ff)][_0x1b59c7(0x448)]!==undefined)return this['_cache']['svAnchorY'];return this[_0x1b59c7(0x55a)]()['note']['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this['_cache']['svAnchorX']=eval(RegExp['$1']),this[_0x1b59c7(0x7ff)]['svAnchorY']=eval(RegExp['$2'])):_0x1b59c7(0xd11)!==_0x1b59c7(0xd11)?this['addSkillTypeCommand'](_0x3daacd):this[_0x1b59c7(0x7ff)][_0x1b59c7(0x448)]=Game_Battler['prototype'][_0x1b59c7(0xac8)][_0x1b59c7(0xc4a)](this),this[_0x1b59c7(0x7ff)][_0x1b59c7(0x448)];},Game_Actor[_0x4fbf70(0x92c)][_0x4fbf70(0xbf3)]=function(){const _0x473a39=_0x4fbf70;if(this[_0x473a39(0x7ff)][_0x473a39(0x5c9)]!==undefined)return this['_cache']['svShadow'];if(this[_0x473a39(0x55a)]()[_0x473a39(0x9c1)]['match'](/<SIDEVIEW SHOW SHADOW>/i))this[_0x473a39(0x7ff)][_0x473a39(0x5c9)]=!![];else this[_0x473a39(0x55a)]()['note'][_0x473a39(0xc4b)](/<SIDEVIEW HIDE SHADOW>/i)?this[_0x473a39(0x7ff)]['svShadow']=![]:this[_0x473a39(0x7ff)][_0x473a39(0x5c9)]=Game_Battler['prototype'][_0x473a39(0xbf3)][_0x473a39(0xc4a)](this);return this[_0x473a39(0x7ff)][_0x473a39(0x5c9)];},Game_Actor[_0x4fbf70(0x92c)][_0x4fbf70(0xcb6)]=function(){const _0x1740ef=_0x4fbf70;return VisuMZ[_0x1740ef(0xae2)][_0x1740ef(0x837)]['Actor'][_0x1740ef(0x8d8)];},Game_Actor['prototype'][_0x4fbf70(0x795)]=function(){const _0x50b8ab=_0x4fbf70,_0x23e64a=this[_0x50b8ab(0x4b2)](),_0x4167ba=_0x23e64a[0x0]?_0x23e64a[0x0][_0x50b8ab(0x621)]:0x0,_0x844c17=$dataSystem[_0x50b8ab(0xb7f)][_0x4167ba];_0x844c17&&this['startWeaponAnimation'](_0x844c17[_0x50b8ab(0x25f)]);},Game_Actor[_0x4fbf70(0x92c)][_0x4fbf70(0x377)]=function(_0x4c2941){const _0x3a7f00=_0x4fbf70;Game_Battler['prototype']['performAction']['call'](this,_0x4c2941),this[_0x3a7f00(0x396)](_0x4c2941);},Game_Actor[_0x4fbf70(0x92c)][_0x4fbf70(0xb62)]=function(){const _0x4c33a0=_0x4fbf70,_0x5c547e=this[_0x4c33a0(0x4b2)](),_0x6a9ec1=_0x5c547e[0x0]?_0x5c547e[0x0][_0x4c33a0(0x621)]:0x0;return $dataSystem[_0x4c33a0(0xb7f)][_0x6a9ec1];},Game_Actor['prototype'][_0x4fbf70(0xd5a)]=function(_0x511254){const _0x3600d7=_0x4fbf70;_0x511254=_0x511254||0x1,_0x511254--;const _0x1d2cd1=this[_0x3600d7(0x4b2)]();return _0x1d2cd1[_0x511254]?_0x1d2cd1[_0x511254]['animationId']:0x0;},Game_Actor[_0x4fbf70(0x92c)][_0x4fbf70(0x624)]=function(_0xfdbab){const _0x566a02=_0x4fbf70;_0xfdbab=_0xfdbab||0x1,_0xfdbab--;const _0x25037a=this['weapons'](),_0xcd45b3=_0x25037a[_0xfdbab]?_0x25037a[_0xfdbab][_0x566a02(0x621)]:0x0;return $dataSystem[_0x566a02(0xb7f)][_0xcd45b3];},Game_Actor[_0x4fbf70(0x92c)][_0x4fbf70(0xa42)]=function(_0x395c47){const _0x4f5518=_0x4fbf70;_0x395c47=_0x395c47||0x1,_0x395c47--;const _0xe5970c=this[_0x4f5518(0x4b2)](),_0x309242=_0xe5970c[_0x395c47]?_0xe5970c[_0x395c47][_0x4f5518(0x621)]:0x0,_0x31754b=$dataSystem[_0x4f5518(0xb7f)][_0x309242];if(_0x31754b){if('dkPSh'==='aVbqM'){if(!_0x53fb03['isSceneBattle']())return;if(!_0x1fed65[_0x4f5518(0x524)])return;_0x4850ef[_0x4f5518(0x334)](_0x1d9e8e,_0x326bc3);const _0xa2014c=_0x4eeef5[_0x4f5518(0xc52)](),_0x403865=_0x2248d6['WaitForCamera'];_0x27f6f4[_0x4f5518(0x291)](_0x22cc2c[_0x4f5518(0x259)],_0x28fef0[_0x4f5518(0x764)],_0xd852ed[_0x4f5518(0x590)],_0x4e8690[_0x4f5518(0x483)]);if(_0x403865)_0xa2014c[_0x4f5518(0x645)]('battleCamera');}else{if(_0x31754b['type']===0x0)_0x4f5518(0x1c9)!=='inocJ'?this[_0x4f5518(0x432)]['setFrame'](0x0,0x0,0x0,0x0):this['requestMotion']('thrust');else{if(_0x31754b[_0x4f5518(0x2ff)]===0x1)this[_0x4f5518(0x9eb)](_0x4f5518(0x809));else _0x31754b[_0x4f5518(0x2ff)]===0x2&&this[_0x4f5518(0x9eb)](_0x4f5518(0x54d));}this[_0x4f5518(0x4a7)](_0x31754b[_0x4f5518(0x25f)]);}}},Game_Battler['prototype'][_0x4fbf70(0xd78)]=function(_0x57cf56){const _0x41c4d7=_0x4fbf70;this['_activeWeaponSlot']=_0x57cf56||0x0,this[_0x41c4d7(0x7ff)]={};},Game_Battler['prototype'][_0x4fbf70(0x48c)]=function(){const _0x1ad11d=_0x4fbf70;this[_0x1ad11d(0x900)]=this[_0x1ad11d(0x900)]||0x0,this[_0x1ad11d(0x900)]++,this['_cache']={};},Game_Battler[_0x4fbf70(0x92c)]['clearActiveWeaponSlot']=function(){const _0x3c5bae=_0x4fbf70;this[_0x3c5bae(0x900)]=undefined,this[_0x3c5bae(0x7ff)]={};},VisuMZ[_0x4fbf70(0xae2)]['Game_Actor_equips']=Game_Actor['prototype']['equips'],Game_Actor[_0x4fbf70(0x92c)][_0x4fbf70(0x8ee)]=function(){const _0x33d53a=_0x4fbf70;let _0x2f970e=VisuMZ[_0x33d53a(0xae2)][_0x33d53a(0x88d)][_0x33d53a(0xc4a)](this);if(this[_0x33d53a(0xce8)])return _0x2f970e;if(this[_0x33d53a(0x900)]!==undefined){if(_0x33d53a(0x67d)!==_0x33d53a(0x52c)){this['_tempEquipCheck']=!![];const _0xeeba31=this[_0x33d53a(0x6e0)]();for(let _0x3205e7=0x0;_0x3205e7<_0xeeba31[_0x33d53a(0x9d2)];_0x3205e7++){_0x33d53a(0x727)!==_0x33d53a(0xa35)?_0xeeba31[_0x3205e7]===0x1&&this['_activeWeaponSlot']!==_0x3205e7&&(_0x2f970e[_0x3205e7]=null):(this[_0x33d53a(0x6be)]=_0x49fe77,this[_0x33d53a(0x669)]=-0x1,this[_0x33d53a(0x1b0)]=0x0,this[_0x33d53a(0x7d2)](),this[_0x33d53a(0xcc9)]());}this['_tempEquipCheck']=undefined;}else{const _0x5659d4=_0x33eff9(_0x4db4f3['$1'])[_0x33d53a(0x94a)](/[\r\n]+/)[_0x33d53a(0x5d9)]('');_0x2d18b0[_0x33d53a(0x509)]=_0x26990a[_0x33d53a(0x794)](_0x5659d4);}}return _0x2f970e;},Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0xa96)]=function(_0x51c8d9){const _0x1cf31d=_0x4fbf70;if(_0x51c8d9['isActor']()){if(_0x1cf31d(0xbe6)!==_0x1cf31d(0x958))return _0x51c8d9[_0x1cf31d(0x4b2)]()[_0x1cf31d(0x9d2)]||0x1;else{const _0x35d47f=_0x3da5c2[_0x1cf31d(0x206)]();if(_0x35d47f)_0x35d47f[_0x1cf31d(0x594)]('all\x20actors');this[_0x1cf31d(0xb34)]();}}else{if('EJQcV'==='EJQcV')return 0x1;else _0x4bf46d[_0x1cf31d(0x92c)]['performAction'][_0x1cf31d(0xc4a)](this,_0x1b1ac5),this[_0x1cf31d(0x396)](_0x1061c4);}},Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x55f)]=function(_0x4e84ad,_0x27f21b){const _0x4fa45b=_0x4fbf70;_0x4e84ad&&_0x4e84ad[_0x4fa45b(0xc9f)]()&&_0x4e84ad[_0x4fa45b(0xd78)](_0x27f21b),this['callNextMethod']();},Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x781)]=function(_0x3bc839){const _0x5a2ac6=_0x4fbf70;if(_0x3bc839&&_0x3bc839[_0x5a2ac6(0xc9f)]()){if(_0x5a2ac6(0x409)===_0x5a2ac6(0x409))_0x3bc839[_0x5a2ac6(0x674)]();else{this['push']('performSubstitute',_0x1ad222,_0x235562);if(!_0x340fcd[_0x5a2ac6(0xae2)]['Settings'][_0x5a2ac6(0x202)][_0x5a2ac6(0x1dd)])return;const _0x238f82=_0x19a330['name'](),_0x3e2534=_0x17bce4[_0x5a2ac6(0x69b)][_0x5a2ac6(0x946)](_0x238f82,_0x5af655[_0x5a2ac6(0x27a)]());this[_0x5a2ac6(0x25b)](_0x5a2ac6(0xb70),_0x3e2534);}}this['callNextMethod']();},Game_Actor['prototype']['battleUIOffsetX']=function(){const _0x2d5f4c=_0x4fbf70;let _0x2fb62f=_0x2d5f4c(0x67a);if(this['checkCacheKey'](_0x2fb62f))return this[_0x2d5f4c(0x7ff)][_0x2fb62f];return this[_0x2d5f4c(0x7ff)][_0x2fb62f]=this[_0x2d5f4c(0x1cf)](this[_0x2d5f4c(0x55a)]()),this['_cache'][_0x2fb62f];},Game_Actor[_0x4fbf70(0x92c)][_0x4fbf70(0xb74)]=function(){const _0x3e7e32=_0x4fbf70;let _0xa28b1d=_0x3e7e32(0xb74);if(this[_0x3e7e32(0x607)](_0xa28b1d))return this['_cache'][_0xa28b1d];return this[_0x3e7e32(0x7ff)][_0xa28b1d]=this[_0x3e7e32(0xa46)](this[_0x3e7e32(0x55a)]()),this['_cache'][_0xa28b1d];},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xc3b)]=Game_Enemy[_0x4fbf70(0x92c)]['setup'],Game_Enemy[_0x4fbf70(0x92c)]['setup']=function(_0xe61577,_0x24be33,_0x4fade6){const _0x3b73c7=_0x4fbf70;_0xe61577=DataManager['swapEnemyIDs'](_0xe61577),VisuMZ[_0x3b73c7(0xae2)][_0x3b73c7(0xc3b)][_0x3b73c7(0xc4a)](this,_0xe61577,_0x24be33,_0x4fade6);Imported[_0x3b73c7(0xcf4)]&&this['initElementStatusCore']();this[_0x3b73c7(0x27b)](),this[_0x3b73c7(0x719)]();if(Imported[_0x3b73c7(0xcf4)]){if(_0x3b73c7(0x6e1)===_0x3b73c7(0x6e1))this[_0x3b73c7(0x4e9)]();else{if(this['isDead']()&&this['allowCollapse']())return![];}}},Game_Enemy['prototype']['clearBattleCoreData']=function(){const _0x1411e8=_0x4fbf70,_0x336b71=VisuMZ[_0x1411e8(0xae2)][_0x1411e8(0x837)]['Enemy'];this[_0x1411e8(0x3d4)]=_0x336b71[_0x1411e8(0x776)],this[_0x1411e8(0x36d)]={};},Game_Enemy[_0x4fbf70(0x92c)]['setupBattleCoreData']=function(){const _0xc8065a=_0x4fbf70,_0x48d54f=VisuMZ[_0xc8065a(0xae2)][_0xc8065a(0x837)][_0xc8065a(0x73f)],_0x30779a=this['enemy']()['note'];this[_0xc8065a(0x36d)]={'name':'','wtypeId':_0x48d54f[_0xc8065a(0x33d)],'collapse':_0x48d54f[_0xc8065a(0xc7a)],'motionIdle':_0x48d54f[_0xc8065a(0xcea)],'width':_0x48d54f['Width']||0x40,'height':_0x48d54f[_0xc8065a(0xb23)]||0x40,'anchorX':_0x48d54f[_0xc8065a(0x4ce)]||0x0,'anchorY':_0x48d54f[_0xc8065a(0x295)]||0x0,'shadow':_0x48d54f[_0xc8065a(0xd71)]};_0x30779a[_0xc8065a(0xc4b)](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this[_0xc8065a(0x3d4)]=Number(RegExp['$1']));const _0x275213=this[_0xc8065a(0x36d)];if(_0x30779a[_0xc8065a(0xc4b)](/<SIDEVIEW BATTLER: (.*)>/i))_0xc8065a(0x8e2)!==_0xc8065a(0x8e2)?this['processEnemyModeTouchBattleCore']():_0x275213[_0xc8065a(0x27a)]=String(RegExp['$1']);else{if(_0x30779a[_0xc8065a(0xc4b)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){if('cvVEa'!==_0xc8065a(0x48e))_0xf7a021[_0xc8065a(0xb75)][_0xc8065a(0x1a8)]<1.19&&(_0x191ee2(_0x14a1ff[_0xc8065a(0x946)](_0xc8065a(0xb5c))),_0x298251['exit']());else{const _0x48296b=String(RegExp['$1'])[_0xc8065a(0x94a)](/[\r\n]+/)[_0xc8065a(0x5d9)]('');_0x275213[_0xc8065a(0x27a)]=DataManager[_0xc8065a(0x794)](_0x48296b);}}}_0x30779a[_0xc8065a(0xc4b)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x275213[_0xc8065a(0xc8b)]=eval(RegExp['$1']),_0x275213['anchorY']=eval(RegExp['$2']));if(_0x30779a[_0xc8065a(0xc4b)](/<SIDEVIEW COLLAPSE>/i))_0x275213['collapse']=!![];else _0x30779a['match'](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x275213[_0xc8065a(0x319)]=![]);if(_0x30779a[_0xc8065a(0xc4b)](/<SIDEVIEW SHOW SHADOW>/i))_0x275213[_0xc8065a(0xccf)]=!![];else{if(_0x30779a[_0xc8065a(0xc4b)](/<SIDEVIEW HIDE SHADOW>/i)){if(_0xc8065a(0x693)!=='XrUqw')_0x275213['shadow']=![];else{const _0x406fcf=this[_0xc8065a(0xbb7)],_0x109a22=_0x262889[_0xc8065a(0xc69)](),_0x17a3bf=_0x5e8629['x']+_0x2965c6[_0xc8065a(0xb2d)](_0x31f12b[_0xc8065a(0x606)]/0x2)+_0x109a22;_0x406fcf['x']=_0x406fcf[_0xc8065a(0x606)]/-0x2+_0x17a3bf,_0x406fcf['y']=_0x38646c[_0xc8065a(0xb2d)](_0x5bacdc[_0xc8065a(0x389)]/0x2);}}}if(_0x30779a[_0xc8065a(0xc4b)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x275213[_0xc8065a(0x509)]=String(RegExp['$1'])['toLowerCase']()[_0xc8065a(0xcda)]();else{if(_0x30779a['match'](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x555d41=String(RegExp['$1'])[_0xc8065a(0x94a)](/[\r\n]+/)['remove']('');_0x275213[_0xc8065a(0x509)]=DataManager[_0xc8065a(0x794)](_0x555d41);}}if(_0x30779a[_0xc8065a(0xc4b)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)){if(_0xc8065a(0xb03)!=='qQlkw'){const _0x39a37f=this[_0xc8065a(0xbb7)];_0x39a37f['contents'][_0xc8065a(0xb36)]();const _0x2e57fd=this[_0xc8065a(0xcf2)](this['index']());if(_0x2e57fd===_0xc8065a(0x587)&&this['maxItems']()>0x0){const _0x291e6e=this[_0xc8065a(0x8fc)](this['index']());let _0x15dbba=this[_0xc8065a(0xbb5)](this[_0xc8065a(0x331)]());_0x15dbba=_0x15dbba[_0xc8065a(0xb7c)](/\\I\[(\d+)\]/gi,''),_0x39a37f['resetFontSettings'](),this[_0xc8065a(0x35f)](_0x15dbba,_0x291e6e),this[_0xc8065a(0x66f)](_0x15dbba,_0x291e6e),this[_0xc8065a(0x395)](_0x15dbba,_0x291e6e);}}else _0x275213[_0xc8065a(0x606)]=Number(RegExp['$1']),_0x275213[_0xc8065a(0x389)]=Number(RegExp['$2']);}if(_0x30779a[_0xc8065a(0xc4b)](/<SIDEVIEW WEAPON: (.*)>/i))_0x275213['wtypeId']=DataManager[_0xc8065a(0x3f9)](RegExp['$1']);else{if(_0x30779a[_0xc8065a(0xc4b)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x407448=String(RegExp['$1'])[_0xc8065a(0x94a)](/[\r\n]+/)[_0xc8065a(0x5d9)](''),_0x578807=DataManager[_0xc8065a(0x794)](_0x407448);_0x275213['wtypeId']=DataManager['getWtypeIdWithName'](_0x578807);}}if(Imported[_0xc8065a(0xcf4)]){if(_0xc8065a(0x994)!=='anSju'){const _0xbab347=this['getTraitSetKeys']();for(const _0x17ef9c of _0xbab347){const _0x51a3d0=this[_0xc8065a(0x223)](_0x17ef9c)[_0xc8065a(0x31a)]['toUpperCase']()[_0xc8065a(0xcda)](),_0x5db55b=_0x17ef9c[_0xc8065a(0x7a4)]()[_0xc8065a(0xcda)]();if(_0x30779a[_0xc8065a(0xc4b)](VisuMZ[_0xc8065a(0xcfb)]['RegExp']['SvBattlerSolo-%1-%2'[_0xc8065a(0x946)](_0x5db55b,_0x51a3d0)]))_0x275213[_0xc8065a(0x27a)]=String(RegExp['$1']);else{if(_0x30779a[_0xc8065a(0xc4b)](VisuMZ[_0xc8065a(0xcfb)]['RegExp'][_0xc8065a(0x2d0)[_0xc8065a(0x946)](_0x5db55b,_0x51a3d0)])){const _0x2614cf=String(RegExp['$1'])[_0xc8065a(0x94a)](/[\r\n]+/)['remove']('');_0x275213['name']=DataManager[_0xc8065a(0x794)](_0x2614cf);}}if(_0x30779a['match'](VisuMZ[_0xc8065a(0xcfb)]['RegExp'][_0xc8065a(0x30e)['format'](_0x5db55b,_0x51a3d0)]))_0x275213[_0xc8065a(0x621)]=DataManager[_0xc8065a(0x3f9)](RegExp['$1']);else{if(_0x30779a[_0xc8065a(0xc4b)](VisuMZ[_0xc8065a(0xcfb)]['RegExp'][_0xc8065a(0xcc2)['format'](_0x5db55b,_0x51a3d0)])){const _0x1280f5=String(RegExp['$1'])[_0xc8065a(0x94a)](/[\r\n]+/)[_0xc8065a(0x5d9)](''),_0x48459a=DataManager[_0xc8065a(0x794)](_0x1280f5);_0x275213[_0xc8065a(0x621)]=DataManager[_0xc8065a(0x3f9)](_0x48459a);}}if(_0x30779a[_0xc8065a(0xc4b)](VisuMZ[_0xc8065a(0xcfb)][_0xc8065a(0xca9)][_0xc8065a(0x806)[_0xc8065a(0x946)](_0x5db55b,_0x51a3d0)]))_0x275213[_0xc8065a(0x509)]=String(RegExp['$1'])['toLowerCase']()['trim']();else{if(_0x30779a[_0xc8065a(0xc4b)](VisuMZ[_0xc8065a(0xcfb)][_0xc8065a(0xca9)][_0xc8065a(0x6af)[_0xc8065a(0x946)](_0x5db55b,_0x51a3d0)])){if(_0xc8065a(0x208)!=='UhFgx'){const _0x493e21=String(RegExp['$1'])[_0xc8065a(0x94a)](/[\r\n]+/)[_0xc8065a(0x5d9)]('');_0x275213[_0xc8065a(0x509)]=DataManager['processRandomizedData'](_0x493e21);}else return![];}}}}else{const _0xecaff5=_0x16ba29[_0xc8065a(0xae2)][_0xc8065a(0x837)]['BattleLayout'],_0x4ff41e=this[_0xc8065a(0x55a)](_0x2dd7f4),_0x10fa02=this[_0xc8065a(0xa63)](_0x368000),_0x305624=_0xf7d88[_0xc8065a(0xbec)](_0x10fa02['x']+(_0x10fa02[_0xc8065a(0x606)]-0x80)/0x2),_0x189557=this['nameY'](_0x10fa02);let _0x50e175=_0x305624-_0x33e7a3[_0xc8065a(0xa8e)]/0x2-0x4,_0x4124f3=_0x189557+_0x53769c['iconHeight']/0x2;_0x50e175-_0x225dee[_0xc8065a(0xa8e)]/0x2<_0x10fa02['x']&&(_0x50e175=_0x305624+_0x99ec1d['iconWidth']/0x2-0x4,_0x4124f3=_0x189557-_0x13734c['iconHeight']/0x2);const _0x5ba1d9=_0x305624,_0x3fc554=this[_0xc8065a(0x985)](_0x10fa02);this[_0xc8065a(0x93c)](_0x4ff41e,_0x305624+(_0xecaff5[_0xc8065a(0xd4a)]||0x0),_0x189557+(_0xecaff5['TpbGaugeOffsetY']||0x0)),this[_0xc8065a(0x358)](_0x4ff41e,_0x305624+(_0xecaff5[_0xc8065a(0x22a)]||0x0),_0x189557+(_0xecaff5[_0xc8065a(0x1e1)]||0x0)),this[_0xc8065a(0x5b4)](_0x4ff41e,_0x50e175+(_0xecaff5[_0xc8065a(0x89d)]||0x0),_0x4124f3+(_0xecaff5[_0xc8065a(0x91c)]||0x0)),this[_0xc8065a(0x3aa)](_0x4ff41e,'hp',_0x5ba1d9+(_0xecaff5[_0xc8065a(0x32d)]||0x0),_0x3fc554+(_0xecaff5[_0xc8065a(0x748)]||0x0)),this['placeGauge'](_0x4ff41e,'mp',_0x5ba1d9+(_0xecaff5['MpGaugeOffsetX']||0x0),_0x3fc554+this[_0xc8065a(0x429)]()+(_0xecaff5[_0xc8065a(0x3a2)]||0x0)),_0x40877c[_0xc8065a(0x81d)]&&this[_0xc8065a(0x3aa)](_0x4ff41e,'tp',_0x5ba1d9+(_0xecaff5[_0xc8065a(0x2c6)]||0x0),_0x3fc554+this[_0xc8065a(0x429)]()*0x2+(_0xecaff5[_0xc8065a(0xc63)]||0x0));}}},Game_Enemy[_0x4fbf70(0x92c)][_0x4fbf70(0x9f1)]=function(){const _0xf98dc6=_0x4fbf70;return this[_0xf98dc6(0x3d4)]||0x0;},Game_Enemy[_0x4fbf70(0x92c)][_0x4fbf70(0x420)]=function(){const _0x101a82=_0x4fbf70;return this[_0x101a82(0x9f1)]();},Game_Enemy['prototype'][_0x4fbf70(0xd5a)]=function(_0x435a80){const _0x3ec424=_0x4fbf70;return this[_0x3ec424(0x9f1)]();},Game_Enemy[_0x4fbf70(0x92c)][_0x4fbf70(0x34a)]=function(){const _0x5e3123=_0x4fbf70;if(this['enemy']()[_0x5e3123(0x9c1)][_0x5e3123(0xc4b)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x5e3123(0x92c)][_0x5e3123(0x34a)][_0x5e3123(0xc4a)](this);},Game_Enemy[_0x4fbf70(0x92c)][_0x4fbf70(0xa71)]=function(){const _0x50504a=_0x4fbf70;if(this[_0x50504a(0xbb3)]()[_0x50504a(0x9c1)]['match'](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x4fbf70(0x92c)][_0x4fbf70(0xc70)]=function(){const _0xcd12d1=_0x4fbf70,_0x4bffe4=[];for(const _0x4b8509 of this[_0xcd12d1(0xbb3)]()[_0xcd12d1(0x38f)]){if(_0xcd12d1(0x6cf)===_0xcd12d1(0x80c))return this[_0xcd12d1(0x516)][_0xcd12d1(0xc6f)]();else{const _0x351a97=$dataSkills[_0x4b8509['skillId']];if(_0x351a97&&!_0x4bffe4[_0xcd12d1(0x6e3)](_0x351a97))_0x4bffe4[_0xcd12d1(0x25b)](_0x351a97);}}return _0x4bffe4;},Game_Enemy['prototype']['battleUIOffsetX']=function(){const _0x2a64f1=_0x4fbf70;let _0x2c2c78='battleUIOffsetX';if(this['checkCacheKey'](_0x2c2c78))return this[_0x2a64f1(0x7ff)][_0x2c2c78];return this['_cache'][_0x2c2c78]=this['createBattleUIOffsetX'](this[_0x2a64f1(0xbb3)]()),this[_0x2a64f1(0x7ff)][_0x2c2c78];},Game_Enemy[_0x4fbf70(0x92c)][_0x4fbf70(0xb74)]=function(){const _0x4b7ac1=_0x4fbf70;let _0x432ff8=_0x4b7ac1(0xb74);if(this[_0x4b7ac1(0x607)](_0x432ff8))return this[_0x4b7ac1(0x7ff)][_0x432ff8];return this[_0x4b7ac1(0x7ff)][_0x432ff8]=this[_0x4b7ac1(0xa46)](this[_0x4b7ac1(0xbb3)]()),this[_0x4b7ac1(0x7ff)][_0x432ff8];},Game_Enemy[_0x4fbf70(0x92c)][_0x4fbf70(0x82b)]=function(){const _0x5905e5=_0x4fbf70;if(this['_svBattlerData']!==undefined)return this['_svBattlerData'];return this[_0x5905e5(0x719)](),this[_0x5905e5(0x36d)];},Game_Enemy['prototype']['hasSvBattler']=function(){const _0x697452=_0x4fbf70;return this[_0x697452(0x82b)]()[_0x697452(0x27a)]!=='';},Game_Enemy[_0x4fbf70(0x92c)][_0x4fbf70(0x278)]=function(){const _0x11e5ed=_0x4fbf70;return this['svBattlerData']()[_0x11e5ed(0x27a)];},Game_Enemy[_0x4fbf70(0x92c)][_0x4fbf70(0xcb6)]=function(){const _0x2a0266=_0x4fbf70;return this['hasSvBattler']()?VisuMZ[_0x2a0266(0xae2)]['Settings'][_0x2a0266(0x410)][_0x2a0266(0x8d8)]:VisuMZ[_0x2a0266(0xae2)][_0x2a0266(0x837)][_0x2a0266(0x73f)][_0x2a0266(0x8d8)];},Game_Enemy[_0x4fbf70(0x92c)]['performAction']=function(_0x9c1b02){const _0x33ca64=_0x4fbf70;Game_Battler[_0x33ca64(0x92c)][_0x33ca64(0x377)][_0x33ca64(0xc4a)](this,_0x9c1b02);if(this[_0x33ca64(0x42f)]())this[_0x33ca64(0x396)](_0x9c1b02);},Game_Enemy[_0x4fbf70(0x92c)][_0x4fbf70(0x30f)]=function(){const _0x2b3314=_0x4fbf70,_0x4e1d04=this[_0x2b3314(0x82b)]()[_0x2b3314(0x621)]||0x0,_0x10e091=$dataSystem[_0x2b3314(0xb7f)][_0x4e1d04];if(_0x10e091){if('mlMmE'!==_0x2b3314(0x2d6)){if(_0x10e091[_0x2b3314(0x2ff)]===0x0)this[_0x2b3314(0x9eb)](_0x2b3314(0x805));else{if(_0x10e091[_0x2b3314(0x2ff)]===0x1)this[_0x2b3314(0x9eb)](_0x2b3314(0x809));else{if(_0x10e091[_0x2b3314(0x2ff)]===0x2){if(_0x2b3314(0xccd)!==_0x2b3314(0xccd))return _0x427f08[_0x2b3314(0x4d5)]-_0x3771a6[_0x2b3314(0x4d5)];else this[_0x2b3314(0x9eb)](_0x2b3314(0x54d));}}}}else _0x4d4cb9[_0x2b3314(0x674)]();}},Game_Enemy[_0x4fbf70(0x92c)]['performWeaponAnimation']=function(){const _0x19b62f=_0x4fbf70,_0x596bf1=this[_0x19b62f(0x82b)]()[_0x19b62f(0x621)]||0x0,_0x187b84=$dataSystem[_0x19b62f(0xb7f)][_0x596bf1];_0x187b84&&(_0x19b62f(0x311)==='ZnhUp'?(this['_mainSprite']['x']=0x0,this[_0x19b62f(0xb1b)]['y']=this[_0x19b62f(0x389)]*0.5):this[_0x19b62f(0x4a7)](_0x187b84[_0x19b62f(0x25f)]));},Game_Enemy['prototype']['getAttackMotion']=function(){const _0x10c03d=_0x4fbf70,_0x2a2cd0=this[_0x10c03d(0x82b)]()[_0x10c03d(0x621)]||0x0;return $dataSystem['attackMotions'][_0x2a2cd0];},Game_Enemy[_0x4fbf70(0x92c)][_0x4fbf70(0x624)]=function(_0x53ede5){return this['getAttackMotion']();},Game_Enemy['prototype'][_0x4fbf70(0x2db)]=function(){const _0x54d949=_0x4fbf70;Game_Battler[_0x54d949(0x92c)][_0x54d949(0x2db)][_0x54d949(0xc4a)](this),this['isSpriteVisible']()&&this['hasSvBattler']()&&this[_0x54d949(0x9eb)](_0x54d949(0x36f)),SoundManager[_0x54d949(0x57b)]();},Game_Enemy['prototype'][_0x4fbf70(0x863)]=function(){const _0x3a86e0=_0x4fbf70;Game_Battler['prototype'][_0x3a86e0(0x863)][_0x3a86e0(0xc4a)](this),this[_0x3a86e0(0x9eb)]('evade');},Game_Enemy[_0x4fbf70(0x92c)][_0x4fbf70(0x9a9)]=function(){const _0xf058d6=_0x4fbf70;Game_Battler[_0xf058d6(0x92c)][_0xf058d6(0x9a9)][_0xf058d6(0xc4a)](this),this[_0xf058d6(0x9eb)](_0xf058d6(0x903));},Game_Enemy[_0x4fbf70(0x92c)][_0x4fbf70(0x5d6)]=function(){const _0x2f93ad=_0x4fbf70;Game_Battler[_0x2f93ad(0x92c)]['performCounter'][_0x2f93ad(0xc4a)](this),this['performAttack']();},Game_Enemy['prototype'][_0x4fbf70(0x7af)]=function(){const _0x36a0a4=_0x4fbf70;if(this[_0x36a0a4(0x42f)]()){if(this['collapseType']()>=0x1)return!![];return this[_0x36a0a4(0x82b)]()[_0x36a0a4(0x319)];}else return!![];},Game_Enemy[_0x4fbf70(0x92c)][_0x4fbf70(0xa3a)]=function(){const _0x2a51f5=_0x4fbf70;return this[_0x2a51f5(0x82b)]()[_0x2a51f5(0xc8b)];},Game_Enemy[_0x4fbf70(0x92c)][_0x4fbf70(0xac8)]=function(){const _0x381c93=_0x4fbf70;return this[_0x381c93(0x82b)]()[_0x381c93(0x2b0)];},Game_Enemy[_0x4fbf70(0x92c)]['svBattlerShadowVisible']=function(){const _0x3fdf4a=_0x4fbf70;return this[_0x3fdf4a(0x82b)]()['shadow'];},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xb0c)]=Game_Enemy[_0x4fbf70(0x92c)]['transform'],Game_Enemy['prototype'][_0x4fbf70(0x983)]=function(_0x4a2de6){const _0x4e2511=_0x4fbf70;VisuMZ[_0x4e2511(0xae2)][_0x4e2511(0xb0c)][_0x4e2511(0xc4a)](this,_0x4a2de6),this[_0x4e2511(0x27b)](),this[_0x4e2511(0x719)]();const _0x1672ce=this[_0x4e2511(0xb81)]();_0x1672ce&&(_0x4e2511(0x81a)===_0x4e2511(0x81a)?(_0x1672ce[_0x4e2511(0x33e)]=undefined,_0x1672ce[_0x4e2511(0xaf4)](this)):(this[_0x4e2511(0xb1b)][_0x4e2511(0x597)]=_0x199a79,this[_0x4e2511(0x597)]=new _0x416f3f(_0x5c16b7['width'],_0x561eaa['height'])));},Game_Unit[_0x4fbf70(0x92c)]['processBattleCoreJS']=function(_0x2f962c){const _0x1ab6b7=_0x4fbf70;for(const _0x4afe97 of this['members']()){if(_0x4afe97)_0x4afe97[_0x1ab6b7(0x7d8)](_0x2f962c);}},Game_Unit[_0x4fbf70(0x92c)][_0x4fbf70(0x82c)]=function(){const _0x23cf42=_0x4fbf70,_0x5e4c53=this[_0x23cf42(0x1c3)]();return _0x5e4c53[Math[_0x23cf42(0x545)](_0x5e4c53[_0x23cf42(0x9d2)])];},VisuMZ['BattleCore'][_0x4fbf70(0xa1f)]=Game_Party[_0x4fbf70(0x92c)]['addActor'],Game_Party['prototype']['addActor']=function(_0x25cdc7){const _0x5b4bf2=_0x4fbf70;VisuMZ[_0x5b4bf2(0xae2)][_0x5b4bf2(0xa1f)]['call'](this,_0x25cdc7),BattleManager[_0x5b4bf2(0xd0d)]();},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x6b3)]=Game_Party['prototype'][_0x4fbf70(0x628)],Game_Party[_0x4fbf70(0x92c)][_0x4fbf70(0x628)]=function(_0x585f94){const _0x481605=_0x4fbf70;VisuMZ[_0x481605(0xae2)][_0x481605(0x6b3)][_0x481605(0xc4a)](this,_0x585f94),BattleManager[_0x481605(0xd0d)]();},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xabb)]=Game_Troop[_0x4fbf70(0x92c)][_0x4fbf70(0xc55)],Game_Troop[_0x4fbf70(0x92c)][_0x4fbf70(0xc55)]=function(_0x214950){const _0x36273a=_0x4fbf70;$gameTemp['clearForcedGameTroopSettingsBattleCore'](),$gameTemp[_0x36273a(0xaf8)](_0x214950),VisuMZ[_0x36273a(0xae2)][_0x36273a(0xabb)]['call'](this,_0x214950),this[_0x36273a(0xcfe)]();},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xacc)]=Game_Troop[_0x4fbf70(0x92c)][_0x4fbf70(0x2d2)],Game_Troop[_0x4fbf70(0x92c)][_0x4fbf70(0x2d2)]=function(){const _0x2d11da=_0x4fbf70;let _0x1e8ba6=VisuMZ[_0x2d11da(0xae2)][_0x2d11da(0xacc)][_0x2d11da(0xc4a)](this);return this[_0x2d11da(0x1fe)]&&(_0x1e8ba6*=this[_0x2d11da(0x1fe)]()),Math[_0x2d11da(0x745)](_0x1e8ba6);},Game_Troop[_0x4fbf70(0x92c)][_0x4fbf70(0x1fe)]=function(){return 0x1;},Game_Troop[_0x4fbf70(0x92c)]['extendTroopMembers']=function(){const _0x122d45=_0x4fbf70,_0x385f18=DataManager[_0x122d45(0x766)](this[_0x122d45(0x675)]()['id']);if(_0x385f18['match'](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x239e05=RegExp['$1']['split'](',')[_0x122d45(0x990)](_0x53a475=>Number(_0x53a475));this[_0x122d45(0x6b7)](),this[_0x122d45(0x8d9)](_0x239e05);}},Game_Troop[_0x4fbf70(0x92c)][_0x4fbf70(0x6b7)]=function(){const _0xfec347=_0x4fbf70;let _0x22ea2d=_0xfec347(0xbcd)+'\x0a';_0x22ea2d+=_0xfec347(0x8f9);Imported[_0xfec347(0x926)]&&(VisuMZ[_0xfec347(0xb80)]['version']<1.11&&(alert(_0x22ea2d[_0xfec347(0x946)](_0xfec347(0xd83))),SceneManager[_0xfec347(0x4c5)]()));Imported[_0xfec347(0x326)]&&(VisuMZ[_0xfec347(0xb75)][_0xfec347(0x1a8)]<1.19&&(alert(_0x22ea2d[_0xfec347(0x946)](_0xfec347(0xb5c))),SceneManager['exit']()));if(Imported[_0xfec347(0x9b9)]){if(VisuMZ[_0xfec347(0x50e)][_0xfec347(0x1a8)]<1.15){if(_0xfec347(0xd4b)===_0xfec347(0x9a1))return _0xb22f4e[_0xfec347(0x9c1)][_0xfec347(0xc4b)](/<COMMAND ICON: (\d+)>/i)?_0x422d3d(_0x576144['$1']):_0x3583d3[_0xfec347(0x414)];else alert(_0x22ea2d[_0xfec347(0x946)](_0xfec347(0x58f))),SceneManager[_0xfec347(0x4c5)]();}}},Game_Troop[_0x4fbf70(0x92c)]['processExtendTroopMembers']=function(_0x8fc647){const _0x4992d8=_0x4fbf70;this[_0x4992d8(0x37b)]={};for(const _0x47e0ee of this[_0x4992d8(0x9d7)]()){if(!_0x47e0ee)continue;_0x47e0ee[_0x4992d8(0xa45)]('');}for(const _0x2ba279 of _0x8fc647){const _0x4ed353=$dataTroops[_0x2ba279];if(_0x4ed353)this['addExtendedTroopMembers'](_0x4ed353);}this['makeUniqueNames']();},Game_Troop['prototype'][_0x4fbf70(0x343)]=function(_0x2d353d){const _0x16d0eb=_0x4fbf70;for(const _0x3b6345 of _0x2d353d['members']){if(_0x16d0eb(0x93f)===_0x16d0eb(0x40b))_0x54a399=_0x499ce9['x']+_0x3c1348['faceWidth']+0x8;else{if($dataEnemies[_0x3b6345['enemyId']]){const _0x565064=_0x3b6345[_0x16d0eb(0x3ea)],_0x29ff8e=_0x3b6345['x'],_0x174f3f=_0x3b6345['y'],_0x531991=new Game_Enemy(_0x565064,_0x29ff8e,_0x174f3f);_0x3b6345[_0x16d0eb(0x71a)]&&_0x531991[_0x16d0eb(0x7aa)](),this['_enemies'][_0x16d0eb(0x25b)](_0x531991);}}}},VisuMZ['BattleCore'][_0x4fbf70(0x9c7)]=Game_Map['prototype'][_0x4fbf70(0x7bd)],Game_Map[_0x4fbf70(0x92c)][_0x4fbf70(0x7bd)]=function(){const _0x54396a=_0x4fbf70;VisuMZ[_0x54396a(0xae2)][_0x54396a(0x9c7)][_0x54396a(0xc4a)](this),this[_0x54396a(0x8e0)]();},Game_Map['prototype']['setupBattlebackBattleCore']=function(){const _0x58f540=_0x4fbf70;this[_0x58f540(0x860)]={},this[_0x58f540(0x365)]={};if(!$dataMap)return;const _0x3eb870=$dataMap[_0x58f540(0x9c1)];if(!_0x3eb870)return;const _0x3fc164=_0x3eb870[_0x58f540(0xc4b)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x3fc164)for(const _0x3d3145 of _0x3fc164){_0x3d3145[_0x58f540(0xc4b)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x466abe=Number(RegExp['$1']),_0x1f8222=Number(RegExp['$2']),_0x2164fa=_0x1f8222===0x1?this['_regionBattleback1']:this[_0x58f540(0x365)],_0x2e12aa=String(RegExp['$3']);_0x2164fa[_0x466abe]=_0x2e12aa;}},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x5ea)]=Game_Map[_0x4fbf70(0x92c)]['battleback1Name'],Game_Map[_0x4fbf70(0x92c)]['battleback1Name']=function(){const _0x1f9037=_0x4fbf70;if(!BattleManager['isBattleTest']()){const _0x13d9df=$gamePlayer[_0x1f9037(0xcac)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x1f9037(0x860)]&&this[_0x1f9037(0x860)][_0x13d9df])return this[_0x1f9037(0x860)][_0x13d9df];}return VisuMZ[_0x1f9037(0xae2)][_0x1f9037(0x5ea)][_0x1f9037(0xc4a)](this);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x5ad)]=Game_Map[_0x4fbf70(0x92c)][_0x4fbf70(0x383)],Game_Map[_0x4fbf70(0x92c)][_0x4fbf70(0x383)]=function(){const _0x3f3fda=_0x4fbf70;if(!BattleManager[_0x3f3fda(0x736)]()){if(_0x3f3fda(0x9bf)===_0x3f3fda(0x344))_0x4de31c&&_0x5d2a72['isActor']()&&_0x13eb89[_0x3f3fda(0xd78)](_0x2bef84),this[_0x3f3fda(0x91e)]();else{const _0x4f927e=$gamePlayer[_0x3f3fda(0xcac)]($gamePlayer['x'],$gamePlayer['y']);if(this['_regionBattleback1']&&this['_regionBattleback2'][_0x4f927e])return this[_0x3f3fda(0x365)][_0x4f927e];}}return VisuMZ[_0x3f3fda(0xae2)][_0x3f3fda(0x5ad)][_0x3f3fda(0xc4a)](this);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x962)]=Game_Map[_0x4fbf70(0x92c)][_0x4fbf70(0xbc4)],Game_Map[_0x4fbf70(0x92c)][_0x4fbf70(0xbc4)]=function(){const _0x1fea66=_0x4fbf70;let _0x11a520=JsonEx[_0x1fea66(0xca7)](VisuMZ[_0x1fea66(0xae2)][_0x1fea66(0x962)][_0x1fea66(0xc4a)](this));return VisuMZ[_0x1fea66(0xae2)]['ShuffleArray'](_0x11a520);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x62d)]=function(_0x145dfe){const _0x32078d=_0x4fbf70;var _0x22452c,_0x50d778,_0x155caa;for(_0x155caa=_0x145dfe[_0x32078d(0x9d2)]-0x1;_0x155caa>0x0;_0x155caa--){if(_0x32078d(0x474)===_0x32078d(0x474))_0x22452c=Math['floor'](Math[_0x32078d(0x69a)]()*(_0x155caa+0x1)),_0x50d778=_0x145dfe[_0x155caa],_0x145dfe[_0x155caa]=_0x145dfe[_0x22452c],_0x145dfe[_0x22452c]=_0x50d778;else return![];}return _0x145dfe;},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x412)]=Game_Interpreter['prototype']['command357'],Game_Interpreter[_0x4fbf70(0x92c)]['command357']=function(_0x5a40a7){const _0x3fd678=_0x4fbf70;return $gameTemp[_0x3fd678(0x585)](this),VisuMZ[_0x3fd678(0xae2)]['Game_Interpreter_PluginCommand']['call'](this,_0x5a40a7);},VisuMZ[_0x4fbf70(0xae2)]['Game_Interpreter_updateWaitMode']=Game_Interpreter['prototype'][_0x4fbf70(0xd46)],Game_Interpreter[_0x4fbf70(0x92c)][_0x4fbf70(0xd46)]=function(){const _0x305c7c=_0x4fbf70;if(SceneManager[_0x305c7c(0x90d)]())switch(this['_waitMode']){case _0x305c7c(0x81e):if(Imported[_0x305c7c(0x524)]){if(_0x305c7c(0x485)===_0x305c7c(0xcdd)){const _0x491e92=this['itemLineRect'](_0x265e6a),_0x2af923=this['commandName'](_0x490560),_0x444994=this[_0x305c7c(0x69d)](_0x2af923)[_0x305c7c(0x606)];this[_0x305c7c(0x399)](this[_0x305c7c(0x5e7)](_0x57eb2e));const _0xe2b2e0=this[_0x305c7c(0xcc6)]();if(_0xe2b2e0===_0x305c7c(0x8ea))this['drawTextEx'](_0x2af923,_0x491e92['x']+_0x491e92[_0x305c7c(0x606)]-_0x444994,_0x491e92['y'],_0x444994);else{if(_0xe2b2e0===_0x305c7c(0xc5c)){const _0xd98fa2=_0x491e92['x']+_0x29e80a['floor']((_0x491e92[_0x305c7c(0x606)]-_0x444994)/0x2);this[_0x305c7c(0x64e)](_0x2af923,_0xd98fa2,_0x491e92['y'],_0x444994);}else this[_0x305c7c(0x64e)](_0x2af923,_0x491e92['x'],_0x491e92['y'],_0x444994);}}else{if($gameScreen[_0x305c7c(0xad8)]()['angleDuration']>0x0)return!![];this[_0x305c7c(0xd5c)]='';}}break;case _0x305c7c(0x505):if(BattleManager[_0x305c7c(0x7cf)][_0x305c7c(0x58d)]())return!![];this[_0x305c7c(0xd5c)]='';break;case _0x305c7c(0x716):if(Imported[_0x305c7c(0x524)]){if('MMPFm'===_0x305c7c(0x56d)){if($gameScreen['battleCameraData']()['cameraDuration']>0x0)return!![];if($gameScreen[_0x305c7c(0xad8)]()[_0x305c7c(0x46e)]>0x0)return!![];this[_0x305c7c(0xd5c)]='';}else{const _0x252122=_0x2acb52[_0x305c7c(0x946)](_0x3debba[_0x305c7c(0x27a)](),_0x382a1a[_0x305c7c(0x722)](_0x23b822));this[_0x305c7c(0x25b)](_0x305c7c(0x941)),this[_0x305c7c(0x25b)]('pushBaseLine'),this['push'](_0x305c7c(0xb70),_0x252122),this['push'](_0x305c7c(0x438));}}break;case _0x305c7c(0xc32):if(BattleManager[_0x305c7c(0x7cf)][_0x305c7c(0xa89)]())return!![];this[_0x305c7c(0xd5c)]='';break;case _0x305c7c(0x965):if(BattleManager[_0x305c7c(0x7cf)][_0x305c7c(0x4c1)]())return!![];this[_0x305c7c(0xd5c)]='';break;case _0x305c7c(0x49a):if(BattleManager[_0x305c7c(0x7cf)][_0x305c7c(0x890)]())return!![];this[_0x305c7c(0xd5c)]='';break;case _0x305c7c(0x60b):if(BattleManager[_0x305c7c(0x2e0)][_0x305c7c(0x362)]())return!![];this[_0x305c7c(0xd5c)]='';break;case'battleMove':if(BattleManager[_0x305c7c(0x7cf)][_0x305c7c(0x5bd)]())return!![];this[_0x305c7c(0xd5c)]='';break;case'battleOpacity':if(BattleManager['_spriteset'][_0x305c7c(0x9d1)]())return!![];this[_0x305c7c(0xd5c)]='';break;case _0x305c7c(0x29c):if(BattleManager['_spriteset']['isAnyoneGrowing']())return!![];this['_waitMode']='';break;case _0x305c7c(0x19e):if(BattleManager[_0x305c7c(0x7cf)][_0x305c7c(0xcd5)]())return!![];this['_waitMode']='';break;case _0x305c7c(0xcff):if(Imported[_0x305c7c(0x632)]){if(_0x305c7c(0x3f4)!==_0x305c7c(0x3f4))this[_0x305c7c(0x373)]=!![];else{if(BattleManager[_0x305c7c(0x7cf)][_0x305c7c(0x7a8)]())return!![];this['_waitMode']='';}}break;case _0x305c7c(0x29f):if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen[_0x305c7c(0xad8)]()['skewDuration']>0x0)return!![];this[_0x305c7c(0xd5c)]='';}break;case _0x305c7c(0x89f):if(BattleManager['_spriteset'][_0x305c7c(0x6ec)]())return!![];this[_0x305c7c(0xd5c)]='';break;case _0x305c7c(0x8c6):if(Imported[_0x305c7c(0x524)]){if($gameScreen['battleCameraData']()[_0x305c7c(0xa65)]>0x0)return!![];this['_waitMode']='';}break;case _0x305c7c(0x63a):if(Imported[_0x305c7c(0xa83)]){if(_0x305c7c(0xbba)!==_0x305c7c(0xbba))this[_0x305c7c(0xcd7)]=new _0x3b29ee(_0x5a109d),this['attachSpritesToDistortionSprite']();else{if(BattleManager[_0x305c7c(0x7cf)]['isAnyoneInjectAniPrepping']){if(BattleManager[_0x305c7c(0x7cf)][_0x305c7c(0x2e1)]())return!![];this['_waitMode']=_0x305c7c(0x697);}else this[_0x305c7c(0xd5c)]='';break;}}break;case'battleInjectAni':if(Imported[_0x305c7c(0xa83)]){if(BattleManager['_spriteset'][_0x305c7c(0xb39)]())return!![];this[_0x305c7c(0xd5c)]='';}break;}return VisuMZ['BattleCore'][_0x305c7c(0x1b6)][_0x305c7c(0xc4a)](this);},VisuMZ[_0x4fbf70(0xae2)]['Game_Interpreter_command301']=Game_Interpreter[_0x4fbf70(0x92c)][_0x4fbf70(0x2ea)],Game_Interpreter['prototype']['command301']=function(_0x3a8d7e){const _0x1f4188=_0x4fbf70;return!$gameParty['inBattle']()?this['command301_PreBattleEvent'](_0x3a8d7e):VisuMZ[_0x1f4188(0xae2)][_0x1f4188(0x6f1)][_0x1f4188(0xc4a)](this,_0x3a8d7e);},Game_Interpreter[_0x4fbf70(0x92c)][_0x4fbf70(0xb4e)]=function(_0xb38287){const _0x5a0807=_0x4fbf70;return VisuMZ[_0x5a0807(0xae2)][_0x5a0807(0x6f1)][_0x5a0807(0xc4a)](this,_0xb38287),BattleManager['setEventCallback'](_0xae0025=>{const _0x54144f=_0x5a0807;this[_0x54144f(0xc77)][this[_0x54144f(0x966)]]=_0xae0025;}),!![];},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x95e)]=function(_0x186ae5){const _0x1390a5=$dataCommonEvents[_0x186ae5];if(!_0x1390a5)return![];if(_0x1390a5['list']['length']<=0x1)return![];return!![];},Game_Interpreter[_0x4fbf70(0x92c)][_0x4fbf70(0x30d)]=function(_0x3927d7){const _0x4d89e5=_0x4fbf70,_0x2d157b=VisuMZ[_0x4d89e5(0xae2)][_0x4d89e5(0x837)][_0x4d89e5(0x73d)],_0x76a647=_0x2d157b[_0x4d89e5(0xa5c)],_0x479c53=$dataCommonEvents[_0x76a647];if(_0x479c53&&VisuMZ[_0x4d89e5(0xae2)][_0x4d89e5(0x95e)](_0x76a647)){const _0x1de640=this[_0x4d89e5(0x478)]()?this[_0x4d89e5(0x87b)]:0x0,_0x41d0d4=_0x479c53['list'];this[_0x4d89e5(0xcd6)](_0x41d0d4,_0x1de640),this[_0x4d89e5(0x2da)]=JsonEx[_0x4d89e5(0xca7)](this[_0x4d89e5(0x2da)]);const _0x20a284={'code':0xbc3,'indent':this['_indent'],'parameters':JsonEx['makeDeepCopy'](_0x3927d7)};return this[_0x4d89e5(0x2da)][_0x4d89e5(0x4ad)](this[_0x4d89e5(0x252)]+0x1,0x0,_0x20a284),!![];}else return VisuMZ[_0x4d89e5(0xae2)]['Game_Interpreter_command301'][_0x4d89e5(0xc4a)](this,_0x3927d7);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x91d)]=BattleManager[_0x4fbf70(0xbb1)],BattleManager[_0x4fbf70(0xbb1)]=function(){const _0x26e1ba=_0x4fbf70;VisuMZ['BattleCore'][_0x26e1ba(0x91d)][_0x26e1ba(0xc4a)](this),this[_0x26e1ba(0x76f)]();},BattleManager['onEncounterBattleCore']=function(){const _0x48c0e6=_0x4fbf70,_0x51d6c1=VisuMZ[_0x48c0e6(0xae2)][_0x48c0e6(0x837)][_0x48c0e6(0x73d)],_0x3e8360=_0x51d6c1[_0x48c0e6(0xa5c)];_0x3e8360&&VisuMZ[_0x48c0e6(0xae2)][_0x48c0e6(0x95e)](_0x3e8360)&&(this[_0x48c0e6(0x2d4)]=!![],$gameTemp['reserveCommonEvent'](_0x51d6c1[_0x48c0e6(0xa5c)]),$gameMap['updateInterpreter'](),$gameMap[_0x48c0e6(0x561)][_0x48c0e6(0xae5)]=!![]);if(_0x51d6c1[_0x48c0e6(0x3de)]>0x0){if(_0x48c0e6(0x84a)!==_0x48c0e6(0x84a)){_0x567549=_0x2f515d[_0x48c0e6(0xae2)]['JS'][_0x416c54][_0x48c0e6(0xc4a)](this,this['subject'](),_0xcf734b,_0x1edefa,_0xa18d5e);if(_0x7e92e5)_0x37e0ba=_0x1ad6e3;}else this['_canLose']=!![];}},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x63f)]=Scene_Map[_0x4fbf70(0x92c)][_0x4fbf70(0x706)],Scene_Map['prototype'][_0x4fbf70(0x706)]=function(){const _0x5b3fc4=_0x4fbf70;if(BattleManager[_0x5b3fc4(0x2d4)])return;VisuMZ[_0x5b3fc4(0xae2)]['Scene_Map_updateCallMenu'][_0x5b3fc4(0xc4a)](this);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x7fc)]=Scene_Map[_0x4fbf70(0x92c)][_0x4fbf70(0x247)],Scene_Map[_0x4fbf70(0x92c)][_0x4fbf70(0x247)]=function(){const _0x1aa01e=_0x4fbf70;if(BattleManager['_battleCoreBattleStartEvent']){if('lZirI'===_0x1aa01e(0x6e4))this['battleCorePreBattleCommonEvent']();else{this['_borderPortraitSprite']=new _0x30e4b9();const _0x1cf080=_0x1e0fd1['_scene'],_0x4bbaca=_0x1cf080['children'][_0x1aa01e(0xd48)](_0x1cf080['_windowLayer']);_0x1cf080[_0x1aa01e(0x93a)](this[_0x1aa01e(0x46d)],_0x4bbaca),this['_borderPortraitSprite'][_0x1aa01e(0x951)]['x']=0.5,this['_borderPortraitSprite']['anchor']['y']=0x1;const _0x473e50=_0x5ba201[_0x1aa01e(0xae2)][_0x1aa01e(0x837)][_0x1aa01e(0x41c)]['PortraitScaleBorderStyle'];this['_borderPortraitSprite']['scale']['x']=_0x473e50,this[_0x1aa01e(0x46d)][_0x1aa01e(0xbfa)]['y']=_0x473e50,this[_0x1aa01e(0x46d)]['y']=this['y']+this[_0x1aa01e(0x389)],this[_0x1aa01e(0xc64)]=0x0;}}else{if(_0x1aa01e(0x888)!=='WQcmG'){const _0x9f8cd1=_0x1105d4[_0x1aa01e(0xae2)]['Settings'][_0x1aa01e(0x410)];this['_shakeFlinchDuration']=_0x3736f4[_0x1aa01e(0x745)]((_0x9f8cd1[_0x1aa01e(0x55b)]??0x18)*_0x48d959),this[_0x1aa01e(0xb3e)]=_0x5bf587['max'](this[_0x1aa01e(0xb3e)],_0x3f668d);}else VisuMZ[_0x1aa01e(0xae2)]['Scene_Map_launchBattle'][_0x1aa01e(0xc4a)](this);}},Scene_Map[_0x4fbf70(0x92c)]['battleCorePreBattleCommonEvent']=function(){this['_active']=!![];},VisuMZ[_0x4fbf70(0xae2)]['SceneManager_isSceneChanging']=SceneManager[_0x4fbf70(0xd07)],SceneManager[_0x4fbf70(0xd07)]=function(){const _0x15ab3e=_0x4fbf70;if(BattleManager[_0x15ab3e(0x2d4)])return![];return VisuMZ['BattleCore'][_0x15ab3e(0x7e3)]['call'](this);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x756)]=Game_Interpreter['prototype']['terminate'],Game_Interpreter[_0x4fbf70(0x92c)][_0x4fbf70(0x36a)]=function(){const _0x3425f9=_0x4fbf70;VisuMZ['BattleCore'][_0x3425f9(0x756)][_0x3425f9(0xc4a)](this);if(this[_0x3425f9(0xae5)]){if(_0x3425f9(0x22b)!==_0x3425f9(0x884))this['_preBattleCommonEvent']=undefined,SceneManager[_0x3425f9(0x32c)][_0x3425f9(0x591)]();else{const _0x5262f0=this[_0x3425f9(0xc08)](),_0x27fbc0=_0x2d1d02[_0x3425f9(0xae2)][_0x3425f9(0x837)]['ActorCmd']['CmdIconItem'],_0xd5bae9=_0x5262f0===_0x3425f9(0xb73)?_0x14aa11['item']:_0x3425f9(0x769)[_0x3425f9(0x946)](_0x27fbc0,_0xe6d302['item']),_0x1b9597=this[_0x3425f9(0xa6b)]();this[_0x3425f9(0xc42)](_0xd5bae9,'item',_0x1b9597);}}},Scene_Map[_0x4fbf70(0x92c)][_0x4fbf70(0x591)]=function(){const _0x2f5a8b=_0x4fbf70;BattleManager[_0x2f5a8b(0x2d4)]=undefined,BattleManager['_battleCoreBattleResumeAfter']=!![],this['stop']();},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xc30)]=Scene_Map[_0x4fbf70(0x92c)][_0x4fbf70(0x691)],Scene_Map[_0x4fbf70(0x92c)][_0x4fbf70(0x691)]=function(){const _0x23f58c=_0x4fbf70;VisuMZ['BattleCore'][_0x23f58c(0xc30)]['call'](this),BattleManager[_0x23f58c(0x8d3)]&&(this[_0x23f58c(0x948)]=!![],BattleManager[_0x23f58c(0x8d3)]=undefined);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x238)]=Scene_Map[_0x4fbf70(0x92c)][_0x4fbf70(0x691)],Scene_Map[_0x4fbf70(0x92c)][_0x4fbf70(0x691)]=function(){const _0xedc072=_0x4fbf70;VisuMZ[_0xedc072(0xae2)][_0xedc072(0x238)][_0xedc072(0xc4a)](this),$gameTemp[_0xedc072(0x484)]();},VisuMZ[_0x4fbf70(0xae2)]['Scene_ItemBase_applyItem']=Scene_ItemBase['prototype'][_0x4fbf70(0xa53)],Scene_ItemBase[_0x4fbf70(0x92c)][_0x4fbf70(0xa53)]=function(){const _0x5d58bb=_0x4fbf70;VisuMZ[_0x5d58bb(0xae2)]['Scene_ItemBase_applyItem'][_0x5d58bb(0xc4a)](this);if(this[_0x5d58bb(0x98d)]()[_0x5d58bb(0x9c1)][_0x5d58bb(0xc4b)](/<BYPASS AUTO ACTION SEQUENCE>/i)){if('vcMdF'!==_0x5d58bb(0x2f1))return;else this[_0x5d58bb(0x7e4)]();}this[_0x5d58bb(0x98d)]()[_0x5d58bb(0x9c1)]['match'](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp[_0x5d58bb(0x351)]=[]),DataManager[_0x5d58bb(0x22e)](this[_0x5d58bb(0x98d)]())&&($gameTemp[_0x5d58bb(0x351)]=[]);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xa56)]=Scene_Options['prototype'][_0x4fbf70(0x496)],Scene_Options[_0x4fbf70(0x92c)][_0x4fbf70(0x496)]=function(){const _0x13f079=_0x4fbf70;let _0x1a8d64=VisuMZ['BattleCore'][_0x13f079(0xa56)][_0x13f079(0xc4a)](this);const _0x586284=VisuMZ[_0x13f079(0xae2)][_0x13f079(0x837)];if(_0x586284['AutoBattle'][_0x13f079(0x798)]&&_0x586284[_0x13f079(0x5f2)]['AdjustRect'])_0x1a8d64+=0x2;if(_0x586284[_0x13f079(0x2c8)][_0x13f079(0x798)]&&_0x586284[_0x13f079(0x2c8)][_0x13f079(0xc7e)])_0x1a8d64+=0x1;return _0x1a8d64;},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x1f2)]=Scene_Battle['prototype'][_0x4fbf70(0x691)],Scene_Battle['prototype']['initialize']=function(){const _0x2f9130=_0x4fbf70;VisuMZ[_0x2f9130(0xae2)][_0x2f9130(0x1f2)][_0x2f9130(0xc4a)](this),this[_0x2f9130(0xd69)]();},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xa6a)]=Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x4ac)],Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x4ac)]=function(){const _0x17a720=_0x4fbf70;SceneManager['isPreviousSceneBattleTransitionable']()?(Scene_Message[_0x17a720(0x92c)][_0x17a720(0x4ac)][_0x17a720(0xc4a)](this),this[_0x17a720(0x7cf)]&&this['_spriteset'][_0x17a720(0x7b2)](),BattleManager[_0x17a720(0xa8a)]&&BattleManager[_0x17a720(0xca8)]()):(VisuMZ[_0x17a720(0xae2)][_0x17a720(0xa6a)]['call'](this),$gameTroop[_0x17a720(0x817)]());},VisuMZ['BattleCore'][_0x4fbf70(0x956)]=Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0xa84)],Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0xa84)]=function(){const _0x18c5ba=_0x4fbf70;if(SceneManager['isNextSceneBattleTransitionable']()){if(_0x18c5ba(0x3ce)!==_0x18c5ba(0x9e5))Scene_Message['prototype'][_0x18c5ba(0xa84)]['call'](this);else{let _0x5d6fd4=_0x34e332[_0x18c5ba(0xca7)](_0x5a8d7e[_0x18c5ba(0xae2)][_0x18c5ba(0x962)][_0x18c5ba(0xc4a)](this));return _0x49aa16['BattleCore'][_0x18c5ba(0x62d)](_0x5d6fd4);}}else _0x18c5ba(0x9d9)!==_0x18c5ba(0x9d9)?_0x5868ab[_0x18c5ba(0x25b)](new _0x20ef36(_0x576746)):VisuMZ[_0x18c5ba(0xae2)][_0x18c5ba(0x956)][_0x18c5ba(0xc4a)](this);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x5f9)]=Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x36a)],Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x36a)]=function(){const _0x41fc75=_0x4fbf70;SceneManager[_0x41fc75(0x44c)]()?Scene_Message[_0x41fc75(0x92c)][_0x41fc75(0x36a)][_0x41fc75(0xc4a)](this):VisuMZ['BattleCore']['Scene_Battle_terminate']['call'](this),this[_0x41fc75(0xd69)]();},Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0xbea)]=function(){const _0x36a02d=_0x4fbf70;if(ConfigManager[_0x36a02d(0x5bc)]&&ConfigManager[_0x36a02d(0x444)]!==undefined)return ConfigManager[_0x36a02d(0x444)];else{if(this[_0x36a02d(0x3c7)]()===_0x36a02d(0x972))return _0x36a02d(0xc1b)!==_0x36a02d(0xc1b)?![]:![];else{return Scene_Message[_0x36a02d(0x92c)][_0x36a02d(0xbea)]['call'](this);;}}},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x3be)]=Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x525)],Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x525)]=function(){const _0x3d7c23=_0x4fbf70;this[_0x3d7c23(0x797)](),VisuMZ['BattleCore'][_0x3d7c23(0x3be)][_0x3d7c23(0xc4a)](this),this[_0x3d7c23(0x4e1)]();},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x784)]=Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x603)],Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x603)]=function(){const _0x1c23fc=_0x4fbf70;VisuMZ[_0x1c23fc(0xae2)][_0x1c23fc(0x784)]['call'](this),this['createMultiTargetWindows']();},Scene_Battle['prototype'][_0x4fbf70(0x1cc)]=function(){const _0x349842=_0x4fbf70;this['createMultiTargetWindow'](!![]),this[_0x349842(0x235)](![]);},Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0xa8d)]=function(_0x1b217f){const _0x31edb3=_0x4fbf70,_0x117ccd=Window_BattleMultiTarget[_0x31edb3(0xd7c)],_0x3a0513=this[_0x31edb3(0x605)](0x1,!![]);let _0x4aaefc=_0x1b217f?Graphics['boxWidth']-_0x117ccd:0x0;_0x4aaefc+=_0x1b217f?Window_BattleMultiTarget[_0x31edb3(0x5ab)]:Window_BattleMultiTarget['ENEMY_OFFSET_X'];const _0x393ba3=['frontview_ui'][_0x31edb3(0x6e3)](this[_0x31edb3(0x3c7)]())?0x0:this[_0x31edb3(0x9e4)]['height'];let _0x42f1fd=Graphics[_0x31edb3(0xa30)]-_0x393ba3-_0x3a0513;return _0x42f1fd+=_0x1b217f?Window_BattleMultiTarget['ACTOR_OFFSET_Y']:Window_BattleMultiTarget[_0x31edb3(0x86b)],new Rectangle(_0x4aaefc,_0x42f1fd,_0x117ccd,_0x3a0513);},Scene_Battle['prototype'][_0x4fbf70(0x235)]=function(_0x1f7874){const _0x4db4b8=_0x4fbf70,_0x3ecdca=this[_0x4db4b8(0xa8d)](_0x1f7874),_0x5d633b=new Window_BattleMultiTarget(_0x3ecdca,_0x1f7874);this[_0x4db4b8(0x700)](_0x5d633b);if(_0x1f7874)this['_actorMultiTargetWindow']=_0x5d633b;else{if('CWMaF'===_0x4db4b8(0xbf4)){if(this[_0x4db4b8(0x631)]===_0x3310e4)return;_0x12b586[_0x4db4b8(0x92c)][_0x4db4b8(0x7aa)]['call'](this);}else this[_0x4db4b8(0x66d)]=_0x5d633b;}},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x37e)]=Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x5fe)],Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x5fe)]=function(){const _0x3efac6=_0x4fbf70;VisuMZ[_0x3efac6(0xae2)][_0x3efac6(0x37e)]['call'](this),this[_0x3efac6(0x3c7)]()==='border'&&this[_0x3efac6(0x401)]();},Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x7b7)]=function(_0x23d16c){const _0x264f5a=_0x4fbf70;if(_0x23d16c)this['_windowLayer']['x']=(Graphics['width']-Graphics[_0x264f5a(0x2d5)])/0x2,this[_0x264f5a(0x676)]['y']=(Graphics['height']-Graphics[_0x264f5a(0xa30)])/0x2;else{if(_0x264f5a(0x7d9)!==_0x264f5a(0x7d9))return _0x1553b3['BattleCore']['Settings'][_0x264f5a(0x202)][_0x264f5a(0xb02)];else this['_windowLayer']['x']=Graphics[_0x264f5a(0x606)]*0xa,this[_0x264f5a(0x676)]['y']=Graphics[_0x264f5a(0x389)]*0xa;}},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x8a0)]=Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0xbb2)],Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0xbb2)]=function(){const _0x2b8116=_0x4fbf70,_0x4037d2=BattleManager[_0x2b8116(0x55a)]();VisuMZ[_0x2b8116(0xae2)][_0x2b8116(0x8a0)]['call'](this);if(_0x4037d2){if(_0x2b8116(0x565)!==_0x2b8116(0x565)){if(this[_0x2b8116(0x8a2)]())return![];if(this['isAlive']()&&this['isAppeared']())return!![];if(this[_0x2b8116(0x923)]()&&this[_0x2b8116(0x42f)]()){if(this[_0x2b8116(0x521)]()&&this[_0x2b8116(0x7af)]())return![];}else{if(this[_0x2b8116(0x521)]())return![];}return!![];}else{if(_0x4037d2===BattleManager[_0x2b8116(0x55a)]())return;if(_0x4037d2===BattleManager[_0x2b8116(0xb38)])return;if(_0x4037d2[_0x2b8116(0xb81)]())_0x4037d2[_0x2b8116(0xb81)]()[_0x2b8116(0x551)]();}}},VisuMZ['BattleCore'][_0x4fbf70(0xa58)]=Scene_Battle['prototype'][_0x4fbf70(0x380)],Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x380)]=function(){const _0x7e4557=_0x4fbf70,_0x359adc=BattleManager[_0x7e4557(0x55a)]();if(_0x359adc&&_0x359adc[_0x7e4557(0xb81)])_0x359adc[_0x7e4557(0xb81)]()[_0x7e4557(0x551)]();VisuMZ['BattleCore'][_0x7e4557(0xa58)][_0x7e4557(0xc4a)](this);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x960)]=Scene_Battle[_0x4fbf70(0x92c)]['logWindowRect'],Scene_Battle[_0x4fbf70(0x92c)]['logWindowRect']=function(){const _0x2fe443=_0x4fbf70;if(VisuMZ[_0x2fe443(0xae2)][_0x2fe443(0x837)]['BattleLog']['BattleLogRectJS']){if('rhUmi'===_0x2fe443(0xa94))return VisuMZ[_0x2fe443(0xae2)]['Settings'][_0x2fe443(0x202)][_0x2fe443(0x3dc)][_0x2fe443(0xc4a)](this);else _0x4f99d0['BattleCore'][_0x2fe443(0x831)]&&_0x52f955[_0x2fe443(0xae2)][_0x2fe443(0x831)][_0x2fe443(0xc4a)](this,_0x48e5f7),_0x2d2cb4[_0x2fe443(0xae2)][_0x2fe443(0x56a)](_0x3ea065),_0x306985['BattleCore'][_0x2fe443(0x684)](_0x5ad504);}return VisuMZ[_0x2fe443(0xae2)][_0x2fe443(0x960)]['call'](this);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x8b5)]=Scene_Battle[_0x4fbf70(0x92c)]['createPartyCommandWindow'],Scene_Battle['prototype']['createPartyCommandWindow']=function(){const _0xe21fc5=_0x4fbf70;VisuMZ[_0xe21fc5(0xae2)][_0xe21fc5(0x8b5)][_0xe21fc5(0xc4a)](this),this[_0xe21fc5(0x44f)]();},Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x44f)]=function(){const _0x32da60=_0x4fbf70,_0x31b635=this['_partyCommandWindow'];_0x31b635[_0x32da60(0x4c8)](_0x32da60(0x850),this[_0x32da60(0x1c1)][_0x32da60(0x8ff)](this)),_0x31b635[_0x32da60(0x4c8)]('options',this[_0x32da60(0xbef)][_0x32da60(0x8ff)](this));const _0x32f214=this[_0x32da60(0x3c7)]();switch(_0x32f214){case'xp':case'portrait':return this[_0x32da60(0xa06)][_0x32da60(0x2fb)](0x1);break;}},Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x1c1)]=function(){const _0x1c806b=_0x4fbf70;BattleManager[_0x1c806b(0x2ce)]=!![],$gameParty['makeActions'](),this[_0x1c806b(0xbb2)]();if(BattleManager['isTpb']()){if(_0x1c806b(0x625)===_0x1c806b(0x625))BattleManager[_0x1c806b(0x6eb)]=![];else{if(_0x25e698[_0x1c806b(0x7cf)]['isAnyProjectilePresent']())return!![];this[_0x1c806b(0xd5c)]='';}}},Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0xbef)]=function(){const _0x314cfd=_0x4fbf70;this[_0x314cfd(0x87a)]()?(this[_0x314cfd(0x757)]=!![],this[_0x314cfd(0x2e0)][_0x314cfd(0x25b)](_0x314cfd(0xb70),VisuMZ[_0x314cfd(0xae2)][_0x314cfd(0x837)][_0x314cfd(0xbd7)][_0x314cfd(0x34b)])):this['callOptions']();},Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x87a)]=function(){const _0x21c7ae=_0x4fbf70;return BattleManager[_0x21c7ae(0xa52)]();},Scene_Battle['prototype'][_0x4fbf70(0x312)]=function(){const _0x59f5b5=_0x4fbf70;this[_0x59f5b5(0x757)]=![],this[_0x59f5b5(0x7cf)][_0x59f5b5(0x7b2)](),this['_windowLayer'][_0x59f5b5(0x737)]=![];if(BattleManager[_0x59f5b5(0x736)]()){if(_0x59f5b5(0xd3d)==='maDHy'){if(!_0x280936[_0x59f5b5(0x90d)]())return;_0x27a2d0[_0x59f5b5(0x32c)][_0x59f5b5(0x53c)](this),_0x347dad['prototype'][_0x59f5b5(0x36a)][_0x59f5b5(0xc4a)](this);}else($dataSystem[_0x59f5b5(0x515)]||$dataSystem['battleback2Name'])&&SceneManager[_0x59f5b5(0x901)]();}else($gameMap[_0x59f5b5(0x515)]()||$gameMap[_0x59f5b5(0x383)]())&&SceneManager['snapForBackground']();SceneManager['push'](Scene_Options),BattleManager[_0x59f5b5(0x814)]()&&(_0x59f5b5(0x41a)==='AYufz'?_0x35724c=_0x5a857a:BattleManager[_0x59f5b5(0xa8a)]=BattleManager['actor']());},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xb32)]=Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0xc85)],Scene_Battle['prototype']['updateBattleProcess']=function(){const _0x5382a0=_0x4fbf70;VisuMZ[_0x5382a0(0xae2)][_0x5382a0(0xb32)][_0x5382a0(0xc4a)](this);if(this[_0x5382a0(0x757)]&&!BattleManager[_0x5382a0(0xb38)])this[_0x5382a0(0x312)]();},VisuMZ['BattleCore']['Scene_Battle_update']=Scene_Battle['prototype'][_0x4fbf70(0x7b2)],Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x7b2)]=function(){const _0x5b0893=_0x4fbf70;VisuMZ[_0x5b0893(0xae2)][_0x5b0893(0x538)]['call'](this),this['updateOnceParallelInterpreters']();},Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x4e1)]=function(){const _0x5dbe76=_0x4fbf70,_0x3910cc=this['autoBattleWindowRect']();this['_autoBattleWindow']=new Window_AutoBattleCancel(_0x3910cc),this[_0x5dbe76(0x634)][_0x5dbe76(0x7aa)](),this[_0x5dbe76(0x52a)](this[_0x5dbe76(0x634)]);},Scene_Battle[_0x4fbf70(0x92c)]['autoBattleWindowRect']=function(){const _0x2b12bb=_0x4fbf70;return VisuMZ[_0x2b12bb(0xae2)]['Settings'][_0x2b12bb(0x5f2)][_0x2b12bb(0xc65)][_0x2b12bb(0xc4a)](this);},Scene_Battle['prototype'][_0x4fbf70(0xd69)]=function(){const _0x130dba=_0x4fbf70;this[_0x130dba(0x364)]=[];},Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x1c8)]=function(){const _0x479684=_0x4fbf70;if(!this[_0x479684(0x364)])return;for(const _0x1d3df4 of this['_onceParallelInterpreters']){'mEcAk'===_0x479684(0x2a5)?_0x1d3df4&&_0x1d3df4[_0x479684(0x7b2)]():this['addEscapeCommand']();}},Scene_Battle['prototype'][_0x4fbf70(0x5f5)]=function(_0x3d284d){const _0x2328e0=_0x4fbf70,_0x391a09=$dataCommonEvents[_0x3d284d];if(!_0x391a09)return;const _0x33fa57=new Game_BattleOnceParallelInterpreter();this[_0x2328e0(0xb42)](_0x33fa57),_0x33fa57[_0x2328e0(0x609)](_0x3d284d);},Scene_Battle[_0x4fbf70(0x92c)]['addOnceParallelInterpreter']=function(_0x43839d){const _0x1f6e40=_0x4fbf70;this[_0x1f6e40(0x364)]=this[_0x1f6e40(0x364)]||[],this[_0x1f6e40(0x364)][_0x1f6e40(0x25b)](_0x43839d);},Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x53c)]=function(_0x5ed37e){const _0x453b45=_0x4fbf70;this['_onceParallelInterpreters']=this[_0x453b45(0x364)]||[],this[_0x453b45(0x364)]['remove'](_0x5ed37e);},Game_Troop[_0x4fbf70(0x92c)][_0x4fbf70(0x817)]=function(){const _0x577168=_0x4fbf70;for(const _0x101bde of this[_0x577168(0x675)]()['pages']){if(!this[_0x577168(0x944)](_0x101bde))continue;SceneManager[_0x577168(0x32c)][_0x577168(0xa64)](_0x101bde);}},Game_Troop['prototype'][_0x4fbf70(0x944)]=function(_0x59e33c){const _0x22675c=_0x4fbf70;if(!_0x59e33c)return;for(const _0x6080c1 of _0x59e33c['list']){if([0x6c,0x198][_0x22675c(0x6e3)](_0x6080c1['code'])){if(_0x22675c(0xb3a)!==_0x22675c(0x98a)){const _0xc65f47=_0x6080c1[_0x22675c(0x5ec)][0x0];if(_0xc65f47[_0x22675c(0xc4b)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}else this[_0x22675c(0xd5c)]='';}}return![];},Scene_Battle[_0x4fbf70(0x92c)]['playOnceParallelTroopPage']=function(_0xc7e9a3){const _0x48fe96=_0x4fbf70;if(!_0xc7e9a3)return;const _0x32cf96=new Game_BattleOnceParallelInterpreter();this[_0x48fe96(0xb42)](_0x32cf96),_0x32cf96[_0x48fe96(0x2af)](_0xc7e9a3);};function Game_BattleOnceParallelInterpreter(){const _0x593f3a=_0x4fbf70;this[_0x593f3a(0x691)](...arguments);}function _0x1e75(){const _0x4b83e4=['isActor','makeEscapeRatio','displayAffectedStatus','filterArea','GESOm','setBlendColor','makeTargetsBattleCore','hCPmn','makeDeepCopy','revertTpbCachedActor','RegExp','setBattleSkew','ShowFacesListStyle','regionId','hOKhX','%1Apply%2JS','VisuMZ_0_CoreEngine','startOpacity','createContents','ACTOR_OFFSET_Y','Scene_Battle_onActorCancel','rBemA','formula','battlerSmoothImage','xupXQ','_tpbState','startAttackWeaponAnimation','waitForMovement','createDistortionSprite','addChildToBack','ActSeq_Inject_AnimationStart','criticalHitFlat','needsSelection','open','updateShadowScale','SvWeaponMass-%1-%2','#%1','hasStaticSvBattler','Window_BattleActor_hide','itemTextAlign','_effectType','symbol','updateFrame','Text','UPDeV','alive\x20actors\x20not\x20target','RXkGm','isAtbCastingState','shadow','mainFontSize','jsScaleDown','NUIRw','isSubjectValidForAnyoneSelect','oXEHN','isAnyoneSkewing','setupChild','_svBattlerSprite','isAutoBattleCommandAdded','onSkewEnd','trim','walk','vrepC','yKDHc','bossCollapse','DefaultSoftScaler','onDatabaseLoaded','GetActionSequenceSpecialTargetWithFlags','BattleManager_onEscapeSuccess','removeStatesAuto','startShakeFlinch','performActionEndMembers','isDebuffAffected','_angleDuration','_tempEquipCheck','dXYRD','MotionIdle','startInput','StepDistanceX','startBattle','clearHorrorEffects','kRdAq','itemEffectRecoverMp','KExgM','commandStyleCheck','_ptbActionCost','VisuMZ_1_ElementStatusCore','ScaleUp','swapEnemyIDs','wqzUs','VisuMZ_3_BattleAI','flipVisualCutinVert','_lastRegenFrameCount','ElementStatusCore','displayTpDamage','HP_Flat','extendTroopMembers','battleProjectiles','performTpbActiveCheckSwitch','ParseItemNotetags','addAnimationSpriteToContainer','YRleB','LdLgG','prepareBorderActor','WKEaV','isSceneChanging','CQmJb','showNormalAnimation','ShowPopup','GZKfO','getBattlerKeyTargetReplacement','refreshStatusWindow','alterPriority','PopupOffsetX','BreakShields','ATBTc','createString','ActSeq_Mechanics_CustomDmgFormula','setupZoomBlurImpactFilter','Window_PartyCommand_initialize','690388qicwOO','EJXYU','dead','animationBaseDelay','attackStatesRate','skillItemWindowRectMiddle','maxBattleMembers','_homeY','position','updateBattlebackBitmap2','disperseDamage','_targetHomeX','Sprite_Battler_setHome','WaitForNewLine','battleSys','updatePosition','destroy','createKeyJS','AniDuration','GLgsh','_battlerKeyCache','PreApplyJS','updateSelectionEffect','lszJo','meetsSelectFrontviewActorConditions','PreDamageAsTargetJS','Oyqnk','Window_BattleLog_displayCurrentState','turnCount','Defeat','yKLWh','Sprite_Battleback_adjustPosition','ZclMa','TMuqu','alive\x20actors','yJxce','visualHpGauge','ActionEffect','Sprite_Enemy_setHue','kuiBU','activate','message4','smoothness','ActSeq_Element_Clear','setBattleCameraTargets','isCTB','performShakeFlinch','iterateBattler','updateWaitMode','ActSeq_Movement_Skew','indexOf','_actorCommandWindow','TpbGaugeOffsetX','tBqCs','moveBattlerDistance','EaXzi','ActSeq_Projectile_Animation','hpDamage','_weather','aatoF','stypeId','createBorderStylePortraitSprite','updateOpacity','performJump','tSBfV','STRUCT','addMeleeReturnActionSet','LaPLO','attackAnimationIdSlot','hue','_waitMode','cLcfY','addDebuff','isGrowing','FaceDirection','isForFriendBattleCore','processBorderActor','FUNC','_battleField','processVictory','createActionSequenceProjectile','battleCoreTpbMainPhase','showEnemyAttackAnimation','clearOnceParallelInterpreters','addCombatLogCommand','_baseX','Game_Action_itemTargetCandidates','helpWindowRect','isBreakStunned','addImmortal','isConfused','Shadow','base','useItem','resetTextColor','_buttonKey','Buffs','tLDPY','setActiveWeaponSlot','isFriendly','ParseActorNotetags','removeBuff','WIDTH','mRjXb','battlerSprites','slMJC','displayChangedBuffs','pauseInjectAnimation','rqoWv','BTB','KjrYF','currentSymbol','ShowActorGauge','HelpOptions','Enable','waitForJump','xETZm','_enemyNameContainer','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','lineRect','_enemyIDs','Game_Action_testApply','FlinchDistanceX','tnarB','setupCriticalEffect','battleSpriteSkew','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','BattleCmdList','JPUWO','ActSeq_Zoom_WaitForZoom','fnordRemovedStates','adjustFlippedBattlefield','autoBattleUseSkills','portraitFlipVert','Window_BattleStatus_initialize','version','updateHpGaugePosition','updateStateIconSprite','ActSeq_Movement_HomeReset','ActSeq_BattleLog_PushBaseLine','_immortal','PwflA','DamageStyleList','_pattern','QAWAQ','_targetFloatHeight','DbRQY','PopupDuration','BattleManager_processVictory','Game_Interpreter_updateWaitMode','_skillIDs','battleMove','turnOrderChangeOTB','lkJeC','HalfActions','left','IgLCo','XFZlo','drawItemStatus','portrait','commandAutoBattle','initBattlePortrait','aliveMembers','ALL\x20SKILLS','chant','EFFECT_COMMON_EVENT','EmtLW','updateOnceParallelInterpreters','inocJ','onBattleStart','resizeWindowBorderStyle','createMultiTargetWindows','isForAnyoneFocusFriends','_emptyBitmap','createBattleUIOffsetX','moveBattlerHomeToPoint','TPjDE','_commonEventIDs','Sprite_AnimationMV_updatePosition','gainStoredBoostPoints','_shake','performRecovery','isMVAnimation','dataId','getSpecificBattlerKeyTarget','Interrupt','LJiRO','startActorCommandSelection','ShowSubstitute','KjTKp','HbkOE','targetActionSet','NameOffsetY','BattleEndEvent','dead\x20opponents','isClicked','refresh','DEF','_growEasing','_actionInputIndex','applyHardDamageCap','_injectAnimationSprite','FlKee','forActor','useDigitGrouping','performReflection','iEtVC','CreateCommonEventKeys','setItem','Scene_Battle_initialize','BZLXD','startMotion','fight','OLthm','ActSeq_Motion_FreezeMotionFrame','displayBuffs','ActionEnd','ActSeq_Camera_Offset','gVyLJ','SkewX','tone','expRate','_enemies','MMHaI','BpvMT','BattleLog','Pre','ActSeq_Horror_TVRemove','saQEg','inputtingAction','PreEndActionJS','wClBf','ActSeq_Impact_ColorBreak','drawSingleSkillCost','itemTargetCandidates','_forcing','ShowMpDmg','addAttackCommand','DLKXb','addItemCommand','DamageRate','_flashDuration','_createDamageContainer','addAutoBattleCommand','mainSpriteScaleX','isEscapeCommandEnabled','parseForcedGameTroopSettingsBattleCore','setBattleZoom','_damages','inputting','drawItemStatusListStyle','dying','SideviewSelect','all\x20targets','autoSelectLastSelected','addSingleSkillCommand','onMoveEnd','value2','traitSet','updateMotionCount','All\x20Allies','command119','Game_Battler_regenerateAll','FullActions','xQYNr','NameOffsetX','cGzPG','startSkew','ActorCmd','checkAutoCustomActionSequenceNotetagEffect','_frontAttachmentSprite','maxItems','JsIOB','WpdUX','_doubleTouch','MnYra','createMultiTargetWindow','Scene_Battle_commandFight','mainSpriteHeight','Scene_Map_initialize','UUkJy','HivaP','Debuffs','default','regenerateAllBattleCore','not\x20focus','helpAreaHeight','MotionFrameWait','JxUnU','alive\x20battlers','PostDamageAsUserJS','_statusType','clearFreezeMotion','_shadowScaleX','launchBattle','visualCutinPortraitFilename','ZApnw','resizeWindowXPStyle','_targetGrowY','ActSeq_Target_NextTarget','UXxOK','updateWeather','addTextToCombatLog','front\x20center','epyGl','_index','Strength','kIOqV','kBzTZ','startMove','displayChangedStates','isBattleRefreshRequested','OffsetX','JS\x20%1START\x20TURN','push','updateBattlebackBitmap1','pow','ActSeq_Motion_WaitMotionFrame','weaponImageId','DefaultStyle','getFullActionsPTB','Game_Actor_makeActionList','zrcsn','duration','_endingBattle','ActSeq_Impact_MotionTrailRemove','Game_Action_makeTargets','_offsetY','iDVMH','arjsS','Game_Battler_performActionStart','setSkill','pRger','_shadowScaleY','XEdNb','TP_Flat','DNlfI','StyleOFF','mhp','DamageFlat','startInjectAnimation','isTeamBased','MAXMP','svBattlerName','uqTZQ','name','clearBattleCoreData','AJqBI','centerFrontViewSprite','ActSeq_Mechanics_ActionEffect','EscapeSuccess','alterChange','canAddSkillCommand','QPctF','alterCost','isCancelled','itemWindowRect','onActorCancel','performActionEnd','process_VisuMZ_BattleCore_Notetags','ActSeq_Mechanics_FtbAction','silentHomeMove','JS\x20%1END\x20ACTION','setAttack','updateShadowVisibility','Window_BattleLog_performReflection','forceAction','ActSeq_BattleLog_UI','setBattleCameraOffset','CommandAddAutoBattle','Oyiyr','ActSeq_Mechanics_CtbSpeed','AnchorY','KSFQD','performActionStart','Game_Battler_performMiss','fyzoI','_battlerContainer','isSpinning','battleGrow','targetsForFriends','skillWindowRect','battleSkew','BattleManager_startAction','startFloat','tpbCommandFight','extraPositionX','EyWrZ','mEcAk','criticalDmgRate','WeaponTypeID','forceSelect','HxUMe','cancelButtonText','removeAnimationFromContainer','_skewDuration','Sprite_Animation_targetSpritePosition','process_VisuMZ_BattleCore_TraitObject_Notetags','setTroopPage','anchorY','_battleCoreAddedElements','setupWeaponAnimation','FlinchDistanceY','toString','actorCommandAutoBattle','unchanged','getChildIndex','setBattlerBattleCore','DefaultHardCap','YvDQz','noSimilarSTypes','BattleManager_processDefeat','createTargetsJS','_distortionSprite','VisuMZ_2_HorrorEffects','Window_BattleEnemy_hide','ReflectPlayback','pagedown','textWidth','WaitForExit','updateShadowBattleCore','TpGaugeOffsetX','focus','HpGauge','Targets','onBattleStartBattleCore','qrTKR','_homeWholeDuration','isBorderPortraitSpriteVisible','_autoBattle','addBattleCoreAutoBattleStartupCommand','SvBattlerMass-%1-%2','3430320rrbPEA','expTotal','text\x20target','_battleCoreBattleStartEvent','boxWidth','fCpwk','maxCols','FBAKO','updateGrow','_list','performDamage','createHpGaugeSprite','BoostPoints','OFcWd','ActSeq_Mechanics_DamagePopup','_logWindow','isAnyoneInjectAniPrepping','canUse','Scene_Battle_windowAreaHeight','LMvQQ','ATTACK','_skewY','_item','NmXwp','needsActorInputCancel','command301','displayHpDamage','Game_Temp_requestAnimation','ActSeq_Set_FinishAction','isSideView','retreat','refreshMotion','bSCov','YqoyW','RDoSC','ZDeht','GroupDigits','Window_BattleLog_update','_currentActor','special','rehXU','RFxSW','setBackgroundType','ewhQZ','UifEo','WocwR','type','IhSTN','pODjf','scope','abnormal','notFocusValid','repeatTargets','_homeDuration','_text','BZONV','jsScaleToFit','targetsForOpponents','startTpbTurn','partyCommandWindowRectXPStyle','command301_PreBattleEvent','SvWeaponSolo-%1-%2','performAttack','actorCommandSingleSkill','JvyjI','callOptions','contains','_back2Sprite','isAlwaysVisible','startTurn','DamageType%1','aXAqG','collapse','Name','_growY','Window_BattleLog_displayActionResults','fontSize','getBattlePortrait','actionEffect','meetsUsableItemConditions','isMeleeMultiTargetAction','BattleManager_startInput','setupBlueRedInvertImpactFilter','createJS','XJOBA','VisuMZ_2_BattleSystemCTB','ConvertActionSequenceTarget','akkqf','EpSmS','_itemWindow','_frame','_scene','HpGaugeOffsetX','offsetX','isJumping','stRDQ','index','checkBattleEnd','pha','ConvertParams','loadPicture','ActSeq_Mechanics_RemoveState','applySoftDamageCap','battleStatusSprite','parse','applyArmorModifiers','invokeMagicReflection','lukEffectRate','WtypeId','_battlerName','numTargets','UnVHu','getHalfActionsPTB','TqWkK','addExtendedTroopMembers','EjhLW','ActSeq_Mechanics_PtbAlterCost','_shakeFlinchDuration','EKanM','adjustPosition_ScaleDown','_targetBattlerKey','canBattlerMove','ActiveTpbOptionsMessage','domGI','JS\x20%1END\x20BATTLE','MDF','_createEffectsContainer','LYvBe','_commonEventQueue','refreshCursor','chantStyle','YrZdf','process_VisuMZ_BattleCore_CreateRegExp','FMMeQ','ykVfA','placeActorName','EnableDamageCap','Window_ItemList_maxCols','wtFTE','XIYME','Game_Action_evalDamageFormula','dNROM','commandNameWindowDrawBackground','iconText','drawItemImageListStyle','isBusy','tgjbj','_onceParallelInterpreters','_regionBattleback2','gainHalfActionsPTB','HOhhG','processAnimationRequests','wDmMq','terminate','performFlinch','offsetY','_svBattlerData','EnemyOffsetX','damage','visibilityState','_actor','UguRH','_angleRevertOnFinish','createWeather','hPnif','CommandAddOptions','performAction','wUUBf','padding','GePDJ','_namesCount','StatusWindowAttachmentFrontOffsetY','freezeTime','Scene_Battle_createCancelButton','Game_BattlerBase_addNewState','selectPreviousCommand','startActorSelection','PreApply%1JS','battleback2Name','ActorOffsetY','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','AYEqK','createLowerLayer','Scene_Battle_startEnemySelection','height','updateUiContainerPosition','BattleManager_processAbort','QhtoI','AMLcr','cbZfc','actions','createActorCommandWindowBattleCore','gaugeX','commandEscape','statusWindowRectDefaultStyle','_waitCount','commandNameWindowCenter','performActionMotions','DyZTr','WaitCount','changePaintOpacity','BattleManager_endBattle','DistanceX','pageup','_targetOffsetX','toLowerCase','Scale','ODKFq','cMFQq','MpGaugeOffsetY','zzvsq','battleCommands','isPartyCommandWindowDisabled','DamageDisplay','Game_Action_needsSelection','isItem','smooth','placeGauge','ResetFocus','AsTarget','Sprite_Enemy_updateStateSprite','_targets','uKhcI','lastCommandSymbol','applyVariance','ShowMissEvasion','damageOffsetX','VisuMZ_3_VisualCutinEffect','magicSkills','createEffectActionSet','ActSeq_Mechanics_PtbConvert','ConfigManager_applyData','itemHeight','auto','createChildSprite','onEnemyOk','shouldHideBattleEndPopups','Scene_Battle_createAllWindows','helpWindowRectBorderStyle','_preemptive','applyAngleChange','addShowHpGaugeCommand','isMagicSkill','RevertAngle','Sprite_Actor_moveToStartPosition','EKXaS','battleLayoutStyle','ActSeq_Cutin_AddVisualCutinEffect','isUndecided','PARTY','endAnimation','bxifV','frameDelay','OEVvk','Window_BattleLog_performMiss','PRE-','ActSeq_ChangeSkew','updateStatusWindowPosition','Game_Battler_clearMotion','_attackAnimationId','OffsetAdjust','jump','battleDisplayText','tmUnB','GuardFormulaJS','ShakeFlinchPower','visualCutinPortraitType','BattleLogRectJS','yDKdS','DefeatEvent','_effectDuration','ULDec','htebO','Scene_Party','missle','_phase','DrqvR','startGrow','debuffAdd','Override','currentExt','enemyId','setBattlerFacePoint','weatherType','updateBorderStyle','Point','hardDamageCap','svAnchorX','stateRate','Sprite_Battler_isMoving','attack','AUtie','Sprite_Enemy_updateCollapse','iconHeight','STR','isBattleCoreTargetScope','getWtypeIdWithName','moveBattlerToPoint','VisuMZ_2_AggroControlSystem','updateShakeFlinch','ActSeq_Target_RandTarget','deselect','_baseLineStack','BattleManager_isTpbMainPhase','repositionCancelButtonBorderStyle','processEnemyModeTouchBattleCore','displayActionResults','waitForEffect','glitch','AllowRandomSpeed','cCRLT','vCHsC','gDKtI','onStaticEnemyBitmapLoad','QqIsZ','growBattler','isAtbChargingState','isWaiting','SRfYN','Actor','performMoveToTargets','Game_Interpreter_PluginCommand','WaitForAnimation','iconIndex','actorId','VePKM','TkLbq','aHHeh','EndBattlePopups','OtaZg','hitRate','BattleLayout','_stateIconSprite','resize','%1EndBattleJS','attackAnimationId2','targetObjects','ActSeq_Impact_ShockwaveCenterTargets','magicReflection','pfzcC','_commonEventKey','isTickBased','setLastBattleSkill','PreDamageJS','gaugeLineHeight','Sprite_StateIcon_updateFrame','removeAnimation','slices','_tempBattler','makeActions','hasSvBattler','_padding','isDuringNonLoopingMotion','_shadowSprite','makeBattleCommand','STYPES','IMhlj','updateStateSprite','toUseBoostPoints','wait','esFZW','gainMp','PostStartTurnJS','makeSpeed','cancelTargetSelectionVisibility','addLoadListener','updatePointAnimations','updatePadding','makeActionOrders','message1','Intensity','uiInputPosition','lineHeight','portraitType','Game_BattlerBase_canAttack','svAnchorY','_targetHomeY','canGuard','Game_Action_setSkill','isNextSceneBattleTransitionable','Enemy-%1-%2','angleDuration','createPartyCommandWindowBattleCore','FhtNM','attachSpritesToDistortionSprite','MotionType','kKrLk','FQWDP','invokeAction','process_VisuMZ_BattleCore_CommonEventKeys','dsKwb','vOvgI','BackColor','SELNk','UjwzP','IpGiR','performMiss','selectSymbol','checkSubstitute','loop','_battlePortrait','reverse','Window_BattleLog_performRecovery','Game_BattlerBase_eraseState','Window_BattleLog_performCounter','isForRandomBattleCore','evalDamageFormulaBattleCore','Game_Battler_onTurnEnd','VisuMZ_2_PartySystem','ActSeq_Mechanics_StbExtraAction','worldTransform','_flipScaleX','_borderPortraitSprite','cameraOffsetDuration','CvNIE','spell','nXzBl','PreEndBattleJS','QGYqW','rPMKC','animationId','ArPenFlat','isForFriend','isOnCurrentMap','isHiddenSkill','_fauxAnimationSprites','updateJump','isForAnyoneFocusOpponents','deadMembers','WaitForEffect','_performActionEnd','1566225qanGiy','unshift','ActSeq_Horror_NoiseCreate','EasingType','clearForcedGameTroopSettingsBattleCore','ZRUba','EugaG','DefaultDamageStyle','TxgCw','PreRegenerateJS','ShowPortraits','sCTUc','nextActiveWeaponSlot','ActSeq_Movement_HomeMoveToPoint','cvVEa','portraitFlipHorz','blockWidth','LycOf','Sprite_Actor_initMembers','ActSeq_Inject_AnimationPauseResume','skillItemWindowRectBorderStyle','QAiwx','maxCommands','freezeFrame','ActSeq_Element_NullElements','isMoving','battleJump','maxTp','displayReflection','Game_BattlerBase_meetsUsableItemConditions','Game_Action_clear','Shadow2','_makeFontNameText','onAllActionsEnd','FCqZU','GuQgC','Window_ActorCommand_setup','isSpriteVisible','UfpIU','startWeaponAnimation','BPKqF','setupShockwaveImpactFilter','onAngleEnd','ARbRf','start','splice','onTurnEnd','isBattlerFlipped','FlinchDuration','ARRAYJSON','weapons','vFuNF','AutoBattleBgType','ActionCount','createStateSprite','noise','_updateClientArea','gainTp','ButtonAssist','MotionAni','BTestBypass','Scene_Boot_onDatabaseLoaded','singleSkill','isFastForward','isAttack','isAnyoneFloating','MOTIONS','ActSeq_Impact_MotionBlurScreen','_targetOpacity','exit','ExtraSettings','Window_BattleLog_performSubstitute','setHandler','Amp','StartTurnMsg','Game_BattlerBase_die','geERt','tpbActorSwitchConditionsMet','AnchorX','getDefeatedEnemies','initBattleCore','XPActorDefaultHeight','swWIi','spinBattler','hTBBA','spriteId','flashDuration','mainSpriteScaleY','updateActors','Sprite_Battler_updateMain','Sprite_Gauge_smoothness','tcRAO','onHomeMoveEnd','itemEffectRecoverHp','jbrEw','resetBreakShield','Window_SkillList_maxCols','createAutoBattleWindow','updateCommandNameWindow','%1Event','isAlive','partyCommandWindowRect','VisuMZ_4_BreakShields','JS\x20%1APPLY\x20%2','friendsUnit','recoverAll','ApplyImmortal','isSkillItemWindowsMiddle','find','statusWindowRectBorderStyle','updateAngleCalculations','stepForward','checkTpbInputOpen','log','getMenuImage','ActSeq_DB_DragonbonesMotionAni','isOpen','mIHnm','XrHyE','hCkBt','WjzZG','ArRedFlat','XRFQQ','ActSeq_Zoom_Scale','\x20to\x20%1\x20midbattle.','_cacheTextWidth','isDying','StartTurnWait','CommandVisible','14qlJTJo','PreDamageAsUserJS','code','alive\x20enemies\x20not\x20target','battleAnimation','_growX','BllvD','isBTB','motionIdle','_angleEasing','_uiContainer','ShowTpDmg','clearResult','BattleSystemSTB','_actorSprites','clearMotion','_duration','YqCKh','isAlwaysHidden','falRQ','battleback1Name','_damagePopupArray','TargetLocation','bgType','validTargets','FlashDuration','BindCommonEventKeysForGroup','_escapeRatio','weaponTypes','SkillItemStandardCols','DMCnv','OdsNu','isDead','ogVDP','delay','VisuMZ_3_ActSeqCamera','createAllWindows','ActSeq_Mechanics_BreakShieldReset','Game_Action_isForRandom','lKwGV','_angleWholeDuration','addChild','isPTB','vDmkT','BattleManager_initMembers','daOiw','%1Damage%2JS','finishActorInput','DefaultSoftCap','skillId','MultiTarget','kcQnc','rjxrW','ResetOffset','Window_BattleLog_displayTpDamage','Scene_Battle_update','wfSFr','ActionSkillMsg1','ParseArmorNotetags','removeOnceParallelInterpreter','ActSeq_Movement_Spin','dead\x20battlers','InDmp','updateSkew','endAction','LastSelected','setBattleAngle','_motion','randomInt','addedBuffs','isSkill','Scene_Battle_createActorCommandWindow','RUTmS','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','BattleManager_makeActionOrders','createEnemies','missile','updateVisibility','ActSeq_Cutin_EndVisualCutinEffectAll','isDamagePopupRequested','stepBack','repeats','setupOversaturateImpactFilter','WaitForCamera','%1EndTurnJS','criticalDmgFlat','prepareCustomActionSequence','aZWeF','ActSeq_Impact_MotionBlurTarget','actor','ShakeFlinchDuration','createDigits','Window_BattleLog_displayMpDamage','Window_BattleEnemy_initialize','setActiveWeaponSet','extraPositionScaledY','_interpreter','ZltPR','EscapeSuccessJS','Game_Action_apply','grmPD','XhPVi','ActSeq_Mechanics_ArmorPenetration','_isBattlerFlipped','_enemyWindow','Parse_Notetags_Action','CmdTextAlign','Sprite_Battler_updatePosition','MMPFm','ActSeq_Camera_WaitForCamera','TyKTS','isForNotUser','_baseY','pHSTp','displayMpDamage','FYcAo','_lines','bWSdB','evalDamageFormula','selectLast','blt','snqFO','playEnemyDamage','makeTargets','LYOEG','filters','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','UsdGZ','forceWeaponAnimation','coreEngineRepositionEnemies','KqSMX','TxIvX','setLastPluginCommandInterpreter','processTouch','icon','ActSeq_Element_ForceElements','UibFb','JUDbR','updateStyleOpacity','animationNextDelay','isAnimationPlaying','Window_BattleLog_displayMiss','STB','Duration','battleCoreResumeLaunchBattle','Wave','StepDistanceY','setTargetBattlerKey','ParseStateNotetags','isNonSubmenuCancel','bitmap','AggroControlSystem','CurrentTurn','Window_BattleLog_performDamage','revealNewWeaknesses','changeAtbCastTime','checkSceneBattleTransitionable','frameCount','createActorCommandWindow','txZXR','canInput','addBuff','ActSeq_Animation_ShowAnimation','arRedRate','CastAnimation','lwetX','QFCbG','tSmBO','DisablePartyCmd','TcnOB','ACTOR_OFFSET_X','kFnRm','Game_Map_battleback2Name','aZegf','_armorPenetration','JesJd','damageStyle','clearWeaponAnimation','adgPf','placeStateIcon','AS\x20TARGET','isSTB','loadSystem','CmdStyle','BattleManager_updatePhase','save','StatusWindowSkinHide','uiMenuStyle','isAnyoneMoving','drawTextTopAligned','PostApplyAsTargetJS','OverallFormulaJS','GjnbH','ActSeq_Impact_Desaturate','shift','ActSeq_Camera_Clamp','pointX','_currentAngle','isForAll','updateForceAction','svShadow','clearRect','ActSeq_Impact_Oversaturate','AatXi','ActionStart','_homeEasing','addSkillCommands','pmUYE','_lastActor','clearBattlerMotionTrailData','flashColor','ADBAF','XPCfW','performCounter','ShowAddedBuff','StyleON','remove','createAttachmentSprites','getBattlerFromKey','isPreviousSceneBattleTransitionable','isInputting','_allTargets','drawItemStyleIconText','_damageContainer','SlotID','isAffectedByBreakShield','isForDeadFriend','Sprite_Battler_damageOffsetY','FrontViewSelect','textAlign','isCommandEnabled','setupTextPopup','getBattlerKeyTargets','Game_Map_battleback1Name','_freezeMotionData','parameters','2388tXxTsl','pattern','createCommandVisibleJS','_forcedHomeY','ShowCurrentState','AutoBattle','skillTypes','close','playOnceParallelInterpreter','States','qnBNA','Window_BattleLog_popBaseLine','Scene_Battle_terminate','cancel','Direction','_flinched','setupMotion','createCancelButton','_buttonText','showAnimation','VarianceFormulaJS','mXFWQ','createEnemyWindow','_cursorArea','calcWindowHeight','width','checkCacheKey','process_VisuMZ_BattleCore_jsFunctions','setCommonEvent','Linear','battlelog','Sprite_Battler_initMembers','FoVYC','_hpGaugeSprite','displayBattleCoreTransitionErrorMsg','arPenRate','process_VisuMZ_BattleCore_PreBattleCommonEvent','isGuard','makeActionListAutoAttack','_targetSkewX','isFightCommandEnabled','rDPNP','charged','HbWsn','updateShadowPosition','ParseClassNotetags','Destination','WPTgG','ScaleY','PopupShiftX','Window_ActorCommand_initialize','in\x20order\x20for\x20Ally\x20or\x20Enemy\x20targeting\x20to\x20work\x20','wtypeId','aEqGX','isMeleeSingleTargetAction','getAttackMotionSlot','AooyY','vznZj','createActors','removeActor','return\x200','Filename','Targets1','zYxzL','ShuffleArray','ActSeq_BattleLog_WaitForNewLine','autoMeleeMultiTargetActionSet','cutinExit','constructor','VisuMZ_3_ActSeqProjectiles','displayCurrentState','_autoBattleWindow','parent','ScaleX','applyData','endVisualCutin','Sprite_Enemy_update','battleInjectPrep','40997vWdGLY','zSsma','ShakeFlinch','adjustPosition_ScaleUp','Scene_Map_updateCallMenu','TP_Rate','CalcActionSpeedJS','_helpWindow','Spriteset_Battle_createLowerLayer','createUIContainer','setWaitMode','context','Window_BattleLog_refresh','StatusWindowAttachmentFrontOffsetX','isFrameVisible','updateAttachedSprites','_skillWindow','victory','TVtih','drawTextEx','WEAPON\x20SWAP','isCustomBattleScope','_weaponSprite','isAutoBattle','jUxHG','setHelpWindowItem','+%1\x20MP','CalcEscapeRatioJS','DDgJH','missed','changeBattlerOpacity','ParseWeaponNotetags','isLIK','KhpCB','HelpAutoBattle','setCustomDamageFormula','createEnemyNames','qkVtI','CopyCombatLog','string','partyCommandWindowRectBorderStyle','isDeathStateAffected','IxIbp','PostRegenerateJS','commandRemember','createAnimationContainer','_animationCount','gGcix','PbbfY','_cancelButton','_enemyMultiTargetWindow','ChIrF','commandNameWindowDrawText','AlphaFilter','IotQB','Game_BattlerBase_refresh','isIncludedInEnemyWindow','clearActiveWeaponSlot','troop','_windowLayer','startJump','wLrqb','Scene_Battle_createHelpWindow','battleUIOffsetX','updateCollapse','makeDamageValue','UnRnq','drawEnemyName','_motionType','CheckSkillCommandShowSwitches','PreStartActionJS','alive\x20enemies\x20not\x20user','loadWindowskin','Parse_Notetags_Targets','YyRuq','VisuMZ_3_BattleAI\x20needs\x20to\x20be\x20updated\x20','HqKZc','rowSpacing','jyWCA','_executedValue','head','removeDamageSprite','refreshActorPortrait','Window_BattleActor_processTouch','BattleDefeatJS','setSubject','initialize','EscapeFail','oItgF','OOrXc','StatusWindowAttachmentBackOffsetX','XgYUW','battleInjectAni','isDTB','requestPointAnimation','random','substitute','Game_Action_setSubject','textSizeEx','VAqpm','currentAction','addNewState','ShowCounter','mbuoB','onActorOk','SZuHv','isPlaytest','makeData','resetFontSettings','process_VisuMZ_BattleCore_Action_Notetags','stepFlinch','OaJyT','isCharging','statusWindowRectXPStyle','eVCJt','freezeMotion','SvMotionIdleMass-%1-%2','TVAsl','custom','nnKgv','Game_Party_removeActor','clamp','hasSkill','parallaxScrollXinvertEnemy','checkExtendTroopCompatibility','startHomeMove','UQhQO','VisuMZ_1_SkillsStatesCore','DigitGroupingDamageSprites','jOEyT','turn','_weaponImageId','isPhysical','Dnerv','executeDamage','alive\x20friends','playReflection','_floatHeight','requestRefresh','putActiveBattlerOnTop','visualCutinPortraitHue','selectNextActor','Scene_Battle_itemWindowRect','ActSeq_Mechanics_EtbAction','floatBattler','processPostBattleCommonEvents','nHpvK','closeBattleActorWindow','tRYAQ','contents','VariableID','Game_Battler_startTpbTurn','ActSeq_Cutin_WaitForExit','Window_Options_addGeneralOptions','TPB','atczB','3LhSvld','_forceAction','ActSeq_Mechanics_SwapWeapon','initVisibility','escape','canAlterActionCostPTB','GAdEU','CmdTextAutoBattle','onOpacityEnd','equipSlots','TbWEo','Game_System_initialize','includes','lZirI','JS\x20%1END\x20TURN','isTriggered','xlbqx','displayRemovedStates','_lineHeight','HVhgr','_inputting','isAnyoneSpinning','_canLose','applyBattleCoreJS','dJlGU','max','Game_Interpreter_command301','applyTargetFilters','AUTO\x20BATTLE','ShowButton','hbQfp','_linkedSprite','autoSelectPriority','WaitForOpacity','isAnimationShownOnBattlePortrait','AutoNotetag','command236','TUttP','waitForNewLine','getDamageStyle','_iconIndex','addWindow','AddHpGaugeOption','LPEJj','PreApplyAsUserJS','Slot','WaitForEntrance','updateCallMenu','gainCurrentActionsFTB','_cursorSprite','ActSeq_Mechanics_AddState','isChanting','Scene_Options','SdnwS','hQNtB','mainSprite','tdzMd','UNTITLED','lxxal','_createCursorArea','statusText','ActSeq_Weapon_ClearActiveWeapon','VisuMZ_2_DragonbonesUnion','battleCamera','mqYPw','ymCpr','setupBattleCoreData','hidden','drawItem','frameVisible','OpNnY','isBattleMember','Sprite_Enemy_createStateIconSprite','ShowHpDmg','Sprite_SvEnemy','param','WaitForFloat','isShownOnBattlePortrait','numRepeats','ActSeqImpact','xKHhV','_jumpMaxHeight','Game_Action_makeDamageValueDisperse','onEscapeSuccess','ActSeq_Animation_AttackAnimation','displayFailure','_skewEasing','createCommandNameWindow','sort','power','reduce','isActing','Sprite_Weapon_loadBitmap','rjBtn','PostApplyAsUserJS','isBattleTest','visible','enemyNames','Angle','guard','njvul','drawText','Mechanics','speed','Enemy','PostStartActionJS','addChildToUiContainer','bitmapWidth','ActSeq_Mechanics_WaitForEffect','PreEndTurnJS','ceil','occasion','battlerShadowScaleX','HpGaugeOffsetY','DDVsQ','EscapeFailureJS','waitForOpacity','<CENTER>%1','JS\x20%1REGENERATE','_opacityWholeDuration','changeCtbChargeTime','iGBCN','PostEndActionJS','PopupShiftY','ffnlP','Game_BattlerBase_canGuard','applyGuard','Game_Interpreter_terminate','_callSceneOptions','ForceRandom','znVxS','ActSeq_Angle_Reset','MzLNc','%1-%2','Game_Action_setItem','CmdIconItem','Window_BattleLog_popupDamage','_requestRefresh','_lastPluginCommandInterpreter','hpAffected','DisplayAction','OffsetY','updateSpin','createTroopNote','getNextSubject','acKzU','\x5cI[%1]%2','iYeBC','select','parallaxScrollYinvertEnemy','ActionCenteredName','Mirror','onEncounterBattleCore','skewDuration','oLAsA','canAttack','ArpDO','WaitCount1','ParseAllNotetags','AttackAnimation','UrJAH','ActSeq_Set_SetupAction','createDamageContainer','Fkqrh','okTargetSelectionVisibility','Mute','Scene_Battle_onEnemyCancel','abs','updateBattlebackBitmap','showPortraits','clearActiveWeaponSet','setFrame','Window_BattleLog_performAction','Scene_Battle_createEnemyWindow','Window_BattleLog_performCollapse','setupActionSet','Game_Action_applyGlobal','ActSeq_Target_CurrentIndex','compareBattlerSprites','makeCommandList','SrMIC','ActSeq_Impact_MotionTrailCreate','aDpnW','FCSoB','ActSeq_Mechanics_Multipliers','rueEV','CmdIconAutoBattle','isSkipPartyCommandWindow','itemHit','processRandomizedData','performWeaponAnimation','ActSeq_Movement_WaitForSkew','createEnemyNameContainer','AddOption','removedStateObjects','battlerKey','performMoveToPoint','checkShowHideSwitchNotetags','setupDamagePopup','CreateCutinSettings','isBattleSys','pointY','waitForAnimation','NameAlwaysHidden','Victory','toUpperCase','ActSeq_Set_WholeActionSet','dFDWq','PreApplyAsTargetJS','isAnyProjectilePresent','ParseEnemyNotetags','hide','Scene_Battle_helpWindowRect','targetSpritePosition','AzqrO','CheckVisibleSwitchNotetags','allowCollapse','gwMLS','adeUq','update','StyleName','HwrKR','parallaxScrollY','isOTB','setVisibleUI','changeWeather','_customDamageFormula','isPartyTpbInputtable','VisuMZ_2_AggroControlSystem\x20needs\x20to\x20be\x20updated\x20','cutinEnter','setupBattleback','needsSelectionBattleCore','_dimmerSprite','onJumpEnd','isForOpponent','logActionList','ChargeRate','motionType','yUbHF','SMkor','GfioJ','fZwKt','473326MGNHJZ','isPreviousScene','hAfxt','igPeD','Window_BattleLog_pushBaseLine','updateLink','_spriteset','Game_Battler_performDamage','popupDamage','loadBitmap','findSymbolExt','NameLegacy','ArPenRate','makeTargetSelectionMoreVisible','AnimationID','processBattleCoreJS','HKNmB','VisuMZ_2_BattleSystemOTB','Game_Action_isForOne','forceEscapeSprite','isSideButtonLayout','CheckVisibleSkillNotetags','alive\x20opponents','ActSeq_Mechanics_AnalyzeWeakness','StatusWindowAttachmentBack','baOGK','SceneManager_isSceneChanging','repositionEnemiesByResolution','updateStateSpriteBattleCore','_growWholeDuration','JMQlz','EVAL','Rizkc','displayReflectionPlayBack','FlashColor','shouldDisperseDamage','TextAlign','VariableDmg','<CUSTOM\x20ACTION\x20SEQUENCE>','addedDebuffs','Immortal','EnableSoftCap','_makeCursorAlpha','ActSeq_Movement_WaitForOpacity','WuAOS','XPActorCommandLines','PreStartTurnJS','jESIN','nVrkL','_enemy','ZUtlF','Scene_Map_launchBattle','ActSeq_Element_AddElements','WaitForProjectile','_cache','cancelActorInput','gLWoD','awzge','ActSeq_Horror_Clear','lpUfJ','thrust','SvMotionIdleSolo-%1-%2','mpDamage','becomeSTBExploited','swing','Game_Action_numRepeats','VariableHeal','ypuGf','_battler','gradientFillRect','FZTya','svActor','jDGMZ','AutoMeleeAoE','setActionState','isTpb','actionBattleCoreJS','addGuardCommand','onBattleStartOnceParallels','_homeX','virtualClick','uzGZl','MpGaugeOffsetX','addCustomCommands','optDisplayTp','battleAngle','isAnyoneGrowing','mkNoR','getBattlePortraitOffsetY','isSelected','RequiresDefeat','QoL','arPenFlat','ActSeq_Mechanics_PtbFullHalfAction','ReflectAnimation','Sprite_Battler_update','performSubstitute','addBattleCoreAutoBattleStyleCommand','svBattlerData','trueRandomTarget','bHNUI','vANIj','criticalHitRate','_opacityDuration','ParseSkillNotetags','addAutoBattleCommands','isATB','AttachStateOffsetY','Damage','adjustPosition_1for1','Settings','504198yvoFCT','ActSeq_BattleLog_WaitForBattleLog','iUsYo','wbweR','QIapq','processRefresh','Game_Interpreter_command283','isForAnyone','gdHKm','_updateCursorFilterArea','process_VisuMZ_BattleCore_PluginParams','CastPhysical','onRegeneratePlayStateAnimation','startDamagePopup','drawLineText','bFpzF','TUgWF','AqRoS','FZBTY','anxqT','Game_Action_isForOpponent','makeTargetSprites','with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!','selectAllActors','autoBattle','UObGr','IconStypeMagic','opacity','_updateCursorArea','VisuMZ_4_CombatLog','DKeHD','waitCount','ZdOca','Window_BattleLog_performEvasion','ActSeq_Mechanics_ActiveChainInputDisable','IEEfl','WaitForMovement','gainBravePoints','registerDefeatedEnemy','buffAdd','_regionBattleback1','CommandWidth','Turns','performEvasion','setupMotionBlurImpactFilter','setBattlePortrait','TdnUZ','Actions','ActSeq_Movement_HomeMoveToTarget','_enemyWindowMode','actorCommandWindowRect','ENEMY_OFFSET_Y','Fruzk','isSkewing','WindowWidth','faceWidth','playCancel','SHOW_BUTTON','min','RVEyV','ANTI_TINT_UI','isForAliveFriend','JVDoY','Upezn','_lastHpDamage','Sprite_Enemy_setBattler','isQueueOptionsMenu','_eventId','applyResultSwitches','VGWIZ','MeleeDistance','setSTBExploited','Game_Battler_makeSpeed','critical','Scene_Battle_updateStatusWindowPosition','VNfGn','IlSYt','battleCommandIcon','BattleManager_startBattle','setupIconTextPopup','WQcmG','requestAnimation','BaseTroopIDs','isStateResist','sideview_ui','Game_Actor_equips','addBattleGridMoveCommand','LurUd','isAnyoneJumping','refreshRequest','reserveCommonEvent','ActSeq_Cutin_WaitForEntrance','setupDesaturateImpactFilter','DigitGrouping','JS\x20%1START\x20BATTLE','physical','checkShowHideSkillNotetags','updateCustomActionSequence','addSingleSkillCommands','moxbO','isFloating','StateIconOffsetX','_dragonbonesSpriteContainer','battleSpin','Scene_Battle_selectNextCommand','Skills','isHidden','Stssx','gflMp','Skill-%1-%2','children','_targetAngle','XNxyX','measureTextWidth','_effectsContainer','%1StartActionJS','float','addOptionsCommand','Targets2','onEscapeFailure','PostDamageAsTargetJS','ConfigManager_makeData','ActSeq_Motion_PerformAction','VisuMZ_3_WeaknessDisplay','BindCommonEventKeysForObj','Scene_Battle_createPartyCommandWindow','setHorrorEffectSettings','Opacity','MP_Flat','WaitCount2','Game_Action_itemEffectAddAttackState','createBattleFieldBattleCore','nBjza','priority','GRID\x20MOVE','SmEvm','_surprise','ForceExploited','FuBar','isImmortal','PhMYP','ActSeq_Animation_AttackAnimation2','battleZoom','TextColor','isCommonEventReserved','makeTargetsBattleCoreJS','isMagical','cZATB','extraHeight','commandFight','startAction','isAppeared','StartName','animation','PostApply%1JS','_battleCoreBattleResumeAfter','AttachStateOffsetX','isOpponent','angle','testApply','SmoothImage','processExtendTroopMembers','XKphH','OapIB','createBattleFieldContainer','jsOneForOne','NextTurn','createShadowSprite','setupBattlebackBattleCore','bxUaL','BTlpp','ShowEnemyGauge','removeImmortal','finishActionSet','dnagl','compatibilityVisible','frontview_ui','lqSDR','right','PrioritySortActive','ActSeq_Mechanics_OnceParallel','contentsOpacity','equips','okButtonText','IconSet','onBattleEndBattleCore','action','processForcedAction','targetBattlerContainerOpacity','requestFauxAnimation','Scene_Battle_onEnemyOk','Scene_Battle_startActorCommandSelection','autoBattleAtStart','version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.','clearDamagePopup','drawItemImageXPStyle','itemLineRect','uEzxv','ActSeq_Movement_FaceDirection','bind','_activeWeaponSlot','snapForBackground','hasBeenDefeatedBefore','evade','customDamageFormula','CombatLogIcon','_battlerHue','isAutoBattleCommandEnabled','evaded','Sprite_Actor_createStateSprite','Radius','CZmzq','createHelpWindowBattleCore','isSceneBattle','createStateIconSprite','parallaxHue','GTDum','FPlTV','ext','_tempActor','battleMembers','_flashColor','isBattleFlipped','KOldw','AllEnemiesText','clearTargetBattlerKey','Scene_Battle_skillWindowRect','ActSeq_Movement_WaitForJump','StateIconOffsetY','BattleManager_onEncounter','callNextMethod','FaceAway','qqgKG','_appeared','sleep','isEnemy','oTiyc','_growDuration','VisuMZ_2_BattleSystemBTB','_targetOffsetY','subject','BattleManager_checkBattleEnd','XPSpriteYLocation','redraw','prototype','Game_Action_isForAliveFriend','MsFDB','vNrXr','HAcXR','openBattleActorWindow','MAXHP','isFTB','BARE\x20HANDS','endBattle','emerge','HpMuq','CreateActionSequenceTargets','randomTargets','addChildAt','alterType','placeTimeGauge','_backAttachmentSprite','updateEffectContainers','sLuRN','tUFOJ','popBaseLine','PortraitScaleBorderStyle','ActSeq_Projectile_Picture','doesPageHaveOnceParallelStart','setEnemyWindowMode','format','backColor','_active','SkewY','split','drawActorFace','SeLTi','vgqJU','updateKeyboardKeys','yVqvZ','OxIJN','anchor','Window_BattleLog_displayEvasion','alphabetic','wholeActionSet','rsoDW','Scene_Battle_stop','ChangeOrderBy','GPZdO','getSkillTypes','_forActor','updateScale','EtZJI','StatusWindowSelectableBackHide','CheckMapBattleEventValid','Sprite_Battler_setBattler','Scene_Battle_logWindowRect','BattleManager_checkSubstitute','Game_Map_encounterList','stateMotionIndex','umGlC','battleFloat','_indent','isETB','jumpBattler','extraPositionY','FollowTurn','alive\x20friends\x20not\x20target','frontviewSpriteY','VisuMZ_1_MainMenuCore','isTpbMainPhase','sNLZq','casting','isForOneBattleCore','border','CkyUV','OfYjq','xfvan','ActSeq_Movement_BattleStep','shvFf','checkShowHideBattleNotetags','Window_BattleLog_displayCritical','_skewX','hVCzf','wVXos','_borderPortraitTargetX','_target','softDamageCap','setBattlerFlip','Parse_Notetags_TraitObjects','isStatusAffected','transform','eUQcg','basicGaugesY','rFell','POITw','setValue','aRuce','XnsGr','uzSsV','resetResultSwitches','item','canEscape','SceneManager_push','map','_targetIndex','adjustWeaponSpriteOffset','yptIA','xRbBb','lastFilename','_selectionEffectCount','KvVMZ','value1','StatusWindowSkinFilename','drawItemImage','TpbGaugeOffsetY','getConfigValue','AGI','setImmortal','ActSeq_Mechanics_Immortal','GShvu','nkReH','requestDragonbonesAnimation','description','lcmlb','HitFlat','ALL_ENEMIES','ActSeq_Movement_HomeMoveBy','addEscapeCommand','performMagicEvasion','_forcedHomeX','Game_BattlerBase_initMembers','actorCommandCancelTPB','PEcGV','SIoBK','prev\x20target','aFLdS','alive\x20friends\x20not\x20user','DistanceAdjust','removeHorrorEffect','compareEnemySprite','Wbkpo','makeHpDamageText','updateFlip','IRFud','VisuMZ_2_BattleSystemSTB','ShowCritical','sEvuW','Window_BattleLog_performActionEnd','ActSeq_DB_DragonbonesTimeScale','HP_Rate','wpELX','ZVIMb','note','vkVsn','oOvDd','yqRDY','Game_Battler_onBattleStart','callOkHandler','Game_Map_setupBattleback','innerWidth','show','SwitchCritical','fpZTB','TXQYY','Scene_Battle_startActorSelection','LCwYZ','isBorderStylePortraitShown','loadSvEnemy','isAnyoneChangingOpacity','length','ySbZa','isForAliveFriendBattleCore','AqrpO','addPartyCommand','members','gvIpf','PCXaa','finalizeScale','message2','top','canSingleOrMultipleSelect','Game_Battler_clearDamagePopup','addFightCommand','JS\x20ESCAPE\x20FAILURE','SkillsStatesCore','uYgkX','canGuardBattleCore','_statusWindow','XhFVk','visualCutinPortraitIndex','isBuffAffected','updateAttachmentSprites','_opacityEasing','_checkOn','requestMotion','regenerateAll','RhddY','ActSeq_Motion_RefreshMotion','iunlO','bPzww','attackAnimationId1','textBaseline','loadBattleback1','wYELg','getCommonEventIdWithName','Exploiter','SwitchMissEvade','updatePhase','PreStartBattleJS','getBattlePortraitOffsetX','value','ActionEndUpdate','Game_Action_itemEffectAddNormalState','GetActionSequenceSpecialTarget','attackTimesAdd','getNextDamagePopup','Game_BattlerBase_isStateResist','NameAttachStateIcon','QpXzs','ActSeq_Movement_Opacity','kcWSz','_partyCommandWindow','checkTpbInputClose','getHardDamageCap','applyImmortal','arRedFlat','isVisualHpGaugeDisplayed','updateFloat','ActSeq_Weapon_NextActiveWeapon','DTB','ESCAPE','HGJhF','animationWait','setSvBattlerSprite','QcOIF','CAXSN','showHelpWindow','restore','Game_Action_itemHit','Window_BattleLog_clear','getNextSubjectFromPool','PopupPosition','changeInputWindow','mZMOi','svActorVertCells','TpbActiveChangeEnabled','Game_Party_addActor','wIMHR','CmdIconOptions','Window_BattleLog_performMagicEvasion','Game_Battler_forceAction','setCursorRect','_targetSkewY','sortEnemies','Exploited','DPhgd','filter','sortDamageSprites','BattleManager_setup','_actorWindow','ARRAYSTR','Sprite_Enemy_updateBossCollapse','_speed','boxHeight','list','isCustomActionSequence','TPUxz','ARRAYFUNC','sSAkQ','_handlers','linkSprite','isBypassDamageCap','ptPTJ','svBattlerAnchorX','ATK','IiDwn','hitIndex','updateBattlerContainer','MtxMK','ShowAddedDebuff','AutoBattleOK','performAttackSlot','tHUSI','isForOne','setLetter','createBattleUIOffsetY','CheckVisibleBattleNotetags','removeChild','MANUAL','active','ppnRs','ScaleDown','getBattlePortraitFilename','uqBvf','damageRate','initElementStatusCore','Variable','isActiveTpb','applyItem','iJeLg','_colorType','Scene_Options_maxCommands','_battleCoreNoElement','Scene_Battle_selectPreviousCommand','_stateSprite','VepwE','statusTextAutoBattleStyle','BattleStartEvent','updateBossCollapse','setText','_totalValue','ReCiz','isForRandom','VisuMZ_2_BattleSystemPTB','itemRect','playOnceParallelTroopPage','zoomDuration','_drawTextBody','idTIV','thYFk','ActSeq_Camera_FocusTarget','Scene_Battle_start','isItemCommandEnabled','_offsetX','Window_BattleStatus_drawItemImage','ActSeq_Movement_MoveToPoint','#ffffff','xCrag','isBattlerGrounded','motionSpeed','getColor','wVoRy','DQiMB','JSON','initMembers','WaitForZoom','windowskin','onBattleEnd','setupHpGaugeSprite','initMembersBattleCore','isChangingOpacity','applyDamageCaps','UjjwF','command283','pages','NameFontSize','VisuMZ_3_ActSeqImpact','stop','buffRemove','oGGRG','sGIOk','setupFont','isEffecting','_tpbSceneChangeCacheActor','_animation','getSkillIdWithName','multiTargetWindowRect','iconWidth','attackSkillId','updateStart','TrhqA','IReFW','opponentsUnit','rhUmi','DwddZ','getDualWieldTimes','Game_Action_isForAll','CFPpb','Spriteset_Battle_update','SNVjz','tGQJN','updateHelp','_stypeIDs','TextFmt','getInputButtonString','rpxha','_wtypeIDs','fittingHeight','BattleManager_endAction','maxLines','CmdIconEscape','Scene_Battle_startPartyCommandSelection','Frame','attackStates','JumpToLabel','setHue','ActSeq_Impact_ShockwaveEachTargets','isActionSelectionValid','addDamageSprite','isDisplayEmergedEnemies','in\x20order\x20for\x20Taunt\x20and\x20Provoke\x20features\x20to\x20work\x20','Window_BattleActor_show','Index','OprvO','State-%1-%2','animationShouldMirror','OOMjD','nameY','drawSkillCost','effects','applyGlobal','moveBattlerHomeDistance','Game_Troop_setup','autoMeleeSingleTargetActionSet','traitObjects','snOMq','windowAreaHeight','ActSeq_Movement_MoveBy','ActSeq_Horror_GlitchRemove','VeagR','ActSeq_Impact_ZoomBlurTargetCenter','ActSeq_Impact_ShockwavePoint','ShowAddedState','rec','POST-','svBattlerAnchorY','skill','alterActionCostPTB','StatusWindowAttachmentFront','Game_Troop_expTotal','selectNextCommandTpb','BattleManager_onEscapeFailure','AutoMeleeSolo','lPkyE','mpDamageFmt','WaitForSkew','WaitForScale','updateEffectsContainer','1rVfJmu','Sprite_Actor_update','partyCommandWindowRectDefaultStyle','battleCameraData','isCurrentItemEnabled','edjos','ActSeq_Impact_TimeStop','create','setMoveEasingType','dimColor1','font','Spriteset_Battle_createBattleField','startVisualCutin','BattleCore','Game_Actor_setup','HbNPR','_preBattleCommonEvent','OgrmS','YktJZ','BqmKs','Scene_Battle_partyCommandWindowRect','ActSeq_BattleLog_Refresh','eEQvV','PostStartBattleJS','Elements','_actions','2718ATidft','parallaxScrollX','_lastEnemy','createAttachedSprites','_tpbNeedsPartyCommand','setBattler','VisuMZ_3_BoostAction','cjxgR','bottom','applyForcedGameTroopSettingsBattleCore','_endBattle','battleCommandName','_defeatedEnemies','allBattleMembers','MotionSpeed','klnWL','updatePositionBattleCore','ActSeq_Horror_NoiseRemove','drawItemImagePortraitStyle','MessageWait','qQlkw','iDJGZ','_battleCoreForcedElements','TIjkV','gainCurrentActionsETB','updateCancel','drawItemStyleIcon','NameAlwaysVisible','rfxdl','Game_Enemy_transform','BG_TYPE','ShowWeapon','fUOgi','canUseItemCommand','yeEnp','slice','VoXBG','CmdIconFight','_action','irgcQ','isTpbCharged','xYPNt','Sprite_Actor_setBattler','%1EndActionJS','_mainSprite','QyCdb','IEdcg','portraitFilename','BattlebackScale','EmergeText','hpRate','iTHjU','Height','skewBattler','createBattleField','softDamageCapRate','GWczv','yBQnk','applyGlobalCommonEventNotetags','Game_Action_isForFriend','rDdNm','qsUzH','floor','autoSelect','pZnQT','ActSeq_Camera_FocusPoint','2056ZeNVcv','Scene_Battle_updateBattleProcess','_floatWholeDuration','processOk','ActSeq_Mechanics_EnemyEscape','clear','portraitIndex','_subject','isAnyoneInjectAnimating','qTDzy','_reflectionTarget','itemEffectAddAttackState','xnZql','_shakeFlinchPower','jsScaleUp','Sprite_Actor_updateShadow','%1StartBattleJS','addOnceParallelInterpreter','XQOMY','Game_Battler_performEvasion','_enemySprites','Item-%1-%2','BattleManager_inputtingAction','DamageStyles','Game_Action_executeDamage','TLuTo','ALL_ACTORS','TimeScale','onSelectAction','command3011','drawItemBackground','qRSrg','setHome','QvtKk','Game_Action_setGuard','moveToStartPositionBattleCore','displayMiss','switchToWeaponType','wgAhS','kHbrC','COMBATLOG','addSkillTypeCommand','drawBackgroundRect','CTB','cbaVW','ActSeq_Mechanics_OtbOrder','Actor-%1-%2','_animationSprites','RDhYf','getAttackMotion','Window_Options_statusText','stopInjectAnimation','createInnerPortrait','_deathStateApplied','VisuMZ_2_BattleSystemETB','WaitForJump','WaBMK','ActionItemMsg','processAbort','VisuMZ_2_WeaponSwapSystem','_battleLayoutStyle','-%1\x20MP','WqnSM','addText','BReku','ActSeq_Animation_ActionAnimation','text','battleUIOffsetY','BattleSystemCTB','ActSeq_Mechanics_BreakShieldChange','shouldPopupDamage','updateShadow','ItXBa','updateHomeMove','updateEventMain','replace','getItemDamageAmountTextOriginal','damageContainer','attackMotions','BattleSystemBTB','battler','onFloatEnd','_additionalSprites','lCcOk','StartTurnShow','registerCommand','sliceMax','makeSuccess','_skewWholeDuration','Sprite_Damage_createChildSprite','pNrCy','_floatEasing','current\x20target','CriticalHitRateJS','ChantStyle','luzhz','VisuMZ_2_BattleSystemATB','createSeparateDamagePopups','_floatDuration','VisuMZ_3_FrontviewBattleUI','waitForFloat','_back1Sprite','moveToStartPosition','all\x20enemies','_targetGrowX','_jumpDuration','itemEffectGainTp','Sprite_Actor_updateFrame','mainSpriteWidth','Game_Action_setAttack','die','StatusWindowAttachmentBackOffsetY','process_VisuMZ_BattleCore_DamageStyles','Spriteset_Battle_updateActors','startEnemySelection','_methods','_visualHpGauge_JustDied','HsxtE','createHelpWindow','bYrnx','hpHealingFmt','ZXBqC','currentClass','_actionBattlers','getItemDamageAmountTextBattleCore','weatherPower','lastBattleSkill','ActSeq_Movement_MoveToTarget','onEncounter','selectNextCommand','enemy','onGrowEnd','commandName','Oypcf','_commandNameWindow','some','_enemyID','DfqjM','CoreEngine','tgosC','PerformAction','CkyOn','Sprite_Actor_setActorHome','CastCertain','NUM','Sprite_Battler_startMove','getItemDamageAmountLabelOriginal','encounterList','processActorCommandCancelTPB','eVgam','ForceDeath','iOXzh','ActSeq_BattleLog_PopBaseLine','vertCells','setGuard','_animationContainer','Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest','SkipPartyCmd','NewPopupBottom','pQmpN','ActSeq_Impact_Negative','uKXyv','applyEasing','ShowRemovedBuff','RCGcv','HelpEscape','PartyCmd','vOLmV','Sprite_Battler_damageOffsetX','itemEffectAddNormalState','LOkiq','ClearBattleLog','isFlipped','UHhtQ','apply','displayItemMessage','ActSeq_Mechanics_CtbOrder','liaoP','WNlXd','battlerShadowScaleY','bitmapHeight','iLmWV','ActSeq_Impact_ZoomBlurPoint','qjWiE','deactivate','isRightInputMode','autoBattleStyle','round','CriticalHitRate','kZoLn','commandOptions','DistanceY','_motionCount','CommonEventID','svBattlerShadowVisible','swgqQ','JS\x20%1START\x20ACTION','Window_BattleLog_performActionStart','ActSeq_Mechanics_AddBuffDebuff','HelpSkillType','DualWield','scale','performCastAnimation','AsUser','BattleManager_startTurn','LhSSK','Mhjjh','forceMotion','Window_BattleEnemy_show','QLTQw','ActionSequence','bRDmA','_jumpHeight','_jumpWholeDuration','result','commandStyle','XpMtl','actionSplicePoint','ActSeq_Movement_WaitForScale','damageOffsetY','canAttackBattleCore','StxBl','process_VisuMZ_BattleCore_BaseTroops','front\x20base','VisuMZ_3_SideviewBattleUI','requestMotionRefresh','tIRGz','drawItemStatusXPStyle','BoTBS','MIN_SAFE_INTEGER','HomePosJS','startPartyCommandSelection','addState','Xrczz','WWqRw','AutoBattleMsg','move','setBattleCameraPoint','updateRefresh','autoBattleStart','battleStatusWindowAnimationContainer','JS\x20ESCAPE\x20SUCCESS','setupBattleCore','origin','alive\x20opponents\x20not\x20target','addGeneralOptions','processDefeat','CriticalColor','ShowReflect','performCollapse','fnordAddedStates','undecided','changeBattlebacks','PostEndTurnJS','loadBattleback2','Scene_Map_initializeAfter','PostEndBattleJS','battleEffect','_motionSpeed','ActSeq_Angle_WaitForAngle','innerHeight','ActSeq_Animation_WaitForAnimation','VdvmJ','_baseTexture','MwYCr','NCMGf','Game_Enemy_setup','options','ityiP','CriticalDmgFlat','wxIYR','WaitForAngle','xKQvx','addCommand','allowRandomSpeed','skew','onEnemyCancel','textColor','alive\x20actors\x20not\x20user','ActorOffsetX','pushBaseLine','call','match','ArRedRate','_multipliers','PopupOffsetY','AS\x20USER','_createClientArea','vUviq','getLastPluginCommandInterpreter','jknoK','StepDuration','setup','atbInterrupt','ARRAYEVAL','statusWindowRect','ActSeq_Movement_FaceTarget','adjustPosition_ScaleToFit','callUpdateHelp','center','user','DkomN','createDamageSprite','_updateFilterArea','zgdOd','_forcedBattleLayout','TpGaugeOffsetY','_borderPortraitDuration','AutoBattleRect','damageFlat','SuyOb','commandSymbol','windowPadding','refreshBattlerMotions','BgType','updateBorderSprite','PostDamageJS','iNfCc','pop','skills','isCertainHit','clearElementChanges','mmp','updateMain','displayEvasion','all\x20actors','_branch','OMXmu','adjustPosition','AllowCollapse','getEnemyIdWithName','setHelpWindow','updateStaticSvBattlerFrames','AdjustRect','ActSeq_Impact_BlueRedInvert','setupRgbSplitImpactFilter','Game_Battler_onBattleEnd','yWvUi','Sprite_Actor_updateBitmap','globalAlpha','updateBattleProcess','RQkoB','messageSpeed','_lastAction','eraseState','deathStateId','anchorX','nPLsK','_displayBattleCoreTransitionErrorMsg','battleOpacity','VLaha','portraitHue','displayAction','_forcedBattlers','ActSeq_Mechanics_DeathBreak','canMove','ActSeq_Animation_PlayAtCoordinate','rtXaJ','isForOpponentBattleCore','isTurnBased','MAT','zEdYN','concat','BattleVictoryJS','PrioritySortActors','yIphx'];_0x1e75=function(){return _0x4b83e4;};return _0x1e75();}Game_BattleOnceParallelInterpreter['prototype']=Object['create'](Game_Interpreter[_0x4fbf70(0x92c)]),Game_BattleOnceParallelInterpreter[_0x4fbf70(0x92c)][_0x4fbf70(0x631)]=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter[_0x4fbf70(0x92c)][_0x4fbf70(0x609)]=function(_0x2a0a65){const _0x56118f=_0x4fbf70,_0x27fa1b=$dataCommonEvents[_0x2a0a65];_0x27fa1b?this['setup'](_0x27fa1b[_0x56118f(0xa31)],0x0):_0x56118f(0xccb)!==_0x56118f(0xccb)?this[_0x56118f(0xc94)]()&&_0x12da26[_0x56118f(0xae2)][_0x56118f(0xbc2)]['call'](this,_0xbac351,_0x45643b,_0x105107):this[_0x56118f(0x36a)]();},Game_BattleOnceParallelInterpreter[_0x4fbf70(0x92c)][_0x4fbf70(0x36a)]=function(){const _0x32f1a7=_0x4fbf70;if(!SceneManager[_0x32f1a7(0x90d)]())return;SceneManager[_0x32f1a7(0x32c)][_0x32f1a7(0x53c)](this),Game_Interpreter[_0x32f1a7(0x92c)][_0x32f1a7(0x36a)][_0x32f1a7(0xc4a)](this);},Game_BattleOnceParallelInterpreter[_0x4fbf70(0x92c)][_0x4fbf70(0x2af)]=function(_0xfcd62){const _0x1ae9bd=_0x4fbf70;_0xfcd62?this['setup'](_0xfcd62[_0x1ae9bd(0xa31)],0x0):_0x1ae9bd(0x2fa)===_0x1ae9bd(0x986)?this['addPartyCommand']():this[_0x1ae9bd(0x36a)]();},Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x3a5)]=function(){const _0x781d6e=_0x4fbf70;return VisuMZ[_0x781d6e(0xae2)][_0x781d6e(0x837)][_0x781d6e(0xbd7)][_0x781d6e(0x5a9)];},VisuMZ[_0x4fbf70(0xae2)]['Scene_Battle_startPartyCommandSelection']=Scene_Battle['prototype'][_0x4fbf70(0xc18)],Scene_Battle[_0x4fbf70(0x92c)]['startPartyCommandSelection']=function(){const _0x3051e1=_0x4fbf70;this[_0x3051e1(0x3a5)]()?this['onDisabledPartyCommandSelection']():VisuMZ[_0x3051e1(0xae2)][_0x3051e1(0xaa6)][_0x3051e1(0xc4a)](this);},Scene_Battle[_0x4fbf70(0x92c)]['onDisabledPartyCommandSelection']=function(){const _0x3c484d=_0x4fbf70;if(BattleManager['isDTB']())_0x3c484d(0x66e)!==_0x3c484d(0xd36)?this['selectNextCommand']():(_0x5b03a1[_0x3c484d(0xae2)][_0x3c484d(0x53b)]&&_0x5629d1[_0x3c484d(0xae2)][_0x3c484d(0x53b)]['call'](this,_0x6e26a9),_0x56240f[_0x3c484d(0xae2)][_0x3c484d(0x981)](_0x10a01b));else BattleManager[_0x3c484d(0x814)]()&&VisuMZ[_0x3c484d(0xae2)][_0x3c484d(0xaa6)]['call'](this);},VisuMZ['BattleCore'][_0x4fbf70(0x236)]=Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x8cd)],Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x8cd)]=function(){const _0x34fdc8=_0x4fbf70;if(BattleManager[_0x34fdc8(0x814)]()){if(_0x34fdc8(0x2fd)!==_0x34fdc8(0x3c6))this[_0x34fdc8(0x2a2)](),this[_0x34fdc8(0x1dc)]();else{_0x29e831(_0x34fdc8(0x19f)),_0x5a4a83[_0x34fdc8(0x4c5)]();return;}}else{if(_0x34fdc8(0x64d)!==_0x34fdc8(0x9ed))VisuMZ['BattleCore'][_0x34fdc8(0x236)][_0x34fdc8(0xc4a)](this);else{if(!_0xd672bb[_0x34fdc8(0x90d)]())return;if(!_0x57fc4b[_0x34fdc8(0x524)])return;const _0x48d499=_0xfc13c0['getLastPluginCommandInterpreter']();if(!_0x48d499)return;_0x48d499[_0x34fdc8(0x645)]('battleCamera');}}},Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x2a2)]=function(){const _0x4bde72=_0x4fbf70;if(!VisuMZ[_0x4bde72(0xae2)][_0x4bde72(0xa1e)])return;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x4bde72(0xd43)]())return;const _0x46efe4=$gameParty['aliveMembers']()['filter'](_0x26795b=>_0x26795b[_0x4bde72(0xb17)]()&&_0x26795b[_0x4bde72(0x5a1)]());BattleManager[_0x4bde72(0x2f7)]=_0x46efe4[0x0]||null;if(BattleManager[_0x4bde72(0x2f7)]){if(_0x4bde72(0xb52)===_0x4bde72(0x85b)){if(this['_svBattlerData']!==_0x15328e)return this[_0x4bde72(0x36d)];return this[_0x4bde72(0x719)](),this['_svBattlerData'];}else BattleManager[_0x4bde72(0x2f7)][_0x4bde72(0x813)](_0x4bde72(0x21a));}},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x548)]=Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x59f)],Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x59f)]=function(){const _0x29991b=_0x4fbf70;VisuMZ[_0x29991b(0xae2)][_0x29991b(0x548)]['call'](this),this['createActorCommandWindowBattleCore']();},Scene_Battle['prototype'][_0x4fbf70(0x390)]=function(){const _0x210519=_0x4fbf70,_0x2841f1=this[_0x210519(0xd49)];_0x2841f1[_0x210519(0x4c8)]('escape',this['actorCommandEscape'][_0x210519(0x8ff)](this)),_0x2841f1['setHandler']('autoBattle',this[_0x210519(0x2b5)][_0x210519(0x8ff)](this)),_0x2841f1[_0x210519(0x4c8)](_0x210519(0x4be),this['actorCommandSingleSkill'][_0x210519(0x8ff)](this));if(BattleManager[_0x210519(0x814)]()){if(_0x210519(0x357)!==_0x210519(0x357))_0x2479da['BattleCore'][_0x210519(0x787)]['call'](this),this[_0x210519(0xb29)](),this['resetResultSwitches']();else{if(this['isPartyCommandWindowDisabled']()){if(_0x210519(0x45b)!==_0x210519(0x45b)){for(const _0x4d077 of _0x1cb78a){_0x4d077[_0x210519(0xc4b)](_0x5f2ff9);const _0x10db62=_0x4cbfee(_0x5e6ec2['$1'])[_0x210519(0x94a)](',')[_0x210519(0x990)](_0x423091=>_0x3e5c78(_0x423091)['toUpperCase']()[_0x210519(0xcda)]());_0x325863=_0x3d4dcc[_0x210519(0xc9b)](_0x10db62);}!_0x867270['note']['match'](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x2893b7['note']+=_0x210519(0x7ef));;}else delete _0x2841f1[_0x210519(0xa36)][_0x210519(0x5fa)];}else{if(_0x210519(0x45c)!==_0x210519(0x45c)){const _0x429f31=this['findSymbolExt']('skill',_0x4d2ff4[_0x210519(0xd52)]);this[_0x210519(0x76b)](_0x429f31||0x0);}else _0x2841f1[_0x210519(0x4c8)](_0x210519(0x5fa),this[_0x210519(0x9ac)]['bind'](this));}}}},Scene_Battle[_0x4fbf70(0x92c)]['actorCommandEscape']=function(){this['commandEscape']();},Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x2b5)]=function(){const _0x1955e5=_0x4fbf70;BattleManager[_0x1955e5(0x55a)]()['makeAutoBattleActions'](),BattleManager[_0x1955e5(0x530)](),BattleManager[_0x1955e5(0x6c8)](),this['changeInputWindow']();},Scene_Battle['prototype'][_0x4fbf70(0x310)]=function(){const _0x5dc6d4=_0x4fbf70,_0x57a8ae=BattleManager[_0x5dc6d4(0x206)](),_0x12e47f=this[_0x5dc6d4(0xd49)][_0x5dc6d4(0x3e9)]();_0x57a8ae[_0x5dc6d4(0x26c)](_0x12e47f),BattleManager['actor']()[_0x5dc6d4(0x427)]($dataSkills[_0x12e47f]),this[_0x5dc6d4(0xb4d)]();},Scene_Battle['prototype'][_0x4fbf70(0x9ac)]=function(){const _0x4be8f7=_0x4fbf70;if(this[_0x4be8f7(0x4cd)]()){if('OOdSp'==='OOdSp')this[_0x4be8f7(0xd00)]();else{if(!_0x40cd29['isSceneBattle']())return;const _0x4dc411=_0x4a9240['getLastPluginCommandInterpreter']();if(!_0x4dc411)return;_0x4dc411[_0x4be8f7(0x645)]('battleMove');}}else this['processActorCommandCancelTPB']();},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xa1e)]=![],Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x4cd)]=function(){const _0x1a9015=_0x4fbf70;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x1a9015(0xd43)]())return![];else{if(!VisuMZ[_0x1a9015(0xae2)][_0x1a9015(0xa1e)])return![];const _0x33f092=$gameParty[_0x1a9015(0x1c3)]()[_0x1a9015(0xa29)](_0x2de116=>_0x2de116[_0x1a9015(0xb17)]()&&_0x2de116[_0x1a9015(0x5a1)]());return _0x33f092[_0x1a9015(0x9d2)]>0x0&&BattleManager[_0x1a9015(0x55a)]()!==_0x33f092[_0x33f092[_0x1a9015(0x9d2)]-0x1];}},Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0xd00)]=function(){const _0x53861a=_0x4fbf70,_0x2e7057=BattleManager[_0x53861a(0x55a)](),_0xf55025=_0x2e7057[_0x53861a(0xb81)]();if(_0xf55025)_0xf55025[_0x53861a(0x551)]();const _0x5bfc5e=$gameParty[_0x53861a(0x1c3)]()['filter'](_0x293880=>_0x293880[_0x53861a(0xb17)]()&&_0x293880[_0x53861a(0x5a1)]()),_0x1c7c70=_0x5bfc5e[_0x53861a(0xd48)](_0x2e7057),_0x4ce669=_0x5bfc5e[_0x1c7c70+0x1];BattleManager[_0x53861a(0x2f7)]=_0x4ce669||null;if(_0x4ce669)_0x4ce669[_0x53861a(0x813)]('inputting');_0x2e7057['setActionState'](_0x53861a(0xc2c)),this[_0x53861a(0xa1b)]();},Scene_Battle[_0x4fbf70(0x92c)]['processActorCommandCancelTPB']=function(){const _0x5bf00d=_0x4fbf70;this[_0x5bf00d(0xa06)]['setup'](),this[_0x5bf00d(0xd49)][_0x5bf00d(0x5f4)]();if(!VisuMZ[_0x5bf00d(0xae2)]['TpbActiveChangeEnabled'])return;if(Imported[_0x5bf00d(0x326)]&&BattleManager[_0x5bf00d(0xd43)]())return;if(BattleManager[_0x5bf00d(0x2f7)]){if(_0x5bf00d(0xbbc)===_0x5bf00d(0xbbc)){BattleManager[_0x5bf00d(0x2f7)]['setActionState'](_0x5bf00d(0xc2c));const _0x3ef777=BattleManager['_currentActor'][_0x5bf00d(0xb81)]();if(_0x3ef777)_0x3ef777[_0x5bf00d(0x551)]();}else{this['_cacheTextWidth']=_0xd58768;const _0x3d1190=this['name'](),_0x3e2b3b=this[_0x5bf00d(0x742)](),_0x3fa49c=_0x80bf94[_0x5bf00d(0x92c)][_0x5bf00d(0x445)]();this[_0x5bf00d(0xa88)](),this['bitmap'][_0x5bf00d(0xb36)](),this[_0x5bf00d(0x597)][_0x5bf00d(0x73c)](_0x3d1190,0x0,0x0,_0x3e2b3b,_0x3fa49c,_0x5bf00d(0xc5c));}}BattleManager['_currentActor']=null;},VisuMZ[_0x4fbf70(0xae2)]['Scene_Battle_createHelpWindow']=Scene_Battle[_0x4fbf70(0x92c)]['createHelpWindow'],Scene_Battle['prototype'][_0x4fbf70(0xba7)]=function(){const _0x4a2864=_0x4fbf70;VisuMZ[_0x4a2864(0xae2)][_0x4a2864(0x679)][_0x4a2864(0xc4a)](this),this[_0x4a2864(0x90c)]();},Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x90c)]=function(){const _0x322845=_0x4fbf70;this[_0x322845(0xd49)][_0x322845(0xc7c)](this[_0x322845(0x642)]),this[_0x322845(0xa06)]['setHelpWindow'](this[_0x322845(0x642)]);},Scene_Battle[_0x4fbf70(0x92c)]['battleLayoutStyle']=function(){const _0x5bbe9b=_0x4fbf70;if($gameTemp[_0x5bbe9b(0xc62)]!==undefined){if(_0x5bbe9b(0x920)!=='qqgKG'){if(!_0x189827[_0x5bbe9b(0xae2)][_0x5bbe9b(0x837)][_0x5bbe9b(0x835)][_0x5bbe9b(0x7f2)])return _0x2366af;const _0x4e940e=/<BYPASS SOFT DAMAGE CAP>/i;if(this['item']()['note'][_0x5bbe9b(0xc4b)](_0x4e940e))return _0x3b291c;if(this[_0x5bbe9b(0x928)]()[_0x5bbe9b(0xabd)]()[_0x5bbe9b(0xbb8)](_0x8184f6=>_0x8184f6&&_0x8184f6['note'][_0x5bbe9b(0xc4b)](_0x4e940e)))return _0x2dd240;const _0x2faaf2=_0x4ec41d<0x0?-0x1:0x1;_0x337c72=_0x2d6af[_0x5bbe9b(0x77e)](_0x13a051);let _0x15b408=this[_0x5bbe9b(0x928)]()[_0x5bbe9b(0xb26)]();this[_0x5bbe9b(0x98d)]()['note']['match'](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x15b408+=_0x4ac4d2(_0x272d91['$1'])/0x64);_0x15b408=_0x15b408[_0x5bbe9b(0x6b4)](0.01,0x1);const _0x33d1b0=this[_0x5bbe9b(0xa08)](),_0x36efa0=_0x15b408*_0x33d1b0;if(_0x16b314>_0x36efa0&&_0x33d1b0>_0x36efa0){_0x49849b-=_0x36efa0;const _0x4b96cc=_0x94b92c[_0x5bbe9b(0xae2)][_0x5bbe9b(0x837)][_0x5bbe9b(0x835)][_0x5bbe9b(0xcdf)],_0x112668=_0x2c2ddb[_0x5bbe9b(0x6f0)](0x1-_0xa9fc18/((_0x33d1b0-_0x36efa0)*_0x4b96cc+_0x46e618),0.01);_0x584e3d*=_0x112668,_0x139eb0+=_0x36efa0;}return _0x2bafeb*_0x2faaf2;}else return $gameTemp['_forcedBattleLayout'];}if(this[_0x5bbe9b(0xb6d)])return this[_0x5bbe9b(0xb6d)];return this[_0x5bbe9b(0xb6d)]=VisuMZ[_0x5bbe9b(0xae2)][_0x5bbe9b(0x837)][_0x5bbe9b(0x41c)]['Style'][_0x5bbe9b(0x39e)]()[_0x5bbe9b(0xcda)](),this['_battleLayoutStyle']===_0x5bbe9b(0x88c)&&!Imported['VisuMZ_3_SideviewBattleUI']&&(this[_0x5bbe9b(0xb6d)]=_0x5bbe9b(0x23c)),this[_0x5bbe9b(0xb6d)]===_0x5bbe9b(0x8e8)&&!Imported['VisuMZ_3_FrontviewBattleUI']&&(this[_0x5bbe9b(0xb6d)]='default'),this[_0x5bbe9b(0xb6d)];},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x2e3)]=Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0xabf)],Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0xabf)]=function(){const _0x446367=_0x4fbf70,_0x8fafc5=this[_0x446367(0x3c7)]();switch(_0x8fafc5){case _0x446367(0xa31):return this[_0x446367(0x605)](Math[_0x446367(0x6f0)](0x1,$gameParty['maxBattleMembers']()),!![]);break;default:return VisuMZ[_0x446367(0xae2)][_0x446367(0x2e3)][_0x446367(0xc4a)](this);break;}},VisuMZ[_0x4fbf70(0xae2)]['Scene_Battle_helpWindowRect']=Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0xd6d)],Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0xd6d)]=function(){const _0x440aab=_0x4fbf70,_0x2a3f82=this[_0x440aab(0x3c7)]();switch(_0x2a3f82){case _0x440aab(0x972):return this[_0x440aab(0x3bf)]();break;case'default':case _0x440aab(0xa31):case'xp':case _0x440aab(0x1c0):default:return VisuMZ['BattleCore'][_0x440aab(0x7ab)][_0x440aab(0xc4a)](this);break;}},Scene_Battle[_0x4fbf70(0x92c)]['statusWindowRect']=function(){const _0x1d6ddb=_0x4fbf70,_0x4329cc=this[_0x1d6ddb(0x3c7)]();switch(_0x4329cc){case'xp':case'portrait':return this[_0x1d6ddb(0x6ac)]();break;case _0x1d6ddb(0x972):return this[_0x1d6ddb(0x4ed)]();break;case'default':case'list':default:return this[_0x1d6ddb(0x393)]();break;}},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xae9)]=Scene_Battle['prototype'][_0x4fbf70(0x4e5)],Scene_Battle[_0x4fbf70(0x92c)]['partyCommandWindowRect']=function(){const _0x1c691f=_0x4fbf70,_0x350add=this[_0x1c691f(0x3c7)]();switch(_0x350add){case'xp':case'portrait':return this[_0x1c691f(0x30c)]();break;case'border':return this[_0x1c691f(0x663)]();case _0x1c691f(0x23c):case'list':default:return this[_0x1c691f(0xad7)]();break;}},Scene_Battle['prototype'][_0x4fbf70(0xad7)]=function(){const _0x77aa0e=_0x4fbf70,_0xfa0837=VisuMZ[_0x77aa0e(0xae2)][_0x77aa0e(0x837)][_0x77aa0e(0x41c)],_0x5557cc=_0xfa0837[_0x77aa0e(0x861)]||0xc0,_0x50fbf1=this[_0x77aa0e(0xabf)](),_0x10915e=this[_0x77aa0e(0xbea)]()?Graphics[_0x77aa0e(0x2d5)]-_0x5557cc:0x0,_0x2dc996=Graphics[_0x77aa0e(0xa30)]-_0x50fbf1;return new Rectangle(_0x10915e,_0x2dc996,_0x5557cc,_0x50fbf1);},Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x86a)]=function(){return this['partyCommandWindowRect']();},VisuMZ[_0x4fbf70(0xae2)]['Scene_Battle_updateStatusWindowPosition']=Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x3d2)],Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x3d2)]=function(){const _0x342f49=_0x4fbf70,_0x4ee0aa=this[_0x342f49(0x3c7)]();switch(_0x4ee0aa){case'xp':case _0x342f49(0x1c0):case'border':break;case _0x342f49(0x23c):case'list':default:VisuMZ[_0x342f49(0xae2)][_0x342f49(0x882)][_0x342f49(0xc4a)](this);break;}},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x9cd)]=Scene_Battle['prototype'][_0x4fbf70(0x381)],Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x381)]=function(){const _0x46c2da=_0x4fbf70;VisuMZ['BattleCore'][_0x46c2da(0x9cd)]['call'](this),this[_0x46c2da(0x7d6)]();},VisuMZ['BattleCore'][_0x4fbf70(0x388)]=Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0xba3)],Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0xba3)]=function(){const _0x123a2f=_0x4fbf70;VisuMZ[_0x123a2f(0xae2)][_0x123a2f(0x388)]['call'](this),this[_0x123a2f(0x569)][_0x123a2f(0xb2e)](),this[_0x123a2f(0x7d6)]();},Scene_Battle['prototype'][_0x4fbf70(0x7d6)]=function(){const _0x3f954c=_0x4fbf70,_0x554e5a=this['battleLayoutStyle']();['xp',_0x3f954c(0x1c0),_0x3f954c(0x972)][_0x3f954c(0x6e3)](_0x554e5a)&&this[_0x3f954c(0xd49)][_0x3f954c(0x5f4)](),(_0x554e5a===_0x3f954c(0x972)||this['isSkillItemWindowsMiddle']())&&(this[_0x3f954c(0x64b)]['close'](),this[_0x3f954c(0x32a)]['close']());},VisuMZ[_0x4fbf70(0xae2)]['Scene_Battle_onActorOk']=Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x6a3)],Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x6a3)]=function(){const _0x139841=_0x4fbf70;VisuMZ[_0x139841(0xae2)]['Scene_Battle_onActorOk'][_0x139841(0xc4a)](this),this[_0x139841(0x77b)]();},Scene_Battle['prototype'][_0x4fbf70(0x596)]=function(){const _0x51efbc=_0x4fbf70;return[_0x51efbc(0x3f3),_0x51efbc(0x73a),_0x51efbc(0x4be)][_0x51efbc(0x6e3)](this[_0x51efbc(0xd49)]['currentSymbol']());},VisuMZ[_0x4fbf70(0xae2)]['Scene_Battle_onActorCancel']=Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x286)],Scene_Battle['prototype']['onActorCancel']=function(){const _0x5727da=_0x4fbf70;this[_0x5727da(0x596)]()?(this['_statusWindow'][_0x5727da(0x9c9)](),this[_0x5727da(0xa2c)]['hide'](),this['_actorCommandWindow'][_0x5727da(0xd3e)]()):'UNfru'===_0x5727da(0x987)?(_0x3cf833=this[_0x5727da(0x80d)][_0x5727da(0x9aa)]??_0x14508e,_0x52b7be=this['_battler'][_0x5727da(0x5f0)]??_0x1b383b):VisuMZ[_0x5727da(0xae2)]['Scene_Battle_onActorCancel']['call'](this),this['cancelTargetSelectionVisibility']();},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x8f6)]=Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x3bc)],Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x3bc)]=function(){const _0x4be432=_0x4fbf70,_0x2a6222=BattleManager[_0x4be432(0x206)]();_0x2a6222[_0x4be432(0x594)](this[_0x4be432(0x569)][_0x4be432(0xbb3)]()),this[_0x4be432(0x569)][_0x4be432(0x6ce)](),VisuMZ['BattleCore']['Scene_Battle_onEnemyOk']['call'](this),this[_0x4be432(0x77b)]();},VisuMZ[_0x4fbf70(0xae2)]['Scene_Battle_onEnemyCancel']=Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0xc45)],Scene_Battle[_0x4fbf70(0x92c)]['onEnemyCancel']=function(){const _0xac86fd=_0x4fbf70;if(this[_0xac86fd(0x596)]()){if(_0xac86fd(0x528)==='lKwGV')this[_0xac86fd(0x9e4)][_0xac86fd(0x9c9)](),this[_0xac86fd(0x569)][_0xac86fd(0x7aa)](),this[_0xac86fd(0xd49)][_0xac86fd(0xd3e)]();else{const _0x34e052=_0x411155[_0xac86fd(0x6fe)](this[_0xac86fd(0x2e7)]),_0x19b8a3=_0x59cb6c[_0xac86fd(0xb48)][_0x34e052];if(!_0x19b8a3)return this[_0xac86fd(0xbc3)]();const _0x22ae00=_0xac86fd(0x317)[_0xac86fd(0x946)](this[_0xac86fd(0x2e7)][_0xac86fd(0x36f)][_0xac86fd(0x2ff)]),_0x15726d=[null,_0x1ee586['hp'],_0x16e9d5['mp'],_0x53d173['hp'],_0x179d9c['mp'],_0x181a97['hp'],_0x18f73c['mp']][this['_item'][_0xac86fd(0x36f)]['type']];return _0x19b8a3[_0x22ae00][_0xac86fd(0x946)](_0x15726d);}}else VisuMZ[_0xac86fd(0xae2)][_0xac86fd(0x77d)]['call'](this);this[_0xac86fd(0x43d)](),this[_0xac86fd(0x569)][_0xac86fd(0x6ce)]();},Scene_Battle[_0x4fbf70(0x92c)]['okTargetSelectionVisibility']=function(){const _0x4d615c=_0x4fbf70,_0x2d211a=this[_0x4d615c(0x3c7)]();if(_0x2d211a==='border'||this[_0x4d615c(0x4eb)]()){if(_0x4d615c(0x2de)!==_0x4d615c(0x97b))this[_0x4d615c(0x64b)][_0x4d615c(0xcc0)](),this[_0x4d615c(0x64b)][_0x4d615c(0xa4a)]&&this[_0x4d615c(0x64b)][_0x4d615c(0x9c9)](),this[_0x4d615c(0x32a)][_0x4d615c(0xcc0)](),this['_itemWindow']['active']&&this['_itemWindow'][_0x4d615c(0x9c9)]();else{if(!_0x56d537['BattleCore'][_0x4d615c(0x837)][_0x4d615c(0x202)]['ShowTpDmg'])return;_0x3a04d3['BattleCore']['Window_BattleLog_displayTpDamage']['call'](this,_0x27ec17);}}},Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x43d)]=function(){const _0x11b22f=_0x4fbf70,_0x2566d5=this[_0x11b22f(0x3c7)]();['xp',_0x11b22f(0x1c0),_0x11b22f(0x972)][_0x11b22f(0x6e3)](_0x2566d5)&&this['_actorCommandWindow'][_0x11b22f(0xcc0)](),this['okTargetSelectionVisibility']();},Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x393)]=function(){const _0x121cba=_0x4fbf70,_0x2fdccc=VisuMZ[_0x121cba(0xae2)]['Settings'][_0x121cba(0x41c)],_0x453288=Window_BattleStatus[_0x121cba(0x92c)]['extraHeight'](),_0x366a6a=Graphics['boxWidth']-(_0x2fdccc[_0x121cba(0x861)]||0xc0),_0x4614d1=this['windowAreaHeight']()+_0x453288,_0x4922c2=this['isRightInputMode']()?0x0:Graphics['boxWidth']-_0x366a6a,_0x328e5c=Graphics['boxHeight']-_0x4614d1+_0x453288;return new Rectangle(_0x4922c2,_0x328e5c,_0x366a6a,_0x4614d1);},Scene_Battle[_0x4fbf70(0x92c)]['statusWindowRectXPStyle']=function(){const _0x4bad2a=_0x4fbf70,_0x56932a=Window_BattleStatus[_0x4bad2a(0x92c)][_0x4bad2a(0x8cc)](),_0x35839c=Graphics[_0x4bad2a(0x2d5)],_0x2f924c=this[_0x4bad2a(0xabf)]()+_0x56932a,_0x3ef080=0x0,_0x4b58d5=Graphics[_0x4bad2a(0xa30)]-_0x2f924c+_0x56932a;return new Rectangle(_0x3ef080,_0x4b58d5,_0x35839c,_0x2f924c);},Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x30c)]=function(){const _0x5a68e2=_0x4fbf70,_0x399874=Graphics[_0x5a68e2(0x2d5)]/0x2,_0x2e2d7e=this[_0x5a68e2(0x605)](VisuMZ['BattleCore'][_0x5a68e2(0x837)][_0x5a68e2(0x41c)][_0x5a68e2(0x7f6)],!![]),_0xc304de=Math[_0x5a68e2(0xbec)]((Graphics[_0x5a68e2(0x2d5)]-_0x399874)/0x2),_0x251cb1=Graphics[_0x5a68e2(0xa30)]-_0x2e2d7e-this[_0x5a68e2(0x6ac)]()[_0x5a68e2(0x389)];return new Rectangle(_0xc304de,_0x251cb1,_0x399874,_0x2e2d7e);},Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x3bf)]=function(){const _0x4fa458=_0x4fbf70,_0x3e93b3=Graphics[_0x4fa458(0x606)],_0x2b0172=Math[_0x4fa458(0xbec)]((Graphics[_0x4fa458(0x2d5)]-_0x3e93b3)/0x2),_0x563c80=this[_0x4fa458(0x23f)](),_0x4d2547=(Graphics[_0x4fa458(0x389)]-Graphics[_0x4fa458(0xa30)])/-0x2;return new Rectangle(_0x2b0172,_0x4d2547,_0x3e93b3,_0x563c80);},Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x4ed)]=function(){const _0x45228d=_0x4fbf70,_0x1fa55d=Graphics[_0x45228d(0x606)],_0x3bcca0=Math['round']((Graphics[_0x45228d(0x2d5)]-_0x1fa55d)/0x2),_0x9842de=this[_0x45228d(0x605)](0x4,!![]),_0x4897e2=Graphics[_0x45228d(0xa30)]-_0x9842de+(Graphics[_0x45228d(0x389)]-Graphics[_0x45228d(0xa30)])/0x2;return new Rectangle(_0x3bcca0,_0x4897e2,_0x1fa55d,_0x9842de);},Scene_Battle[_0x4fbf70(0x92c)]['partyCommandWindowRectBorderStyle']=function(){const _0x2896cc=_0x4fbf70,_0x44b3b2=Math['floor'](Graphics[_0x2896cc(0x606)]/0x3),_0x217567=this[_0x2896cc(0xbea)]()?(Graphics[_0x2896cc(0x606)]+Graphics[_0x2896cc(0x2d5)])/0x2-_0x44b3b2:(Graphics['width']-Graphics[_0x2896cc(0x2d5)])/-0x2,_0x4d27e9=this[_0x2896cc(0x3bf)](),_0x258d8c=_0x4d27e9['y']+_0x4d27e9['height'],_0x467abf=this['statusWindowRectBorderStyle'](),_0x3292df=_0x467abf['y']-_0x258d8c;return new Rectangle(_0x217567,_0x258d8c,_0x44b3b2,_0x3292df);},Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x494)]=function(){const _0x5bbe51=_0x4fbf70,_0x58d9cd=Math['ceil'](Graphics[_0x5bbe51(0x606)]/0x3),_0x17cd48=Math[_0x5bbe51(0xbec)]((Graphics[_0x5bbe51(0x2d5)]-_0x58d9cd)/0x2),_0x40e5de=this['partyCommandWindowRectBorderStyle'](),_0x1b98b3=_0x40e5de['y'],_0x58eeb5=_0x40e5de[_0x5bbe51(0x389)];return new Rectangle(_0x17cd48,_0x1b98b3,_0x58d9cd,_0x58eeb5);},Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x401)]=function(){const _0x4e0eb8=_0x4fbf70;this[_0x4e0eb8(0x66c)]['y']=this[_0x4e0eb8(0x642)]['y']+this[_0x4e0eb8(0x642)]['height'],this[_0x4e0eb8(0xbea)]()?this[_0x4e0eb8(0x3c7)]()==='border'?'BqtkZ'==='qnPdH'?(this[_0x4e0eb8(0x265)]=!![],this[_0x4e0eb8(0x7d8)](_0x4e0eb8(0xc9c)),_0x2c2a9b[_0x4e0eb8(0xae2)][_0x4e0eb8(0x1b5)]['call'](this),this[_0x4e0eb8(0x6cc)](_0x4e0eb8(0x7a3))):this[_0x4e0eb8(0x66c)]['x']=0x8:this[_0x4e0eb8(0x66c)]['x']=-this[_0x4e0eb8(0x66c)][_0x4e0eb8(0x606)]-0x4:_0x4e0eb8(0xb11)!==_0x4e0eb8(0xb11)?this[_0x4e0eb8(0x349)]=_0x43605d[_0x4e0eb8(0x39e)]()[_0x4e0eb8(0xcda)]():this[_0x4e0eb8(0x66c)]['x']=Graphics['width']-(Graphics[_0x4e0eb8(0x606)]-Graphics[_0x4e0eb8(0x2d5)])/0x2-this[_0x4e0eb8(0x66c)][_0x4e0eb8(0x606)]-0x4;},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x91a)]=Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x29e)],Scene_Battle['prototype'][_0x4fbf70(0x29e)]=function(){const _0xfa8ccf=_0x4fbf70;if(this[_0xfa8ccf(0x3c7)]()===_0xfa8ccf(0x972))return this['skillItemWindowRectBorderStyle']();else{if(this[_0xfa8ccf(0x4eb)]())return this[_0xfa8ccf(0xd1b)]();else{if(_0xfa8ccf(0x6c0)==='Dnerv')return VisuMZ[_0xfa8ccf(0xae2)][_0xfa8ccf(0x91a)]['call'](this);else{if(this[_0xfa8ccf(0x631)][_0xfa8ccf(0x27a)]===_0xfa8ccf(0x721))return;if(this[_0xfa8ccf(0x830)]<=0x0)return;const _0x1bf8a2=this['_opacityDuration'],_0x20e247=this[_0xfa8ccf(0x74e)],_0x14eb24=this['_opacityEasing'];_0x2fdb41[_0xfa8ccf(0xcaf)]?this[_0xfa8ccf(0x853)]=this[_0xfa8ccf(0xbd3)](this['opacity'],this[_0xfa8ccf(0x4c4)],_0x1bf8a2,_0x20e247,_0x14eb24):this['opacity']=(this[_0xfa8ccf(0x853)]*(_0x1bf8a2-0x1)+this['_targetOpacity'])/_0x1bf8a2;this[_0xfa8ccf(0x830)]--;if(this[_0xfa8ccf(0x830)]<=0x0)this[_0xfa8ccf(0x6df)]();}}}},VisuMZ[_0x4fbf70(0xae2)]['Scene_Battle_itemWindowRect']=Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x285)],Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x285)]=function(){const _0x2bb943=_0x4fbf70;if(this['battleLayoutStyle']()==='border'){if(_0x2bb943(0xc37)===_0x2bb943(0xc37))return this[_0x2bb943(0x494)]();else{const _0x36ffdd=this[_0x2bb943(0x646)],_0x21166c=_0x36ffdd['globalAlpha'];_0x5d05cb=_0x1386f1||0xffffffff;let _0xc35041=_0xf25388,_0x4cfc52=_0x2c58a5[_0x2bb943(0xbec)](_0x3e982d+0x18/0x2+this[_0x2bb943(0x31d)]*0.35);_0x124d6b===_0x2bb943(0xc5c)&&(_0xc35041+=_0x5b10d0/0x2),_0x139c14==='right'&&(_0xc35041+=_0x26eeda),_0x36ffdd[_0x2bb943(0x5ba)](),_0x36ffdd[_0x2bb943(0xadf)]=this[_0x2bb943(0x4a0)](),_0x36ffdd[_0x2bb943(0x5e6)]=_0x2aa444,_0x36ffdd[_0x2bb943(0x9f2)]=_0x2bb943(0x953),_0x36ffdd[_0x2bb943(0xc84)]=0x1,this['_drawTextOutline'](_0x149965,_0xc35041,_0x4cfc52,_0x5f33a9),_0x36ffdd[_0x2bb943(0xc84)]=_0x21166c,this[_0x2bb943(0xa66)](_0x868d6,_0xc35041,_0x4cfc52,_0x1559a9),_0x36ffdd['restore'](),this[_0x2bb943(0xc38)][_0x2bb943(0x7b2)]();}}else{if(this[_0x2bb943(0x4eb)]()){if(_0x2bb943(0x65c)===_0x2bb943(0x910))_0x569e95[_0x2bb943(0xb94)]?this['_forcedBattleLayout']=_0x2bb943(0x8e8):this[_0x2bb943(0xc62)]=_0x2bb943(0x23c);else return this['skillItemWindowRectMiddle']();}else return VisuMZ['BattleCore'][_0x2bb943(0x6c9)][_0x2bb943(0xc4a)](this);}},Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x4eb)]=function(){const _0x3cba4b=_0x4fbf70;return VisuMZ[_0x3cba4b(0xae2)]['Settings'][_0x3cba4b(0x41c)]['SkillItemMiddleLayout'];},Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0xd1b)]=function(){const _0x153877=_0x4fbf70,_0xc4eb42=Sprite_Button[_0x153877(0x92c)][_0x153877(0x490)]()*0x2+0x4;let _0x451f94=Graphics[_0x153877(0x2d5)]-_0xc4eb42;Imported[_0x153877(0xcaf)]&&SceneManager[_0x153877(0x7dd)]()&&(_0x451f94+=_0xc4eb42);const _0x5d6b8b=this['helpAreaBottom'](),_0x490bdd=Graphics[_0x153877(0xa30)]-_0x5d6b8b-this[_0x153877(0xc58)]()[_0x153877(0x389)]+Window_BattleStatus[_0x153877(0x92c)]['extraHeight'](),_0x31cd50=0x0;return new Rectangle(_0x31cd50,_0x5d6b8b,_0x451f94,_0x490bdd);},Scene_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x797)]=function(){const _0x54e792=_0x4fbf70;if(!VisuMZ[_0x54e792(0xae2)][_0x54e792(0x837)][_0x54e792(0x73f)][_0x54e792(0x7d4)])return;this[_0x54e792(0x196)]=new Sprite(),this[_0x54e792(0x196)]['x']=this[_0x54e792(0x676)]['x'],this[_0x54e792(0x196)]['y']=this['_windowLayer']['y'];const _0x122ada=this[_0x54e792(0x8a6)][_0x54e792(0xd48)](this[_0x54e792(0x676)]);this[_0x54e792(0x93a)](this[_0x54e792(0x196)],_0x122ada);for(let _0x30104b=0x0;_0x30104b<0x8;_0x30104b++){const _0x3463a9=new Window_EnemyName(_0x30104b);this[_0x54e792(0x196)][_0x54e792(0x52a)](_0x3463a9);}},Sprite_Battler[_0x4fbf70(0xc33)]=VisuMZ[_0x4fbf70(0xae2)]['Settings'][_0x4fbf70(0x410)][_0x4fbf70(0xafd)],VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x60c)]=Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0xa77)],Sprite_Battler[_0x4fbf70(0x92c)]['initMembers']=function(){const _0x16561d=_0x4fbf70;VisuMZ['BattleCore'][_0x16561d(0x60c)][_0x16561d(0xc4a)](this),this[_0x16561d(0xa7c)]();if(this['constructor']===Sprite_Enemy)this[_0x16561d(0x8df)]();this['createDistortionSprite']();},Sprite_Battler['prototype']['initMembersBattleCore']=function(){const _0x2c52cb=_0x4fbf70;this[_0x2c52cb(0xd6b)]=0x0,this[_0x2c52cb(0x571)]=0x0,this[_0x2c52cb(0x6c4)]=0x0,this[_0x2c52cb(0x1b2)]=0x0,this[_0x2c52cb(0xb93)]=0x0,this['_floatWholeDuration']=0x0,this[_0x2c52cb(0xb8c)]='Linear',this[_0x2c52cb(0xc05)]=0x0,this['_jumpMaxHeight']=0x0,this[_0x2c52cb(0xb9a)]=0x0,this[_0x2c52cb(0xc06)]=0x0,this[_0x2c52cb(0x4c4)]=0xff,this[_0x2c52cb(0x830)]=0x0,this[_0x2c52cb(0x74e)]=0x0,this[_0x2c52cb(0x9e9)]=_0x2c52cb(0x60a),this['_currentAngle']=0x0,this[_0x2c52cb(0x8a7)]=0x0,this[_0x2c52cb(0xce7)]=0x0,this['_angleWholeDuration']=0x0,this[_0x2c52cb(0x50a)]='Linear',this[_0x2c52cb(0x373)]=!![],this[_0x2c52cb(0x97a)]=0x0,this[_0x2c52cb(0x2e6)]=0x0,this[_0x2c52cb(0x614)]=0x0,this['_targetSkewY']=0x0,this['_skewDuration']=0x0,this[_0x2c52cb(0xb89)]=0x0,this[_0x2c52cb(0x72d)]='Linear',this[_0x2c52cb(0x506)]=0x1,this[_0x2c52cb(0x31b)]=0x1,this[_0x2c52cb(0xb99)]=0x1,this[_0x2c52cb(0x24b)]=0x1,this[_0x2c52cb(0x925)]=0x0,this[_0x2c52cb(0x7e6)]=0x0,this[_0x2c52cb(0x1e7)]=_0x2c52cb(0x60a),this[_0x2c52cb(0x46c)]=0x1,this['_targetHomeX']=0x0,this[_0x2c52cb(0x449)]=0x0,this[_0x2c52cb(0x306)]=0x0,this[_0x2c52cb(0x2cc)]=0x0,this[_0x2c52cb(0x5ce)]='Linear',this[_0x2c52cb(0x346)]=0x0,this['_shakeFlinchPower']=0x0;},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x8df)]=function(){const _0x44ff8d=_0x4fbf70;this['_shadowSprite']=new Sprite(),this[_0x44ff8d(0x432)][_0x44ff8d(0x597)]=ImageManager['loadSystem'](_0x44ff8d(0x49f)),this['_shadowSprite'][_0x44ff8d(0x597)][_0x44ff8d(0x3a9)]=VisuMZ[_0x44ff8d(0xae2)][_0x44ff8d(0x837)][_0x44ff8d(0x410)]['SmoothImage'],this[_0x44ff8d(0x432)][_0x44ff8d(0x951)]['x']=0.5,this['_shadowSprite'][_0x44ff8d(0x951)]['y']=0.5,this[_0x44ff8d(0x432)]['y']=-0x2,this['_shadowSprite'][_0x44ff8d(0x737)]=![],this[_0x44ff8d(0x52a)](this[_0x44ff8d(0x432)]);},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0xcbb)]=function(){const _0x298152=_0x4fbf70;this['_distortionSprite']=new Sprite(),this[_0x298152(0x2be)][_0x298152(0x951)]['x']=0.5,this[_0x298152(0x2be)]['anchor']['y']=0.5,this[_0x298152(0x52a)](this[_0x298152(0x2be)]);},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x451)]=function(){const _0x36dd61=_0x4fbf70;if(!this['_distortionSprite'])return;if(this['_shadowSprite']){if(_0x36dd61(0x60d)===_0x36dd61(0x60d)){const _0x571306=this[_0x36dd61(0x2b7)](this[_0x36dd61(0x2be)]);this[_0x36dd61(0x93a)](this[_0x36dd61(0x432)],_0x571306),this[_0x36dd61(0x28d)]();}else{if(this[_0x36dd61(0xc64)]>0x0){const _0x24ad22=this[_0x36dd61(0xc64)],_0x59bdee=this[_0x36dd61(0x46d)];_0x59bdee['x']=(_0x59bdee['x']*(_0x24ad22-0x1)+this[_0x36dd61(0x97d)])/_0x24ad22,_0x59bdee[_0x36dd61(0x853)]=(_0x59bdee[_0x36dd61(0x853)]*(_0x24ad22-0x1)+0xff)/_0x24ad22,this['_borderPortraitDuration']--;}}}this[_0x36dd61(0xcd7)]&&this['_distortionSprite']['addChild'](this[_0x36dd61(0xcd7)]),this[_0x36dd61(0x651)]&&this[_0x36dd61(0x2be)]['addChild'](this[_0x36dd61(0x651)]),this[_0x36dd61(0xb1b)]&&(_0x36dd61(0x70c)!==_0x36dd61(0x70c)?this[_0x36dd61(0x4cd)]()?this[_0x36dd61(0xd00)]():this[_0x36dd61(0xbc5)]():this['_distortionSprite'][_0x36dd61(0x52a)](this['_mainSprite'])),this[_0x36dd61(0x1ea)]&&this['_distortionSprite'][_0x36dd61(0x52a)](this[_0x36dd61(0x1ea)]),this[_0x36dd61(0x89e)]&&this['_distortionSprite'][_0x36dd61(0x52a)](this[_0x36dd61(0x89e)]);},Sprite_Battler['prototype']['updateShadowVisibility']=function(){const _0x1a544d=_0x4fbf70;if(!this[_0x1a544d(0x432)])return;if(this['_battler']&&this[_0x1a544d(0x80d)][_0x1a544d(0xbf3)]()){const _0x7717f6=this[_0x1a544d(0x432)][_0x1a544d(0x597)];this[_0x1a544d(0x432)][_0x1a544d(0x782)](0x0,0x0,_0x7717f6[_0x1a544d(0x606)],_0x7717f6[_0x1a544d(0x389)]);}else'hfPHN'===_0x1a544d(0x711)?(_0x291ade['forceAction'](_0x296515[0x2],_0x57ff92[0x3]),_0x2e9aa5[_0x1a544d(0x28f)](_0x69e0f8)):this['_shadowSprite'][_0x1a544d(0x782)](0x0,0x0,0x0,0x0);},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0xb7e)]=function(){const _0x3ea7ad=_0x4fbf70;if(SceneManager['isSceneBattle']())return SceneManager[_0x3ea7ad(0x32c)]['_spriteset'][_0x3ea7ad(0x5e0)];else{if(_0x3ea7ad(0x514)===_0x3ea7ad(0x26f)){if(this['_floatDuration']<=0x0)return;const _0x20b748=this[_0x3ea7ad(0xb93)],_0x387c57=this[_0x3ea7ad(0xb33)],_0x536182=this[_0x3ea7ad(0xb8c)];_0x56c9bb[_0x3ea7ad(0xcaf)]?this[_0x3ea7ad(0x6c4)]=this[_0x3ea7ad(0xbd3)](this['_floatHeight'],this[_0x3ea7ad(0x1b2)],_0x20b748,_0x387c57,_0x536182):this[_0x3ea7ad(0x6c4)]=(this['_floatHeight']*(_0x20b748-0x1)+this[_0x3ea7ad(0x1b2)])/_0x20b748;this[_0x3ea7ad(0xb93)]--;if(this[_0x3ea7ad(0xb93)]<=0x0)this['onFloatEnd']();}else return this[_0x3ea7ad(0x635)];}},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x5e8)]=function(_0x235888,_0x1be5a3){const _0x226697=_0x4fbf70;if(!this[_0x226697(0x80d)][_0x226697(0x4a5)]())return;if(BattleManager[_0x226697(0x3bd)]())return;const _0x1c0e06=VisuMZ['BattleCore'][_0x226697(0x837)]['Damage'],_0xe2e5f6=new Sprite_Damage();_0xe2e5f6['_duration']=_0x1c0e06[_0x226697(0x1b4)],this[_0x226697(0xa2a)](_0xe2e5f6),_0xe2e5f6[_0x226697(0x5e8)](_0x235888,_0x1be5a3),this[_0x226697(0xaad)](_0xe2e5f6);},Sprite_Battler['prototype'][_0x4fbf70(0x887)]=function(_0x1d8711,_0x24ec28,_0x44fd61){const _0x509389=_0x4fbf70;if(!this[_0x509389(0x80d)][_0x509389(0x4a5)]())return;if(BattleManager[_0x509389(0x3bd)]())return;const _0x1a67ce=VisuMZ['BattleCore'][_0x509389(0x837)]['Damage'],_0x2abc93=new Sprite_Damage();_0x2abc93['_duration']=_0x1a67ce[_0x509389(0x1b4)],this[_0x509389(0xa2a)](_0x2abc93),_0x2abc93[_0x509389(0x887)](_0x1d8711,_0x24ec28,_0x44fd61),this[_0x509389(0xaad)](_0x2abc93);},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x79d)]=function(){const _0x39bcb7=_0x4fbf70;if(!this['_battler'][_0x39bcb7(0x550)]())return;while(this[_0x39bcb7(0x80d)][_0x39bcb7(0x550)]()){this[_0x39bcb7(0x80d)][_0x39bcb7(0x4a5)]()&&this[_0x39bcb7(0xc5f)]();}this['_battler']['clearDamagePopup'](),this['_battler'][_0x39bcb7(0x50d)]();},Sprite_Battler['prototype'][_0x4fbf70(0xc5f)]=function(){const _0x45a5f4=_0x4fbf70;if(BattleManager[_0x45a5f4(0x3bd)]())return;const _0x489b82=VisuMZ['BattleCore']['Settings']['Damage'],_0x429245=new Sprite_Damage();_0x429245[_0x45a5f4(0x511)]=_0x489b82[_0x45a5f4(0x1b4)],this[_0x45a5f4(0xa2a)](_0x429245),_0x429245['setup'](this[_0x45a5f4(0x80d)]),_0x429245[_0x45a5f4(0xc23)](this[_0x45a5f4(0x80d)]),this[_0x45a5f4(0xaad)](_0x429245);},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0xaad)]=function(_0x134b52){const _0x3f1ea0=_0x4fbf70;this[_0x3f1ea0(0x219)][_0x3f1ea0(0x25b)](_0x134b52);if(this[_0x3f1ea0(0x724)]()){if('LPslJ'!==_0x3f1ea0(0x57a)){const _0xa31879=SceneManager[_0x3f1ea0(0x32c)][_0x3f1ea0(0x9e4)];if(_0xa31879)_0xa31879[_0x3f1ea0(0xaad)](_0x134b52,this[_0x3f1ea0(0x80d)]);}else{const _0x504a11=/<BYPASS DAMAGE CAP>/i;if(this[_0x3f1ea0(0x98d)]()[_0x3f1ea0(0x9c1)][_0x3f1ea0(0xc4b)](_0x504a11))return!![];if(this[_0x3f1ea0(0x928)]()[_0x3f1ea0(0xabd)]()[_0x3f1ea0(0xbb8)](_0x21ef1b=>_0x21ef1b&&_0x21ef1b[_0x3f1ea0(0x9c1)][_0x3f1ea0(0xc4b)](_0x504a11)))return!![];return!_0x59f37d[_0x3f1ea0(0xae2)]['Settings'][_0x3f1ea0(0x835)][_0x3f1ea0(0x359)];}}else{if(_0x3f1ea0(0x439)!=='esFZW'){const _0x1f5c90=_0x2cda30[_0x3f1ea0(0xae2)][_0x3f1ea0(0x837)]['Mechanics'];if(_0x1f5c90['BattleStartEvent']>0x0&&_0x599bc5[_0x1f5c90['BattleStartEvent']]){const _0x31f17c=_0x28393e[_0x1f5c90[_0x3f1ea0(0xa5c)]],_0x3c6314=_0x31f17c[_0x3f1ea0(0xa31)]['length']-0x2,_0x53f651=_0x31f17c[_0x3f1ea0(0xa31)][_0x3c6314];if(_0x53f651&&_0x53f651[_0x3f1ea0(0x503)]!==0xe6){const _0x4ed73f={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x4239fa=_0x31f17c[_0x3f1ea0(0xa31)][_0x3f1ea0(0xc6f)]();_0x31f17c['list']['unshift'](_0x4ed73f),_0x31f17c['list']['unshift'](_0x4239fa);}}}else{this['damageContainer']()[_0x3f1ea0(0x52a)](_0x134b52);if(SceneManager['isBattleFlipped']())_0x134b52[_0x3f1ea0(0xbfa)]['x']=-0x1;}}},Sprite_Battler['prototype'][_0x4fbf70(0x724)]=function(){const _0x4e3bbd=_0x4fbf70;return!$gameSystem['isSideView']()&&this[_0x4e3bbd(0x80d)]&&this[_0x4e3bbd(0x80d)][_0x4e3bbd(0xc9f)]();return!$gameSystem[_0x4e3bbd(0x2ee)]()&&this['_battler']&&this[_0x4e3bbd(0x80d)][_0x4e3bbd(0xc9f)]()&&Window_BattleStatus[_0x4e3bbd(0x92c)]['battleLayoutStyle']()===_0x4e3bbd(0x1c0);},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0xa2a)]=function(_0x278677){const _0x47f8dd=_0x4fbf70;this['alignBattleCoreDamageSprite'](_0x278677,!![]);const _0x84ce5a=VisuMZ['BattleCore'][_0x47f8dd(0x837)][_0x47f8dd(0x835)],_0x128f7c=SceneManager[_0x47f8dd(0x916)]()?-0x1:0x1;if(_0x84ce5a[_0x47f8dd(0xbcf)])for(const _0x33359e of this[_0x47f8dd(0x219)]){if(_0x47f8dd(0x293)===_0x47f8dd(0x293))_0x33359e['x']+=_0x84ce5a[_0x47f8dd(0x61e)]*_0x128f7c,_0x33359e['y']+=_0x84ce5a[_0x47f8dd(0x752)];else return _0x4186f3[_0x47f8dd(0x92c)][_0x47f8dd(0xc0c)]['call'](this);}else{const _0x35c398=this[_0x47f8dd(0x219)][this['_damages'][_0x47f8dd(0x9d2)]-0x1];if(_0x35c398){if('iutNc'==='iutNc')_0x278677['x']=_0x35c398['x']+_0x84ce5a[_0x47f8dd(0x61e)]*_0x128f7c,_0x278677['y']=_0x35c398['y']+_0x84ce5a[_0x47f8dd(0x752)];else{if(_0x257ba8[_0x47f8dd(0xad8)]()[_0x47f8dd(0x44e)]>0x0)return!![];this['_waitMode']='';}}}},Sprite_Battler[_0x4fbf70(0x92c)]['alignBattleCoreDamageSprite']=function(_0x2cd754,_0x5d51ad){const _0x3401ee=_0x4fbf70,_0x490983=SceneManager[_0x3401ee(0x916)]()?-0x1:0x1;let _0x16bbff=this[_0x3401ee(0xd6b)];_0x16bbff+=this[_0x3401ee(0x2a3)]();let _0x473603=this[_0x3401ee(0x571)];const _0x55fef9=this[_0x3401ee(0x2be)][_0x3401ee(0xbfa)]['y'];_0x473603+=this['extraPositionY']();const _0x2a4ef0=SceneManager[_0x3401ee(0x32c)]['_statusWindow'];if(_0x2a4ef0&&this[_0x3401ee(0x635)]===_0x2a4ef0){if('TkLbq'===_0x3401ee(0x417)){_0x16bbff+=_0x2a4ef0['x']-this[_0x3401ee(0x3b3)]();const _0x2cfed4=_0x2a4ef0[_0x3401ee(0x445)]()*0x3/0x4;_0x473603=_0x2a4ef0['y']+_0x2cfed4,_0x473603=Math[_0x3401ee(0x872)](_0x473603,_0x2a4ef0['y']+this['y']-this[_0x3401ee(0x389)]+_0x2cfed4);}else this[_0x3401ee(0xc5f)]();}_0x2cd754['x']=Math[_0x3401ee(0xbec)](_0x16bbff+this[_0x3401ee(0x3b3)]()*_0x490983),_0x2cd754['y']=Math[_0x3401ee(0xbec)](_0x473603+this['damageOffsetY']());},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xbd9)]=Sprite_Battler['prototype'][_0x4fbf70(0x3b3)],Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x3b3)]=function(){const _0xf1c442=_0x4fbf70;let _0x44502a=VisuMZ[_0xf1c442(0xae2)][_0xf1c442(0xbd9)][_0xf1c442(0xc4a)](this),_0x46d97a=VisuMZ[_0xf1c442(0xae2)][_0xf1c442(0x837)]['Damage'][_0xf1c442(0xd0f)]||0x0;return Math[_0xf1c442(0xbec)](_0x44502a+_0x46d97a);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x5e4)]=Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0xc0c)],Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0xc0c)]=function(){const _0x5ccf86=_0x4fbf70;let _0x2ddcb8=VisuMZ[_0x5ccf86(0xae2)][_0x5ccf86(0x5e4)][_0x5ccf86(0xc4a)](this);switch(VisuMZ[_0x5ccf86(0xae2)]['Settings'][_0x5ccf86(0x835)][_0x5ccf86(0xa1a)]){case _0x5ccf86(0x68b):_0x2ddcb8-=this[_0x5ccf86(0x389)]*this[_0x5ccf86(0xbfa)]['y'];break;case'center':_0x2ddcb8-=this[_0x5ccf86(0x389)]*this['scale']['y']*0.5;break;}let _0x33e3c4=VisuMZ[_0x5ccf86(0xae2)][_0x5ccf86(0x837)][_0x5ccf86(0x835)][_0x5ccf86(0xc4e)]||0x0;return Math[_0x5ccf86(0xbec)](_0x2ddcb8+_0x33e3c4);},Sprite_Actor[_0x4fbf70(0x92c)][_0x4fbf70(0x3b3)]=function(){const _0xf6cb5d=_0x4fbf70;return Sprite_Battler[_0xf6cb5d(0x92c)]['damageOffsetX'][_0xf6cb5d(0xc4a)](this);},Sprite_Actor[_0x4fbf70(0x92c)][_0x4fbf70(0xc0c)]=function(){const _0x5c4396=_0x4fbf70;return Sprite_Battler[_0x5c4396(0x92c)][_0x5c4396(0xc0c)][_0x5c4396(0xc4a)](this);},Sprite_Battler['prototype']['destroyDamageSprite']=function(_0x2129d2){const _0x3959a1=_0x4fbf70;this[_0x3959a1(0x724)]()?SceneManager[_0x3959a1(0x32c)][_0x3959a1(0x9e4)][_0x3959a1(0x68c)](_0x2129d2):_0x3959a1(0xae8)==='esGnO'?_0x3ca6e5=this[_0x3959a1(0x3ff)][this['_baseLineStack']['length']-0x1]:(this[_0x3959a1(0xb7e)]()['removeChild'](_0x2129d2),this[_0x3959a1(0x219)][_0x3959a1(0x5d9)](_0x2129d2),_0x2129d2[_0x3959a1(0xd26)]());},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xd22)]=Sprite_Battler['prototype']['setHome'],Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0xb51)]=function(_0x253d61,_0x1bfc13){const _0x3074a1=_0x4fbf70,_0x422679=VisuMZ[_0x3074a1(0xae2)][_0x3074a1(0x837)];if(this[_0x3074a1(0x631)]===Sprite_Actor)'RkPDY'!=='jIZrD'?(_0x253d61+=_0x422679['Actor'][_0x3074a1(0x259)]||0x0,_0x1bfc13+=_0x422679[_0x3074a1(0x410)][_0x3074a1(0x764)]||0x0):this['_pattern']++;else{if(this[_0x3074a1(0x631)]===Sprite_Enemy){if(_0x3074a1(0x7f8)!==_0x3074a1(0x486))_0x253d61+=_0x422679[_0x3074a1(0x73f)][_0x3074a1(0x259)]||0x0,_0x1bfc13+=_0x422679[_0x3074a1(0x73f)][_0x3074a1(0x764)]||0x0;else return _0x20b178[_0x3074a1(0x32c)][_0x3074a1(0x569)]&&_0x4e4324[_0x3074a1(0x32c)]['_enemyWindow'][_0x3074a1(0xa4a)]&&_0x1ad025['_scene'][_0x3074a1(0x569)][_0x3074a1(0x1ff)][_0x3074a1(0x6e3)](this[_0x3074a1(0x80d)]);}}this[_0x3074a1(0x80d)]&&(_0x3074a1(0x88f)!==_0x3074a1(0x88f)?(this['x']=_0x3ee5c0[_0x3074a1(0xbec)](_0x359af7['boxWidth']/0x2),this['y']=_0xa98378[_0x3074a1(0xbec)](_0x45d209[_0x3074a1(0xa30)]/0x2)):(_0x253d61=this[_0x3074a1(0x80d)][_0x3074a1(0x9aa)]??_0x253d61,_0x1bfc13=this['_battler'][_0x3074a1(0x5f0)]??_0x1bfc13)),VisuMZ['BattleCore'][_0x3074a1(0xd22)]['call'](this,_0x253d61,_0x1bfc13),this[_0x3074a1(0xd21)]=this[_0x3074a1(0x818)],this[_0x3074a1(0x449)]=this[_0x3074a1(0xd1d)],this[_0x3074a1(0x306)]=0x0,this[_0x3074a1(0x2cc)]=0x0,this[_0x3074a1(0x5ce)]=_0x3074a1(0x60a);},VisuMZ[_0x4fbf70(0xae2)]['Sprite_Battler_update']=Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x7b2)],Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x7b2)]=function(){const _0x3364fd=_0x4fbf70;VisuMZ[_0x3364fd(0xae2)][_0x3364fd(0x828)]['call'](this);if(!this['_battler']&&this[_0x3364fd(0x60e)]){if(_0x3364fd(0x279)===_0x3364fd(0xb58))return![];else this[_0x3364fd(0x60e)]['visible']=![];}},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x4d9)]=Sprite_Battler['prototype'][_0x4fbf70(0xc74)],Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0xc74)]=function(){const _0x4404b0=_0x4fbf70;this[_0x4404b0(0x95b)](),this[_0x4404b0(0x540)](),this[_0x4404b0(0x765)](),this[_0x4404b0(0x9b7)](),VisuMZ[_0x4404b0(0xae2)]['Sprite_Battler_updateMain'][_0x4404b0(0xc4a)](this),this[_0x4404b0(0x1a9)](),this[_0x4404b0(0x3fc)]();if(this[_0x4404b0(0x631)]===Sprite_Enemy)this['updateShadow']();},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x56c)]=Sprite_Battler[_0x4fbf70(0x92c)]['updatePosition'],Sprite_Battler['prototype'][_0x4fbf70(0xd25)]=function(){const _0x4952aa=_0x4fbf70;this[_0x4952aa(0xb7a)](),VisuMZ[_0x4952aa(0xae2)]['Sprite_Battler_updatePosition'][_0x4952aa(0xc4a)](this),this['updatePositionBattleCore'](),this[_0x4952aa(0xd54)]();},Sprite_Battler['prototype'][_0x4fbf70(0xd2c)]=function(){const _0x160167=_0x4fbf70,_0x129273=this[_0x160167(0x70e)]();if(this[_0x160167(0x80d)][_0x160167(0x822)]())this[_0x160167(0x996)]++,Graphics[_0x160167(0x59e)]%0x1e<0xf?_0x129273[_0x160167(0xca4)]([0xff,0xff,0xff,0x40]):_0x160167(0xada)==='edjos'?_0x129273[_0x160167(0xca4)]([0x0,0x0,0x0,0x0]):this[_0x160167(0xbcc)]['removeChild'](_0x256fdc);else{if(this[_0x160167(0x996)]>0x0){if(_0x160167(0xc53)===_0x160167(0x851)){_0x26a451=_0x3e4747||'',_0xab1365=_0x22a8af||'';_0x4db7b8===''&&_0x3f2d27===''&&(_0x1c330d=this[_0x160167(0xb96)][_0x160167(0x515)](),_0x371c49=this[_0x160167(0x314)][_0x160167(0x383)]());const _0x2ca5e1=_0x378447[_0x160167(0x9f3)](_0x577dd1),_0x3deec8=_0x339933['loadBattleback2'](_0x312543);_0x2ca5e1[_0x160167(0x43e)](this[_0x160167(0x25c)]['bind'](this,this[_0x160167(0xb96)],this['_back2Sprite'],_0x2ca5e1,_0x3deec8));}else this[_0x160167(0x996)]=0x0,_0x129273[_0x160167(0xca4)]([0x0,0x0,0x0,0x0]);}}},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x28a)]=function(_0x3e2dc0,_0x2b6c72){const _0x5c8440=_0x4fbf70,_0x23101a=_0x3e2dc0-this[_0x5c8440(0x818)],_0x93bdfc=_0x2b6c72-this[_0x5c8440(0xd1d)];this[_0x5c8440(0x818)]=_0x3e2dc0,this[_0x5c8440(0xd1d)]=_0x2b6c72,this[_0x5c8440(0xa6c)]-=_0x23101a,this[_0x5c8440(0x268)]-=_0x93bdfc,this[_0x5c8440(0x39d)]-=_0x23101a,this[_0x5c8440(0x927)]-=_0x93bdfc,this[_0x5c8440(0xd25)]();},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x6b8)]=function(_0x4f005d,_0x9bb03e,_0x53cdc3,_0x507776){const _0x2f4c06=_0x4fbf70;if(this[_0x2f4c06(0xd21)]!==_0x4f005d||this[_0x2f4c06(0x449)]!==_0x9bb03e){this['_targetHomeX']=_0x4f005d,this[_0x2f4c06(0x449)]=_0x9bb03e,this[_0x2f4c06(0x306)]=_0x53cdc3,this[_0x2f4c06(0x2cc)]=_0x53cdc3,this['_homeEasing']=_0x507776;if(_0x53cdc3<=0x0){if(_0x2f4c06(0x7fb)==='ZUtlF')this[_0x2f4c06(0x4dc)]();else{_0x18b062=(_0x14734d+_0x39aa92)/0x2;if(_0x52e7a8[_0x2f4c06(0xb81)]())_0x1d55cf+=_0x546554[_0x2f4c06(0xb81)]()['height']/0x2;}}}},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0xb7a)]=function(){const _0x58d7d9=_0x4fbf70;if(this[_0x58d7d9(0x306)]<=0x0)return;const _0x1c2bc4=this[_0x58d7d9(0x306)],_0x526547=this['_homeWholeDuration'],_0x39b490=this[_0x58d7d9(0x5ce)];Imported[_0x58d7d9(0xcaf)]?(this[_0x58d7d9(0x818)]=this[_0x58d7d9(0xbd3)](this['_homeX'],this[_0x58d7d9(0xd21)],_0x1c2bc4,_0x526547,_0x39b490),this['_homeY']=this['applyEasing'](this['_homeY'],this[_0x58d7d9(0x449)],_0x1c2bc4,_0x526547,_0x39b490)):(this['_homeX']=(this[_0x58d7d9(0x818)]*(_0x1c2bc4-0x1)+this[_0x58d7d9(0xd21)])/_0x1c2bc4,this[_0x58d7d9(0xd1d)]=(this[_0x58d7d9(0xd1d)]*(_0x1c2bc4-0x1)+this[_0x58d7d9(0x449)])/_0x1c2bc4);this[_0x58d7d9(0x306)]--;if(this[_0x58d7d9(0x306)]<=0x0)this[_0x58d7d9(0x4dc)]();},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x4dc)]=function(){const _0x14d6e8=_0x4fbf70;this[_0x14d6e8(0x818)]=this[_0x14d6e8(0xd21)],this[_0x14d6e8(0xd1d)]=this[_0x14d6e8(0x449)];},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0xaff)]=function(){const _0x11337f=_0x4fbf70;this[_0x11337f(0xd6b)]=this['x'],this[_0x11337f(0x571)]=this['y'],this['updateFloat'](),this[_0x11337f(0x47b)](),this['x']+=this[_0x11337f(0x2a3)](),this['y']+=this[_0x11337f(0x969)](),this['y']+=this[_0x11337f(0x560)](),this['x']=Math[_0x11337f(0xb2d)](this['x']),this['y']=Math[_0x11337f(0xb2d)](this['y']);},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x2a3)]=function(){let _0x3cc670=0x0;return _0x3cc670;},Sprite_Battler['prototype'][_0x4fbf70(0x969)]=function(){const _0x146713=_0x4fbf70;let _0x471b97=0x0;return this[_0x146713(0x80d)]&&!this[_0x146713(0x80d)][_0x146713(0xa71)]()&&('YDmxF'!=='YDmxF'?this[_0x146713(0x379)]=0x8:(_0x471b97-=this[_0x146713(0x6c4)],_0x471b97-=this[_0x146713(0xc05)])),_0x471b97;},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x560)]=function(){const _0x400ed6=_0x4fbf70;let _0x4296f3=0x0;if(this[_0x400ed6(0x2be)]&&this[_0x400ed6(0x631)]!==Sprite_SvEnemy){if(_0x400ed6(0x6aa)!==_0x400ed6(0xd06)){const _0x11ca93=this[_0x400ed6(0x2be)]['scale']['y'];_0x4296f3-=(_0x11ca93-0x1)*this[_0x400ed6(0x389)];}else this[_0x400ed6(0xb9f)]();}return _0x4296f3;},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x9b7)]=function(){const _0xc44dd=_0x4fbf70,_0x583be4=this[_0xc44dd(0x80d)]&&this[_0xc44dd(0x80d)]['isBattlerFlipped']();this[_0xc44dd(0x46c)]=(_0x583be4?-0x1:0x1)*Math[_0xc44dd(0x77e)](this[_0xc44dd(0xbfa)]['x']);},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x2a1)]=function(_0x1dff19,_0x5cc17d,_0x24d9c0){const _0x543197=_0x4fbf70;if(!this[_0x543197(0xc94)]())return;if(this[_0x543197(0x1b2)]===_0x1dff19)return;this[_0x543197(0x1b2)]=_0x1dff19,this[_0x543197(0xb93)]=_0x5cc17d,this['_floatWholeDuration']=_0x5cc17d,this[_0x543197(0xb8c)]=_0x24d9c0||_0x543197(0x60a);if(_0x5cc17d<=0x0)this[_0x543197(0x6c4)]=_0x1dff19;},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0xa0c)]=function(){const _0x4066c8=_0x4fbf70;if(this[_0x4066c8(0xb93)]<=0x0)return;const _0x563269=this[_0x4066c8(0xb93)],_0x1c6b20=this[_0x4066c8(0xb33)],_0x5346ab=this[_0x4066c8(0xb8c)];if(Imported[_0x4066c8(0xcaf)]){if(_0x4066c8(0x435)===_0x4066c8(0x435))this[_0x4066c8(0x6c4)]=this[_0x4066c8(0xbd3)](this['_floatHeight'],this[_0x4066c8(0x1b2)],_0x563269,_0x1c6b20,_0x5346ab);else for(const _0x4afcf1 of _0x40b3bb[_0x4066c8(0x738)]()){this[_0x4066c8(0x2e0)][_0x4066c8(0x25b)](_0x4066c8(0xb70),_0x42e487[_0x4066c8(0x936)]['format'](_0x4afcf1)),this[_0x4066c8(0x2e0)]['push'](_0x4066c8(0x438)),_0x4b4ee3=!![];}}else this[_0x4066c8(0x6c4)]=(this[_0x4066c8(0x6c4)]*(_0x563269-0x1)+this[_0x4066c8(0x1b2)])/_0x563269;this['_floatDuration']--;if(this[_0x4066c8(0xb93)]<=0x0)this['onFloatEnd']();},Sprite_Battler['prototype'][_0x4fbf70(0xb82)]=function(){const _0x4b3a12=_0x4fbf70;this['_floatHeight']=this[_0x4b3a12(0x1b2)];},Sprite_Battler[_0x4fbf70(0x92c)]['isFloating']=function(){const _0x33a717=_0x4fbf70;return this[_0x33a717(0xb93)]>0x0;},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x677)]=function(_0x56245a,_0x2678f2){const _0x1a0267=_0x4fbf70;if(!this[_0x1a0267(0xc94)]())return;if(_0x2678f2<=0x0)return;this[_0x1a0267(0x728)]=_0x56245a,this[_0x1a0267(0xb9a)]=_0x2678f2,this[_0x1a0267(0xc06)]=_0x2678f2;},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x47b)]=function(){const _0x264070=_0x4fbf70;if(this[_0x264070(0xb9a)]<=0x0)return;const _0x1c5630=this[_0x264070(0xc06)]-this['_jumpDuration'],_0x22526b=this[_0x264070(0xc06)]/0x2,_0x5f59bb=this[_0x264070(0x728)],_0x55a116=-_0x5f59bb/Math[_0x264070(0x25d)](_0x22526b,0x2);this[_0x264070(0xc05)]=_0x55a116*Math['pow'](_0x1c5630-_0x22526b,0x2)+_0x5f59bb,this[_0x264070(0xb9a)]--;if(this[_0x264070(0xb9a)]<=0x0)return this[_0x264070(0x7c0)]();},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x7c0)]=function(){const _0x299f99=_0x4fbf70;this[_0x299f99(0xc05)]=0x0;},Sprite_Battler[_0x4fbf70(0x92c)]['isJumping']=function(){const _0x22a83b=_0x4fbf70;return this[_0x22a83b(0xb9a)]>0x0;},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0xcb0)]=function(_0x5707ca,_0x123ea4,_0x1a4327){const _0x4cde32=_0x4fbf70;if(this[_0x4cde32(0x4c4)]===_0x5707ca)return;this[_0x4cde32(0x4c4)]=_0x5707ca,this[_0x4cde32(0x830)]=_0x123ea4,this['_opacityWholeDuration']=_0x123ea4,this['_opacityEasing']=_0x1a4327||'Linear';if(_0x123ea4<=0x0)this['opacity']=_0x5707ca;},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0xd54)]=function(){const _0x43b798=_0x4fbf70;if(this[_0x43b798(0x631)][_0x43b798(0x27a)]==='Sprite_SvEnemy')return;if(this['_opacityDuration']<=0x0)return;const _0x2481a8=this['_opacityDuration'],_0x3e8915=this[_0x43b798(0x74e)],_0x27c0e7=this['_opacityEasing'];Imported[_0x43b798(0xcaf)]?this['opacity']=this[_0x43b798(0xbd3)](this[_0x43b798(0x853)],this[_0x43b798(0x4c4)],_0x2481a8,_0x3e8915,_0x27c0e7):this[_0x43b798(0x853)]=(this['opacity']*(_0x2481a8-0x1)+this[_0x43b798(0x4c4)])/_0x2481a8;this[_0x43b798(0x830)]--;if(this[_0x43b798(0x830)]<=0x0)this[_0x43b798(0x6df)]();},Sprite_Battler[_0x4fbf70(0x92c)]['onOpacityEnd']=function(){const _0x465e15=_0x4fbf70;this[_0x465e15(0x853)]=this['_targetOpacity'];},Sprite_Battler[_0x4fbf70(0x92c)]['isChangingOpacity']=function(){const _0x5a900a=_0x4fbf70;return this[_0x5a900a(0x830)]>0x0;},Sprite_Battler['prototype']['updateShadow']=function(){const _0x23b22c=_0x4fbf70;this[_0x23b22c(0x432)][_0x23b22c(0x737)]=this[_0x23b22c(0x80d)]['hasSvBattler'](),this[_0x23b22c(0x619)]();},Sprite_Battler['prototype'][_0x4fbf70(0x619)]=function(){const _0x170daa=_0x4fbf70;if(!this[_0x170daa(0x432)])return;this[_0x170daa(0x432)]['y']=this[_0x170daa(0x571)]-this['y']-0x2;},Sprite_Battler['prototype'][_0x4fbf70(0xcc1)]=function(){const _0xeca99b=_0x4fbf70;if(!this[_0xeca99b(0x80d)])return;this[_0xeca99b(0x246)]=this[_0xeca99b(0x80d)][_0xeca99b(0x747)](),this[_0xeca99b(0x26e)]=this[_0xeca99b(0x80d)][_0xeca99b(0xbe4)]();},Game_BattlerBase[_0x4fbf70(0x92c)]['battlerShadowScaleX']=function(){const _0x35d5e7=_0x4fbf70,_0x364463=this[_0x35d5e7(0xc9f)]()?this[_0x35d5e7(0x55a)]():this[_0x35d5e7(0xbb3)]();if(_0x364463){const _0x2007d3=_0x364463[_0x35d5e7(0x9c1)];if(_0x2007d3['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return _0x35d5e7(0x239)===_0x35d5e7(0x7e9)?0x0:Number(RegExp['$1'])*0.01;else{if(_0x2007d3[_0x35d5e7(0xc4b)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Game_BattlerBase[_0x4fbf70(0x92c)]['battlerShadowScaleY']=function(){const _0x5d728e=_0x4fbf70,_0x4ab42f=this[_0x5d728e(0xc9f)]()?this[_0x5d728e(0x55a)]():this[_0x5d728e(0xbb3)]();if(_0x4ab42f){if(_0x5d728e(0x356)===_0x5d728e(0x356)){const _0x1c8740=_0x4ab42f[_0x5d728e(0x9c1)];if(_0x1c8740[_0x5d728e(0xc4b)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i)){if('ciGhq'!==_0x5d728e(0x71d))return Number(RegExp['$1'])*0.01;else this[_0x5d728e(0x9aa)]=_0x1b21e4,this[_0x5d728e(0x5f0)]=_0xa4f38b;}else{if(_0x1c8740['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}else _0x5227f5[_0x5d728e(0xae2)][_0x5d728e(0xd7a)]['call'](this,_0x26e77e);}return 0x1;},Sprite_Battler[_0x4fbf70(0x92c)]['updateScale']=function(){const _0x355597=_0x4fbf70;if(this[_0x355597(0x631)]===Sprite_SvEnemy)return;this[_0x355597(0x2d9)](),this['finalizeScale']();},Sprite_Battler['prototype'][_0x4fbf70(0x9da)]=function(){const _0x33dd8a=_0x4fbf70,_0x3b22a4=this[_0x33dd8a(0x2be)];_0x3b22a4&&(_0x3b22a4[_0x33dd8a(0xbfa)]['x']=this[_0x33dd8a(0x215)](),_0x3b22a4[_0x33dd8a(0xbfa)]['y']=this[_0x33dd8a(0x4d7)]());},Sprite_Battler['prototype'][_0x4fbf70(0x215)]=function(){const _0x19fc59=_0x4fbf70;let _0x3017e3=0x1;return _0x3017e3*=this[_0x19fc59(0x46c)],_0x3017e3*=this[_0x19fc59(0x506)],_0x3017e3;},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x4d7)]=function(){return 0x1*this['_growY'];},Sprite_Battler['prototype'][_0x4fbf70(0xb9d)]=function(){const _0xe0023b=_0x4fbf70;return this[_0xe0023b(0x606)]*this['mainSpriteScaleX']();},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x237)]=function(){const _0x2aaafc=_0x4fbf70;return this['height']*this[_0x2aaafc(0x4d7)]();},Sprite_Battler[_0x4fbf70(0x92c)]['startGrow']=function(_0x5dc757,_0x26c4ce,_0x31828f,_0x12b88b){const _0x3d460e=_0x4fbf70;if(!this[_0x3d460e(0xc94)]())return;if(!this['_distortionSprite'])return;if(this[_0x3d460e(0xb99)]===_0x5dc757&&this['_targetGrowY']===_0x26c4ce)return;this[_0x3d460e(0xb99)]=_0x5dc757,this[_0x3d460e(0x24b)]=_0x26c4ce,this['_growDuration']=_0x31828f,this[_0x3d460e(0x7e6)]=_0x31828f,this['_growEasing']=_0x12b88b||_0x3d460e(0x60a);if(_0x31828f<=0x0){if(_0x3d460e(0x9d5)===_0x3d460e(0xbbe)){if(this[_0x3d460e(0x7ec)]()){let _0x3c4243=_0x181062[_0x3d460e(0x3ae)];_0x371bd2/=_0x3c4243['length'],this['isAttack']()&&(_0xb38793*=this[_0x3d460e(0x928)]()[_0x3d460e(0x9ff)]()+0x1),_0x58cfc8=_0x4ad651>0x0?_0x5c99a2[_0x3d460e(0x745)](_0x2fea3d):_0x2bd01f[_0x3d460e(0xb2d)](_0x40ed25);}return _0xc19d21;}else this[_0x3d460e(0x506)]=this[_0x3d460e(0xb99)],this['_growY']=this[_0x3d460e(0x24b)];}},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x2d9)]=function(){const _0x9047c9=_0x4fbf70;if(this[_0x9047c9(0x925)]<=0x0)return;if(!this[_0x9047c9(0x2be)])return;const _0x5e2b2d=this[_0x9047c9(0x925)],_0x5d2bb4=this[_0x9047c9(0x7e6)],_0x49b859=this['_growEasing'];Imported[_0x9047c9(0xcaf)]?(this[_0x9047c9(0x506)]=this[_0x9047c9(0xbd3)](this[_0x9047c9(0x506)],this[_0x9047c9(0xb99)],_0x5e2b2d,_0x5d2bb4,_0x49b859),this['_growY']=this[_0x9047c9(0xbd3)](this[_0x9047c9(0x31b)],this[_0x9047c9(0x24b)],_0x5e2b2d,_0x5d2bb4,_0x49b859)):(this[_0x9047c9(0x506)]=(this['_growX']*(_0x5e2b2d-0x1)+this[_0x9047c9(0xb99)])/_0x5e2b2d,this[_0x9047c9(0x31b)]=(this[_0x9047c9(0x31b)]*(_0x5e2b2d-0x1)+this[_0x9047c9(0x24b)])/_0x5e2b2d);this[_0x9047c9(0x925)]--;if(this[_0x9047c9(0x925)]<=0x0)this['onGrowEnd']();},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0xbb4)]=function(){const _0x373263=_0x4fbf70;this[_0x373263(0x506)]=this[_0x373263(0xb99)],this[_0x373263(0x31b)]=this[_0x373263(0x24b)];},Sprite_Battler['prototype'][_0x4fbf70(0xd5f)]=function(){const _0x457710=_0x4fbf70;return this[_0x457710(0x925)]>0x0;},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x22c)]=function(_0x434e9d,_0x527367,_0x7103b9,_0x2cf414){const _0x471fce=_0x4fbf70;if(!this[_0x471fce(0xc94)]())return;if(!this[_0x471fce(0x2be)])return;if(this[_0x471fce(0x614)]===_0x434e9d&&this['_targetSkewY']===_0x527367)return;this[_0x471fce(0x614)]=_0x434e9d,this[_0x471fce(0xa25)]=_0x527367,this[_0x471fce(0x2ac)]=_0x7103b9,this[_0x471fce(0xb89)]=_0x7103b9,this[_0x471fce(0x72d)]=_0x2cf414||_0x471fce(0x60a),_0x7103b9<=0x0&&(this['_distortionSprite'][_0x471fce(0xc44)]['x']=this[_0x471fce(0x614)],this[_0x471fce(0x2be)]['skew']['y']=this[_0x471fce(0xa25)]);},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x540)]=function(){const _0x475165=_0x4fbf70;if(this[_0x475165(0x2ac)]<=0x0)return;if(!this['_distortionSprite'])return;const _0x5a711d=this['_skewDuration'],_0x45a3af=this[_0x475165(0xb89)],_0xd78409=this[_0x475165(0x72d)],_0x2f9c1b=this[_0x475165(0x2be)];Imported[_0x475165(0xcaf)]?'uPeUU'!=='eGivi'?(_0x2f9c1b['skew']['x']=this[_0x475165(0xbd3)](_0x2f9c1b['skew']['x'],this[_0x475165(0x614)],_0x5a711d,_0x45a3af,_0xd78409),_0x2f9c1b[_0x475165(0xc44)]['y']=this[_0x475165(0xbd3)](_0x2f9c1b[_0x475165(0xc44)]['y'],this['_targetSkewY'],_0x5a711d,_0x45a3af,_0xd78409)):_0x3f0e26=_0x529b9d:(_0x2f9c1b[_0x475165(0xc44)]['x']=(_0x2f9c1b['skew']['x']*(_0x5a711d-0x1)+this[_0x475165(0x614)])/_0x5a711d,_0x2f9c1b['skew']['y']=(_0x2f9c1b[_0x475165(0xc44)]['y']*(_0x5a711d-0x1)+this[_0x475165(0xa25)])/_0x5a711d);this[_0x475165(0x2ac)]--;if(this['_skewDuration']<=0x0)this[_0x475165(0xcd9)]();},Sprite_Battler[_0x4fbf70(0x92c)]['onSkewEnd']=function(){const _0x30d3fe=_0x4fbf70;this[_0x30d3fe(0x2be)][_0x30d3fe(0xc44)]['x']=this[_0x30d3fe(0x614)],this[_0x30d3fe(0x2be)][_0x30d3fe(0xc44)]['y']=this['_targetSkewY'];},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x86d)]=function(){const _0x592d33=_0x4fbf70;return this[_0x592d33(0x2ac)]>0x0;},Sprite_Battler[_0x4fbf70(0x92c)]['startSpin']=function(_0x536d02,_0x7b854b,_0x1cffbc,_0x5e127c){const _0x472886=_0x4fbf70;if(!this[_0x472886(0xc94)]())return;if(!this[_0x472886(0x2be)])return;if(this[_0x472886(0x8a7)]===_0x536d02)return;this[_0x472886(0x8a7)]=_0x536d02,this[_0x472886(0xce7)]=_0x7b854b,this['_angleWholeDuration']=_0x7b854b,this['_angleEasing']=_0x1cffbc||_0x472886(0x60a),this[_0x472886(0x373)]=_0x5e127c,this[_0x472886(0x373)]===undefined&&(this['_angleRevertOnFinish']=!![]),_0x7b854b<=0x0&&(this[_0x472886(0x5c6)]=_0x536d02,this['_angleRevertOnFinish']&&(this['_targetAngle']=0x0,this[_0x472886(0x5c6)]=0x0));},Sprite_Battler['prototype']['updateSpin']=function(){const _0x5040ac=_0x4fbf70;this['updateAngleCalculations'](),this[_0x5040ac(0x3c1)]();},Sprite_Battler['prototype'][_0x4fbf70(0x4ee)]=function(){const _0x11485b=_0x4fbf70;if(this['_angleDuration']<=0x0)return;const _0x35fef2=this['_angleDuration'],_0x2efcc7=this[_0x11485b(0x529)],_0x5b4f4d=this[_0x11485b(0x50a)];Imported[_0x11485b(0xcaf)]?_0x11485b(0x1f3)===_0x11485b(0x689)?(this[_0x11485b(0x1ff)]=this['validTargets'](),this[_0x11485b(0xa26)](),_0x4b1545[_0x11485b(0x92c)][_0x11485b(0x1e5)][_0x11485b(0xc4a)](this)):this[_0x11485b(0x5c6)]=this[_0x11485b(0xbd3)](this[_0x11485b(0x5c6)],this[_0x11485b(0x8a7)],_0x35fef2,_0x2efcc7,_0x5b4f4d):this[_0x11485b(0x5c6)]=(this[_0x11485b(0x5c6)]*(_0x35fef2-0x1)+this['_targetAngle'])/_0x35fef2;this[_0x11485b(0xce7)]--;if(this[_0x11485b(0xce7)]<=0x0)this['onAngleEnd']();},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x4aa)]=function(){const _0x30f5ab=_0x4fbf70;this['_currentAngle']=this['_targetAngle'],this[_0x30f5ab(0x373)]&&(this[_0x30f5ab(0x8a7)]=0x0,this[_0x30f5ab(0x5c6)]=0x0);},Sprite_Battler[_0x4fbf70(0x92c)]['isSpinning']=function(){const _0x419c01=_0x4fbf70;return this[_0x419c01(0xce7)]>0x0;},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x3c1)]=function(){const _0x45acaf=_0x4fbf70;if(!this[_0x45acaf(0x2be)])return;const _0x458a3f=this[_0x45acaf(0x5c6)],_0x1c15af=this['scale']['x'],_0x41bce4=this[_0x45acaf(0x80d)][_0x45acaf(0xc9f)]()?-0x1:0x1;this[_0x45acaf(0x2be)][_0x45acaf(0x8d6)]=_0x458a3f*_0x1c15af*_0x41bce4;const _0x1da72d=this[_0x45acaf(0x2be)][_0x45acaf(0xbfa)]['y'];this[_0x45acaf(0x2be)]['y']=this[_0x45acaf(0x389)]*-0.5*(0x2-_0x1da72d),this[_0x45acaf(0x2be)]['y']=Math[_0x45acaf(0x745)](this['_distortionSprite']['y']);const _0x5e6106=[this[_0x45acaf(0xb1b)],this[_0x45acaf(0xcd7)],this[_0x45acaf(0x89e)]];for(const _0x8418ca of _0x5e6106){if(!_0x8418ca)continue;_0x8418ca['y']=this[_0x45acaf(0x389)]*0.5;}if(this[_0x45acaf(0x432)]){if('ZJcDl'!=='ZJcDl')return this['_actor']&&this[_0x45acaf(0x371)][_0x45acaf(0xb10)]();else this['_shadowScaleX']=this[_0x45acaf(0x246)]??0x1,this[_0x45acaf(0x26e)]=this['_shadowScaleY']??0x1,this[_0x45acaf(0x432)]['scale']['x']=this[_0x45acaf(0x2be)]['scale']['x']*this['_shadowScaleX'],this['_shadowSprite'][_0x45acaf(0xbfa)]['y']=this['_distortionSprite'][_0x45acaf(0xbfa)]['y']*this[_0x45acaf(0x26e)];}},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x909)]=Sprite_Actor[_0x4fbf70(0x92c)][_0x4fbf70(0x4b6)],Sprite_Actor['prototype'][_0x4fbf70(0x4b6)]=function(){const _0x332ae9=_0x4fbf70;VisuMZ['BattleCore'][_0x332ae9(0x909)][_0x332ae9(0xc4a)](this);if(VisuMZ[_0x332ae9(0xae2)]['Settings'][_0x332ae9(0x2c8)][_0x332ae9(0xd86)]){if('XFZlo'!==_0x332ae9(0x1be)){if(!_0x30ae48[_0x332ae9(0x90d)]())return;const _0x35fbba=_0x5647fe[_0x332ae9(0x2e0)];_0x35fbba[_0x332ae9(0xb36)]();}else this[_0x332ae9(0x2dc)]();}},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x71f)]=Sprite_Enemy['prototype'][_0x4fbf70(0x90e)],Sprite_Enemy[_0x4fbf70(0x92c)][_0x4fbf70(0x90e)]=function(){const _0x12f5ed=_0x4fbf70;VisuMZ['BattleCore'][_0x12f5ed(0x837)][_0x12f5ed(0x2c8)][_0x12f5ed(0x8e3)]&&this['createHpGaugeSprite'](),VisuMZ[_0x12f5ed(0xae2)][_0x12f5ed(0x71f)][_0x12f5ed(0xc4a)](this);},Sprite_Battler['prototype']['createHpGaugeSprite']=function(){const _0x481727=_0x4fbf70;if(!ConfigManager[_0x481727(0xd3a)])return;if(this['constructor']===Sprite_SvEnemy)return;const _0x51e367=VisuMZ[_0x481727(0xae2)]['Settings'][_0x481727(0x2c8)],_0x80fcbb=new Sprite_HpGauge();_0x80fcbb[_0x481727(0x951)]['x']=_0x51e367[_0x481727(0x4ce)],_0x80fcbb['anchor']['y']=_0x51e367[_0x481727(0x295)],_0x80fcbb[_0x481727(0xbfa)]['x']=_0x80fcbb['scale']['y']=_0x51e367[_0x481727(0x39f)],this[_0x481727(0x60e)]=_0x80fcbb,this[_0x481727(0x52a)](this[_0x481727(0x60e)]),Spriteset_Battle['ANTI_TINT_UI']&&BattleManager[_0x481727(0x741)](this[_0x481727(0x60e)]);},VisuMZ['BattleCore'][_0x4fbf70(0x95f)]=Sprite_Battler['prototype']['setBattler'],Sprite_Battler['prototype'][_0x4fbf70(0xaf4)]=function(_0x1e1826){const _0x407406=_0x4fbf70,_0x1e54dc=this[_0x407406(0x80d)];VisuMZ[_0x407406(0xae2)][_0x407406(0x95f)][_0x407406(0xc4a)](this,_0x1e1826),this['setupHpGaugeSprite'](_0x1e1826);if(_0x1e54dc!==_0x1e1826)this[_0x407406(0xcc1)]();},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0xa7b)]=function(_0x13e9ae){const _0x2f6ad9=_0x4fbf70;if(!_0x13e9ae)return;if(!this[_0x2f6ad9(0x60e)])return;if(_0x13e9ae['isActor']()){}else{if(_0x13e9ae[_0x2f6ad9(0x923)]()){if(this[_0x2f6ad9(0x631)]===Sprite_SvEnemy&&!_0x13e9ae[_0x2f6ad9(0x42f)]())return;}}this['_hpGaugeSprite']['setup'](_0x13e9ae,'hp');},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0xcc4)]=function(){const _0x463fc5=_0x4fbf70;return this[_0x463fc5(0x80d)]&&this[_0x463fc5(0x80d)]['hasStaticSvBattler']();},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0xc7d)]=function(){const _0x34dbef=_0x4fbf70,_0x291ccb=this['_mainSprite'][_0x34dbef(0x597)];if(!_0x291ccb)return;const _0x711663=_0x291ccb[_0x34dbef(0x606)];let _0x4529dd=_0x291ccb['height'];if(this[_0x34dbef(0x80d)][_0x34dbef(0x521)]()){if(_0x34dbef(0xc09)===_0x34dbef(0xc09)){if(this['_frame'])_0x4529dd=Math['max'](0x0,this[_0x34dbef(0x32b)][_0x34dbef(0x389)]-0x4);}else{if(!_0x5b5fd1[_0x34dbef(0x6a5)]())return;if(this[_0x34dbef(0xc8d)])return;this['_displayBattleCoreTransitionErrorMsg']=!![];let _0x53bf2c='';_0x53bf2c+=_0x34dbef(0x54a),_0x53bf2c+=_0x34dbef(0x4fc)['format'](_0x5272eb[_0x34dbef(0x27a)]),_0x2c2e17(_0x53bf2c);}}this[_0x34dbef(0xb1b)][_0x34dbef(0x782)](0x0,0x0,_0x711663,_0x4529dd),this[_0x34dbef(0x782)](0x0,0x0,_0x711663,_0x4529dd);},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x1a9)]=function(){const _0x3e4ffa=_0x4fbf70;if(!this[_0x3e4ffa(0x80d)])return;if(!this[_0x3e4ffa(0x60e)])return;const _0x27061f=VisuMZ[_0x3e4ffa(0xae2)][_0x3e4ffa(0x837)][_0x3e4ffa(0x2c8)],_0x17017a=this[_0x3e4ffa(0x60e)];_0x17017a['visible']=this[_0x3e4ffa(0xa0b)]();const _0x162880=_0x27061f[_0x3e4ffa(0x259)],_0x47b8ad=_0x27061f['OffsetY'];_0x17017a['x']=_0x162880,_0x17017a['x']+=this[_0x3e4ffa(0x80d)][_0x3e4ffa(0x67a)](),_0x17017a['y']=-this[_0x3e4ffa(0x389)]+_0x47b8ad,_0x17017a['y']+=this['_battler'][_0x3e4ffa(0xb74)](),Spriteset_Battle['ANTI_TINT_UI']&&SceneManager[_0x3e4ffa(0x32c)][_0x3e4ffa(0x7cf)]&&(_0x17017a['x']+=this['x'],_0x17017a['y']+=this['y']);},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0xa0b)]=function(){const _0xea79c5=_0x4fbf70;if(!this['_battler'])return![];if(this[_0xea79c5(0x80d)][_0xea79c5(0xc9f)]())return!![];if(this[_0xea79c5(0x80d)][_0xea79c5(0x8a2)]())return![];if(this['opacity']<=0x0)return![];const _0x5a1231=this['_battler'][_0xea79c5(0xbb3)]()['note'];if(_0x5a1231['match'](/<SHOW HP GAUGE>/i))return!![];if(_0x5a1231[_0xea79c5(0xc4b)](/<HIDE HP GAUGE>/i))return![];const _0x25a8af=VisuMZ['BattleCore']['Settings']['HpGauge'];if(_0x25a8af[_0xea79c5(0x823)]){if(_0x25a8af[_0xea79c5(0x4bc)]&&BattleManager['isBattleTest']())return!![];if(this[_0xea79c5(0x80d)][_0xea79c5(0xba5)])return![];return this[_0xea79c5(0x80d)][_0xea79c5(0x902)]();}return!![];},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x3f2)]=Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x499)],Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x499)]=function(){const _0x44f0fe=_0x4fbf70;if(!this[_0x44f0fe(0x80d)])return![];if(this[_0x44f0fe(0x306)]>0x0)return!![];return VisuMZ[_0x44f0fe(0xae2)][_0x44f0fe(0x3f2)][_0x44f0fe(0xc4a)](this);},VisuMZ[_0x4fbf70(0xae2)]['Sprite_Battler_startMove']=Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x256)],Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x256)]=function(_0x3e70b4,_0x41aeb9,_0x549ea0){const _0x434626=_0x4fbf70;this[_0x434626(0xc94)]()&&VisuMZ[_0x434626(0xae2)][_0x434626(0xbc2)]['call'](this,_0x3e70b4,_0x41aeb9,_0x549ea0);},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0xc94)]=function(){const _0xe2bbff=_0x4fbf70;if(this[_0xe2bbff(0x80d)]&&this[_0xe2bbff(0x80d)][_0xe2bbff(0x521)]())return![];if(this[_0xe2bbff(0x80d)]&&!this[_0xe2bbff(0x80d)][_0xe2bbff(0x34a)]())return![];return $gameSystem[_0xe2bbff(0x2ee)]();},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x4ef)]=function(){},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x551)]=function(){const _0x8c9252=_0x4fbf70;this[_0x8c9252(0x256)](0x0,0x0,0xc);},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x2ef)]=function(){},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0x6a9)]=function(){const _0x1ff7cd=_0x4fbf70,_0x56c5f2=VisuMZ[_0x1ff7cd(0xae2)][_0x1ff7cd(0x837)][_0x1ff7cd(0x410)],_0x3a5402=this[_0x1ff7cd(0x80d)]&&this[_0x1ff7cd(0x80d)][_0x1ff7cd(0xc9f)]()?0x1:-0x1,_0x1ae017=this[_0x1ff7cd(0xd6b)]-this[_0x1ff7cd(0x818)]+_0x3a5402*_0x56c5f2[_0x1ff7cd(0x19b)],_0x172b21=this[_0x1ff7cd(0x571)]-this[_0x1ff7cd(0xd1d)]+_0x3a5402*_0x56c5f2[_0x1ff7cd(0x2b3)],_0x5dd92b=_0x56c5f2[_0x1ff7cd(0x4b0)];this[_0x1ff7cd(0x256)](_0x1ae017,_0x172b21,_0x5dd92b);},Sprite_Battler[_0x4fbf70(0x92c)][_0x4fbf70(0xce4)]=function(_0x4ab147,_0x1a7e43){const _0x894fe7=_0x4fbf70,_0x331d5c=VisuMZ['BattleCore']['Settings'][_0x894fe7(0x410)];this[_0x894fe7(0x346)]=Math[_0x894fe7(0x745)]((_0x331d5c[_0x894fe7(0x55b)]??0x18)*_0x1a7e43),this[_0x894fe7(0xb3e)]=Math[_0x894fe7(0x6f0)](this[_0x894fe7(0xb3e)],_0x4ab147);},Sprite_Battler['prototype'][_0x4fbf70(0x3fc)]=function(){const _0x38e5a9=_0x4fbf70,_0x1eaa11=VisuMZ[_0x38e5a9(0xae2)]['Settings'][_0x38e5a9(0x410)];if(!(_0x1eaa11['ShakeFlinch']??![]))return;if(this[_0x38e5a9(0x346)]>0x0){if(_0x38e5a9(0x974)!==_0x38e5a9(0x5a0)){const _0x5ebeb1=this['_shakeFlinchDuration'];this['_shakeFlinchPower']=this[_0x38e5a9(0xb3e)]*(_0x5ebeb1-0x1)/_0x5ebeb1,this[_0x38e5a9(0x346)]--;if(this['_shakeFlinchDuration']<=0x0){if('HOhhG'!==_0x38e5a9(0x367)){this[_0x38e5a9(0xd2a)]=this[_0x38e5a9(0xd2a)]||{};if(this[_0x38e5a9(0xd2a)][_0x265fb2]!==_0x39e6ed)return this[_0x38e5a9(0xd2a)][_0xe26f55];this[_0x38e5a9(0xd2a)][_0x34a576]=null;const _0x142b2e=this[_0x38e5a9(0xafc)](),_0x5d2372=_0x142b2e[_0x38e5a9(0x4ec)](_0x45477b=>_0x45477b[_0x38e5a9(0x79a)]()===_0x51579e);if(_0x5d2372)this[_0x38e5a9(0xd2a)][_0x306da]=_0x5d2372;return this[_0x38e5a9(0xd2a)][_0x33d6a2];}else this[_0x38e5a9(0xb3e)]=0x0;}}else return _0x3cbb40['BattleCore'][_0x38e5a9(0x837)]['Damage']['VarianceFormulaJS'][_0x38e5a9(0xc4a)](this,_0x539739,_0x1b4bd8);}if(this['_shakeFlinchPower']>0x0){if(_0x38e5a9(0x8bf)!==_0x38e5a9(0x8bf))_0x515844['BattleCore'][_0x38e5a9(0x236)][_0x38e5a9(0xc4a)](this);else{this[_0x38e5a9(0xb1b)]['x']=Math[_0x38e5a9(0x545)](this['_shakeFlinchPower'])*(Math[_0x38e5a9(0x69a)]()<0.5?-0x1:0x1);if(this['_baseY']!==this['y']){if(_0x38e5a9(0x1a1)!==_0x38e5a9(0x1a1)){_0x4f3029(_0x38e5a9(0x19f)),_0x244197[_0x38e5a9(0x4c5)]();return;}else this[_0x38e5a9(0xb1b)]['y']=this[_0x38e5a9(0x389)]*0.5,this[_0x38e5a9(0xb1b)]['y']+=Math['randomInt'](this[_0x38e5a9(0xb3e)])*(Math[_0x38e5a9(0x69a)]()<0.5?-0x1:0x1);}}}else this[_0x38e5a9(0xb1b)]['x']=0x0,this[_0x38e5a9(0xb1b)]['y']=this[_0x38e5a9(0x389)]*0.5;},VisuMZ['BattleCore']['Sprite_Actor_initMembers']=Sprite_Actor[_0x4fbf70(0x92c)]['initMembers'],Sprite_Actor[_0x4fbf70(0x92c)][_0x4fbf70(0xa77)]=function(){const _0x48a3f2=_0x4fbf70;VisuMZ[_0x48a3f2(0xae2)][_0x48a3f2(0x492)][_0x48a3f2(0xc4a)](this),this['attachSpritesToDistortionSprite']();},Sprite_Actor['prototype']['mainSprite']=function(){const _0x1bdac0=_0x4fbf70;return this[_0x1bdac0(0x2be)]||this[_0x1bdac0(0xb1b)]||this;},VisuMZ[_0x4fbf70(0xae2)]['Sprite_Actor_moveToStartPosition']=Sprite_Actor[_0x4fbf70(0x92c)][_0x4fbf70(0xb97)],Sprite_Actor[_0x4fbf70(0x92c)][_0x4fbf70(0xb97)]=function(){},Sprite_Actor[_0x4fbf70(0x92c)]['moveToStartPositionBattleCore']=function(_0x215565){const _0x3d70bd=_0x4fbf70;if(SceneManager[_0x3d70bd(0x5dc)]())return;if(!_0x215565)return;if(!_0x215565[_0x3d70bd(0xc94)]())return;VisuMZ[_0x3d70bd(0xae2)][_0x3d70bd(0x3c5)]['call'](this);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xbbf)]=Sprite_Actor[_0x4fbf70(0x92c)]['setActorHome'],Sprite_Actor[_0x4fbf70(0x92c)]['setActorHome']=function(_0x1c26b9){const _0x2b0707=_0x4fbf70;VisuMZ[_0x2b0707(0xae2)][_0x2b0707(0x837)]['Actor'][_0x2b0707(0xc17)]?_0x2b0707(0x1fb)!==_0x2b0707(0x1fb)?_0x4b541b[_0x2b0707(0xae2)]['BattleManager_selectNextCommand'][_0x2b0707(0xc4a)](this):VisuMZ[_0x2b0707(0xae2)][_0x2b0707(0x837)][_0x2b0707(0x410)][_0x2b0707(0xc17)][_0x2b0707(0xc4a)](this,_0x1c26b9):_0x2b0707(0xca6)!==_0x2b0707(0x325)?VisuMZ[_0x2b0707(0xae2)]['Sprite_Actor_setActorHome'][_0x2b0707(0xc4a)](this,_0x1c26b9):this[_0x2b0707(0xbb2)]();},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xb19)]=Sprite_Actor[_0x4fbf70(0x92c)][_0x4fbf70(0xaf4)],Sprite_Actor[_0x4fbf70(0x92c)]['setBattler']=function(_0x4f5687){const _0x36c678=_0x4fbf70;VisuMZ['BattleCore'][_0x36c678(0xb19)][_0x36c678(0xc4a)](this,_0x4f5687),this[_0x36c678(0x2b8)](_0x4f5687);},Sprite_Actor['prototype'][_0x4fbf70(0x2b8)]=function(_0x5efd8d){const _0x58d638=_0x4fbf70;if(!_0x5efd8d)return;if(!this[_0x58d638(0xb1b)])return;this['_mainSprite'][_0x58d638(0x951)]['x']=this[_0x58d638(0x371)]['svBattlerAnchorX'](),this[_0x58d638(0xb1b)][_0x58d638(0x951)]['y']=this[_0x58d638(0x371)]['svBattlerAnchorY'](),this[_0x58d638(0x28d)]();},VisuMZ['BattleCore']['Sprite_Actor_update']=Sprite_Actor['prototype'][_0x4fbf70(0x7b2)],Sprite_Actor[_0x4fbf70(0x92c)]['update']=function(){const _0x1785dd=_0x4fbf70;VisuMZ[_0x1785dd(0xae2)][_0x1785dd(0xad6)][_0x1785dd(0xc4a)](this),this['_actor']&&(this[_0x1785dd(0x436)](),this['updateStyleOpacity']());},VisuMZ['BattleCore']['Sprite_Actor_updateBitmap']=Sprite_Actor[_0x4fbf70(0x92c)]['updateBitmap'],Sprite_Actor[_0x4fbf70(0x92c)]['updateBitmap']=function(){const _0x1ef911=_0x4fbf70;VisuMZ[_0x1ef911(0xae2)][_0x1ef911(0xc83)][_0x1ef911(0xc4a)](this);if(this['_mainSprite']&&this[_0x1ef911(0xb1b)][_0x1ef911(0x597)]&&this[_0x1ef911(0x80d)]){if(this[_0x1ef911(0xb1b)]['bitmap'][_0x1ef911(0x3a9)]!==this[_0x1ef911(0x80d)][_0x1ef911(0xcb6)]()){if('xPTIK'!=='xPTIK'){const _0x9d006c=_0x2872ab[_0x1ef911(0x98d)]();this[_0x1ef911(0xc91)](_0x5bab3d,_0x9d006c),this['push'](_0x1ef911(0xa09),_0x3fa297,_0x46fe76,!![]),this[_0x1ef911(0x25b)](_0x1ef911(0x297),_0x1e6972,_0x37cf14),this['push'](_0x1ef911(0xcba)),this[_0x1ef911(0x25b)](_0x1ef911(0xbfb),_0x30c58e,_0xc8ccc8),this[_0x1ef911(0x25b)](_0x1ef911(0x7a1));}else this['_mainSprite'][_0x1ef911(0x597)]['smooth']=this[_0x1ef911(0x80d)][_0x1ef911(0xcb6)]();}}},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xb40)]=Sprite_Actor['prototype'][_0x4fbf70(0xb78)],Sprite_Actor[_0x4fbf70(0x92c)][_0x4fbf70(0xb78)]=function(){const _0x232b9d=_0x4fbf70;VisuMZ[_0x232b9d(0xae2)][_0x232b9d(0xb40)][_0x232b9d(0xc4a)](this),this['updateShadowBattleCore']();},Sprite_Actor[_0x4fbf70(0x92c)][_0x4fbf70(0x2c5)]=function(){const _0x5a8a18=_0x4fbf70;if(!this[_0x5a8a18(0xb1b)])return;if(!this['_shadowSprite'])return;this[_0x5a8a18(0x28d)](),this[_0x5a8a18(0x619)]();},Sprite_Actor[_0x4fbf70(0x92c)][_0x4fbf70(0x436)]=function(){const _0x2f73bb=_0x4fbf70;this['_stateSprite'][_0x2f73bb(0xbfa)]['x']=0x1/(this[_0x2f73bb(0xbfa)]['x']||0.001),this['_stateSprite'][_0x2f73bb(0xbfa)]['y']=0x1/(this[_0x2f73bb(0xbfa)]['y']||0.001);},Sprite_Actor['prototype'][_0x4fbf70(0x58b)]=function(){const _0x4c7a78=_0x4fbf70;if(!$gameSystem['isSideView']()&&this[_0x4c7a78(0x631)]===Sprite_Actor){const _0x4be468=Scene_Battle[_0x4c7a78(0x92c)][_0x4c7a78(0x3c7)]();if([_0x4c7a78(0x23c),_0x4c7a78(0xa31),_0x4c7a78(0x1c0),'border'][_0x4c7a78(0x6e3)](_0x4be468)){if(_0x4c7a78(0x964)!==_0x4c7a78(0x9a0))this[_0x4c7a78(0x853)]=0x0;else return this[_0x4c7a78(0x860)][_0x3c033d];}}},Sprite_Actor['prototype'][_0x4fbf70(0x2f0)]=function(){const _0x98926f=_0x4fbf70,_0x1d4e59=this['_actor'];if(_0x1d4e59){const _0x177b94=_0x1d4e59[_0x98926f(0x963)]();if(_0x1d4e59[_0x98926f(0x5dd)]()||_0x1d4e59[_0x98926f(0x732)]())this['startMotion'](_0x98926f(0xcdb));else{if(_0x177b94===0x3)this['startMotion'](_0x98926f(0xd18));else{if(_0x177b94===0x2)this['startMotion'](_0x98926f(0x922));else{if(this[_0x98926f(0x7dc)])_0x98926f(0x4ab)===_0x98926f(0x4ab)?this[_0x98926f(0x1f4)](_0x98926f(0x6db)):_0x30ab8e[_0x98926f(0x901)]();else{if(_0x1d4e59[_0x98926f(0x6ab)]())'DLKXb'===_0x98926f(0x20f)?this['startMotion'](_0x98926f(0x438)):this['visible']=_0xe872bc['_autoBattle'];else{if(_0x1d4e59[_0x98926f(0x70a)]()){if(_0x98926f(0x3af)===_0x98926f(0x562))return'icon';else this['startMotion'](_0x98926f(0x1c5));}else{if(_0x1d4e59['isGuard']()||_0x1d4e59['isGuardWaiting']())this[_0x98926f(0x1f4)](_0x98926f(0x73a));else{if(_0x177b94===0x1)this[_0x98926f(0x1f4)](_0x98926f(0x303));else{if(_0x1d4e59[_0x98926f(0x4fe)]())_0x98926f(0xb1d)==='QUYQK'?this[_0x98926f(0x853)]=0x0:this[_0x98926f(0x1f4)](_0x98926f(0x21c));else{if(_0x1d4e59[_0x98926f(0x3c9)]())this[_0x98926f(0x1f4)](_0x98926f(0xcdb));else _0x1d4e59[_0x98926f(0x69f)]()?this[_0x98926f(0x1f4)](_0x98926f(0x438)):this['startMotion'](_0x98926f(0xcdb));}}}}}}}}}}},Sprite_Actor[_0x4fbf70(0x92c)][_0x4fbf70(0x2ef)]=function(){const _0x42952f=_0x4fbf70,_0x1d5552=0xa,_0xb91e99=0x12c*_0x1d5552,_0x3ddb9c=0x1e*_0x1d5552;this[_0x42952f(0x256)](_0xb91e99,0x0,_0x3ddb9c);},Sprite_Actor['prototype'][_0x4fbf70(0x221)]=function(){const _0x1d884c=_0x4fbf70;Sprite_Battler[_0x1d884c(0x92c)][_0x1d884c(0x221)][_0x1d884c(0xc4a)](this);},Sprite_Actor[_0x4fbf70(0x92c)][_0x4fbf70(0xa72)]=function(){return Sprite_Battler['_motionSpeed'];},Sprite_Weapon['prototype'][_0x4fbf70(0xa11)]=function(){return Sprite_Battler['_motionSpeed'];},Sprite_Actor[_0x4fbf70(0x92c)][_0x4fbf70(0x5fd)]=function(){},Sprite_Actor[_0x4fbf70(0x92c)][_0x4fbf70(0x2b2)]=function(){},Sprite_Actor[_0x4fbf70(0x92c)][_0x4fbf70(0x224)]=function(){const _0x58bdbd=_0x4fbf70;if(this['_motion']&&++this['_motionCount']>=this[_0x58bdbd(0xa72)]()){if(this['_motion'][_0x58bdbd(0x460)]){if(_0x58bdbd(0xb28)!==_0x58bdbd(0x80f))this[_0x58bdbd(0x1b0)]=(this['_pattern']+0x1)%0x4;else return _0x15186f[_0x58bdbd(0xae2)][_0x58bdbd(0x837)][_0x58bdbd(0x202)][_0x58bdbd(0x3dc)][_0x58bdbd(0xc4a)](this);}else this[_0x58bdbd(0x1b0)]<0x2?this['_pattern']++:this[_0x58bdbd(0x2f0)]();this['_motionCount']=0x0;}},Sprite_Actor['prototype'][_0x4fbf70(0xc00)]=function(_0x48a84b){const _0x3140cc=_0x4fbf70;if(_0x48a84b===_0x3140cc(0x64c))this[_0x3140cc(0x9ea)]=!![];if(this[_0x3140cc(0x80d)]&&this[_0x3140cc(0x80d)][_0x3140cc(0x521)]()){this[_0x3140cc(0x544)]=Sprite_Actor[_0x3140cc(0x4c2)][_0x3140cc(0xd18)];return;}const _0x212d30=Sprite_Actor[_0x3140cc(0x4c2)][_0x48a84b];this[_0x3140cc(0x544)]=_0x212d30,this[_0x3140cc(0xbf1)]=0x0,this['_pattern']=0x0;},Sprite_Actor[_0x4fbf70(0x92c)][_0x4fbf70(0x581)]=function(_0x1dcd3d){const _0x23e62b=_0x4fbf70;if(this[_0x23e62b(0xcc4)]())return;this[_0x23e62b(0x992)](),this[_0x23e62b(0x651)][_0x23e62b(0xc55)](_0x1dcd3d),this[_0x23e62b(0x371)][_0x23e62b(0x5b2)]();},Sprite_Actor[_0x4fbf70(0x92c)][_0x4fbf70(0x992)]=function(){const _0x1ddcd3=_0x4fbf70;let _0x514a61=-0x10,_0x4f6b66=this['height']*0.5;const _0x3c1e6b=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x26ab07=this[_0x1ddcd3(0x80d)][_0x1ddcd3(0xabd)]()[_0x1ddcd3(0x990)](_0x2e3e2b=>_0x2e3e2b&&_0x2e3e2b[_0x1ddcd3(0x9c1)][_0x1ddcd3(0xc4b)](_0x3c1e6b)?Number(RegExp['$1']):0x0),_0x4b2eb5=this[_0x1ddcd3(0x80d)][_0x1ddcd3(0xabd)]()['map'](_0xf06be2=>_0xf06be2&&_0xf06be2[_0x1ddcd3(0x9c1)]['match'](_0x3c1e6b)?Number(RegExp['$2']):0x0);_0x514a61=_0x26ab07['reduce']((_0x7ef7d9,_0x4407bc)=>_0x7ef7d9+_0x4407bc,_0x514a61),_0x4f6b66=_0x4b2eb5[_0x1ddcd3(0x731)]((_0x418ab3,_0x49599f)=>_0x418ab3+_0x49599f,_0x4f6b66),this[_0x1ddcd3(0x651)]['x']=_0x514a61,this[_0x1ddcd3(0x651)]['y']=_0x4f6b66,this[_0x1ddcd3(0x651)][_0x1ddcd3(0x7b2)]();},Sprite_Weapon[_0x4fbf70(0x92c)]['setup']=function(_0x3a8d9d){const _0x3b0398=_0x4fbf70;this['_weaponImageId']=_0x3a8d9d,this['_animationCount']=-0x1,this['_pattern']=0x0,this[_0x3b0398(0x7d2)](),this[_0x3b0398(0xcc9)]();},Sprite_Actor[_0x4fbf70(0x92c)]['updateTargetPosition']=function(){},Sprite_Actor['prototype'][_0x4fbf70(0x4ef)]=function(){const _0x34087b=_0x4fbf70,_0x3b0c71=VisuMZ[_0x34087b(0xae2)][_0x34087b(0x837)][_0x34087b(0xc03)],_0x2d1a8f=_0x3b0c71[_0x34087b(0xcec)],_0x49d250=_0x3b0c71[_0x34087b(0x593)],_0x1cd5ed=_0x3b0c71[_0x34087b(0xc54)];this['startMove'](-_0x2d1a8f,-_0x49d250,_0x1cd5ed);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xb9c)]=Sprite_Actor['prototype'][_0x4fbf70(0xcc9)],Sprite_Actor[_0x4fbf70(0x92c)][_0x4fbf70(0xcc9)]=function(){const _0x313405=_0x4fbf70;this[_0x313405(0xcc4)]()?this['updateStaticSvBattlerFrames']():(this['applyFreezeMotionFrames'](),VisuMZ[_0x313405(0xae2)][_0x313405(0xb9c)]['call'](this));},Sprite_Actor[_0x4fbf70(0x92c)]['applyFreezeMotionFrames']=function(){const _0x106e23=_0x4fbf70;if(this[_0x106e23(0x80d)]&&this[_0x106e23(0x80d)][_0x106e23(0x5eb)]){const _0x2da1fa=this['_battler']['_freezeMotionData'];this[_0x106e23(0x544)]=Sprite_Actor[_0x106e23(0x4c2)][_0x2da1fa[_0x106e23(0x7c4)]],this[_0x106e23(0x1b0)]=_0x2da1fa[_0x106e23(0x5ee)];const _0x7afb26=this['_weaponSprite'];_0x7afb26[_0x106e23(0x497)](_0x2da1fa['weaponImageId'],_0x2da1fa[_0x106e23(0x5ee)]),this[_0x106e23(0x992)]();}},Sprite_Weapon[_0x4fbf70(0x92c)][_0x4fbf70(0x497)]=function(_0x432cce,_0x29710d){const _0x2ecc63=_0x4fbf70;this[_0x2ecc63(0x6be)]=_0x432cce,this['_animationCount']=-Infinity,this[_0x2ecc63(0x1b0)]=_0x29710d,this[_0x2ecc63(0x7d2)](),this[_0x2ecc63(0xcc9)]();},Sprite_Enemy[_0x4fbf70(0x92c)][_0x4fbf70(0xa77)]=function(){const _0x426b7a=_0x4fbf70;Sprite_Battler[_0x426b7a(0x92c)][_0x426b7a(0xa77)]['call'](this),this['_enemy']=null,this[_0x426b7a(0x921)]=![],this[_0x426b7a(0x33e)]='',this[_0x426b7a(0x906)]=0x0,this[_0x426b7a(0xcc7)]=null,this[_0x426b7a(0x3df)]=0x0,this[_0x426b7a(0x1d5)]=0x0,this['createMainSprite'](),this[_0x426b7a(0x90e)]();},VisuMZ['BattleCore'][_0x4fbf70(0x639)]=Sprite_Enemy['prototype'][_0x4fbf70(0x7b2)],Sprite_Enemy[_0x4fbf70(0x92c)]['update']=function(){const _0x47fd7d=_0x4fbf70;VisuMZ[_0x47fd7d(0xae2)][_0x47fd7d(0x639)]['call'](this),this[_0x47fd7d(0x28d)]();},Sprite_Enemy[_0x4fbf70(0x92c)]['createMainSprite']=function(){const _0x318531=_0x4fbf70;this[_0x318531(0xb1b)]=new Sprite(),this[_0x318531(0xb1b)][_0x318531(0x951)]['x']=0.5,this['_mainSprite'][_0x318531(0x951)]['y']=0x1,this[_0x318531(0x52a)](this[_0x318531(0xb1b)]),this[_0x318531(0x451)]();},Sprite_Enemy[_0x4fbf70(0x92c)][_0x4fbf70(0x70e)]=function(){const _0x1bbd8a=_0x4fbf70;return this[_0x1bbd8a(0x2be)]||this['_mainSprite']||this;},Sprite_Enemy[_0x4fbf70(0x92c)][_0x4fbf70(0x7d2)]=function(_0x2177a7){const _0x500b89=_0x4fbf70;this[_0x500b89(0x597)]=new Bitmap(0x1,0x1);if(this[_0x500b89(0x42f)]()){if('WPTgG'===_0x500b89(0x61c)){const _0x312605=this['_enemy']['svBattlerData']();this['bitmap']=new Bitmap(_0x312605[_0x500b89(0x606)],_0x312605[_0x500b89(0x389)]),this[_0x500b89(0xb1b)]['bitmap']=new Bitmap(0x1,0x1);}else this[_0x500b89(0x931)]();}else{if($gameSystem[_0x500b89(0x2ee)]()){const _0x2edf3c=ImageManager['loadSvEnemy'](_0x2177a7);_0x2edf3c[_0x500b89(0x43e)](this[_0x500b89(0x40a)][_0x500b89(0x8ff)](this,_0x2edf3c));}else{if(_0x500b89(0xc8c)==='nPLsK'){const _0x1614f7=ImageManager['loadEnemy'](_0x2177a7);_0x1614f7[_0x500b89(0x43e)](this[_0x500b89(0x40a)][_0x500b89(0x8ff)](this,_0x1614f7));}else this[_0x500b89(0xd3a)]=_0xaa05ec['visualHpGauge'];}}},Sprite_Enemy['prototype'][_0x4fbf70(0x40a)]=function(_0x247cc6){const _0x409b5a=_0x4fbf70;this[_0x409b5a(0xb1b)][_0x409b5a(0x597)]=_0x247cc6,this[_0x409b5a(0x597)]=new Bitmap(_0x247cc6[_0x409b5a(0x606)],_0x247cc6[_0x409b5a(0x389)]);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xd3c)]=Sprite_Enemy[_0x4fbf70(0x92c)][_0x4fbf70(0xaaa)],Sprite_Enemy[_0x4fbf70(0x92c)][_0x4fbf70(0xaaa)]=function(_0x2cda9b){const _0x456d8a=_0x4fbf70;this['_mainSprite']&&this[_0x456d8a(0xb1b)]['setHue'](_0x2cda9b);},VisuMZ[_0x4fbf70(0xae2)]['Sprite_Enemy_initVisibility']=Sprite_Enemy[_0x4fbf70(0x92c)][_0x4fbf70(0x6da)],Sprite_Enemy['prototype']['initVisibility']=function(){const _0x2b6f9b=_0x4fbf70;if(this[_0x2b6f9b(0x7af)]()){if(_0x2b6f9b(0x718)===_0x2b6f9b(0xb16))return _0x27b8c0[_0x2b6f9b(0xae2)][_0x2b6f9b(0x91a)][_0x2b6f9b(0xc4a)](this);else VisuMZ[_0x2b6f9b(0xae2)]['Sprite_Enemy_initVisibility'][_0x2b6f9b(0xc4a)](this);}else{if('ewhQZ'===_0x2b6f9b(0x2fc)){this[_0x2b6f9b(0x921)]=!this['_enemy'][_0x2b6f9b(0x8a2)]();if(!this[_0x2b6f9b(0x921)]){if(_0x2b6f9b(0xa9b)!==_0x2b6f9b(0xa9b))return 0x0;else this[_0x2b6f9b(0x853)]=0x0;}}else _0x501b83+=_0x4be73f[_0x2b6f9b(0xc9f)]()?-_0x38b17b:_0x395dc9,_0x53ba5a+=_0x21353c;}},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x3f5)]=Sprite_Enemy['prototype'][_0x4fbf70(0x67b)],Sprite_Enemy[_0x4fbf70(0x92c)][_0x4fbf70(0x67b)]=function(){const _0x417746=_0x4fbf70;if(this[_0x417746(0x7af)]())VisuMZ[_0x417746(0xae2)][_0x417746(0x3f5)]['call'](this);},Sprite_Enemy['prototype'][_0x4fbf70(0xcc9)]=function(){const _0x2a36c6=_0x4fbf70;Sprite_Battler[_0x2a36c6(0x92c)]['updateFrame']['call'](this);const _0xcfdc1d=this[_0x2a36c6(0x70e)]()||this;if(!_0xcfdc1d)return;!_0xcfdc1d['bitmap']&&(_0xcfdc1d[_0x2a36c6(0x597)]=new Bitmap(this['width'],this[_0x2a36c6(0x389)]));if(this[_0x2a36c6(0xcc7)]===_0x2a36c6(0xcde)){if(_0x2a36c6(0x734)!=='kRIti')this[_0x2a36c6(0xb1b)][_0x2a36c6(0x782)](0x0,0x0,this[_0x2a36c6(0xb1b)][_0x2a36c6(0x606)],this[_0x2a36c6(0x3df)]);else{if(_0x4dacdd['VisuMZ_2_BattleSystemCTB']&&_0x10705a[_0x2a36c6(0xd43)]())return![];else{if(!_0x4f0d8e[_0x2a36c6(0xae2)][_0x2a36c6(0xa1e)])return![];const _0x209ffe=_0x4e407f[_0x2a36c6(0x1c3)]()['filter'](_0x3822fa=>_0x3822fa[_0x2a36c6(0xb17)]()&&_0x3822fa[_0x2a36c6(0x5a1)]());return _0x209ffe[_0x2a36c6(0x9d2)]>0x0&&_0x4670db['actor']()!==_0x209ffe[_0x209ffe[_0x2a36c6(0x9d2)]-0x1];}}}else{if(_0x2a36c6(0x350)!==_0x2a36c6(0x9a4))_0xcfdc1d[_0x2a36c6(0x782)](0x0,0x0,_0xcfdc1d['bitmap'][_0x2a36c6(0x606)],this[_0x2a36c6(0x597)][_0x2a36c6(0x389)]);else return this['isForOpponentBattleCore']();}},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xa2e)]=Sprite_Enemy[_0x4fbf70(0x92c)][_0x4fbf70(0xa5d)],Sprite_Enemy[_0x4fbf70(0x92c)][_0x4fbf70(0xa5d)]=function(){const _0x2ee9d7=_0x4fbf70;if(this['allowCollapse']())VisuMZ[_0x2ee9d7(0xae2)][_0x2ee9d7(0xa2e)][_0x2ee9d7(0xc4a)](this);},Sprite_Enemy['prototype'][_0x4fbf70(0x499)]=function(){const _0x43c834=_0x4fbf70;return Sprite_Battler[_0x43c834(0x92c)][_0x43c834(0x499)][_0x43c834(0xc4a)](this);},VisuMZ[_0x4fbf70(0xae2)]['Sprite_Enemy_updateStateSprite']=Sprite_Enemy['prototype']['updateStateSprite'],Sprite_Enemy['prototype'][_0x4fbf70(0x436)]=function(){const _0x353557=_0x4fbf70;VisuMZ[_0x353557(0xae2)][_0x353557(0x3ad)][_0x353557(0xc4a)](this),this['updateStateSpriteBattleCore']();},Sprite_Enemy[_0x4fbf70(0x92c)][_0x4fbf70(0x7e5)]=function(){const _0x494f9a=_0x4fbf70,_0x36480d=VisuMZ['BattleCore'][_0x494f9a(0x837)][_0x494f9a(0x73f)];if(_0x36480d[_0x494f9a(0xa02)]&&!_0x36480d[_0x494f9a(0x7d4)]){this[_0x494f9a(0x41d)][_0x494f9a(0x853)]=0x0;return;}this[_0x494f9a(0x41d)]['x']=0x0,this[_0x494f9a(0x41d)]['x']+=this['_battler'][_0x494f9a(0x67a)](),this[_0x494f9a(0x41d)]['y']=-this[_0x494f9a(0x597)][_0x494f9a(0x389)]-this[_0x494f9a(0x41d)][_0x494f9a(0x389)]-0x4,this['_stateIconSprite']['y']+=this[_0x494f9a(0x80d)]['battleUIOffsetY'](),this[_0x494f9a(0x41d)][_0x494f9a(0xbfa)]['x']=0x1/(this[_0x494f9a(0xbfa)]['x']||0.001),this[_0x494f9a(0x41d)]['scale']['y']=0x1/(this[_0x494f9a(0xbfa)]['y']||0.001),this[_0x494f9a(0x42f)]()&&(_0x494f9a(0x9c3)!==_0x494f9a(0x340)?(this['_svBattlerSprite'][_0x494f9a(0xa59)][_0x494f9a(0xbfa)]['x']=-0x1/(this[_0x494f9a(0xbfa)]['x']||0.001),this['_svBattlerSprite'][_0x494f9a(0xa59)][_0x494f9a(0xbfa)]['y']=0x1/(this[_0x494f9a(0xbfa)]['y']||0.001)):(this[_0x494f9a(0x980)](![]),this[_0x494f9a(0x9aa)]=_0xe8be,this[_0x494f9a(0x5f0)]=_0x582975));},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x879)]=Sprite_Enemy[_0x4fbf70(0x92c)][_0x4fbf70(0xaf4)],Sprite_Enemy[_0x4fbf70(0x92c)][_0x4fbf70(0xaf4)]=function(_0x87fdd2){const _0x1a7d18=_0x4fbf70;VisuMZ[_0x1a7d18(0xae2)][_0x1a7d18(0x879)][_0x1a7d18(0xc4a)](this,_0x87fdd2),this[_0x1a7d18(0xa12)](_0x87fdd2);},Sprite_Enemy[_0x4fbf70(0x92c)]['setSvBattlerSprite']=function(_0x50adb7){const _0x102a10=_0x4fbf70;!this['_svBattlerSprite']&&(_0x102a10(0xd84)!=='qiqjz'?(this[_0x102a10(0xcd7)]=new Sprite_SvEnemy(_0x50adb7),this[_0x102a10(0x451)]()):(this[_0x102a10(0x596)]()?(this[_0x102a10(0x9e4)]['show'](),this[_0x102a10(0xa2c)][_0x102a10(0x7aa)](),this[_0x102a10(0xd49)][_0x102a10(0xd3e)]()):_0x3397d2[_0x102a10(0xae2)][_0x102a10(0xcb3)][_0x102a10(0xc4a)](this),this[_0x102a10(0x43d)]())),this['_svBattlerSprite'][_0x102a10(0xaf4)](_0x50adb7);},Sprite_Enemy[_0x4fbf70(0x92c)][_0x4fbf70(0x42f)]=function(){const _0x157596=_0x4fbf70;return this['_enemy']&&this[_0x157596(0x7fa)]['hasSvBattler']();},Sprite_Enemy[_0x4fbf70(0x92c)]['allowCollapse']=function(){const _0x22c6cb=_0x4fbf70;if(this[_0x22c6cb(0x42f)]()){if(_0x22c6cb(0x977)!==_0x22c6cb(0x57d))return this['_enemy'][_0x22c6cb(0x7af)]();else{const _0x31c7fa=this['itemLineRect'](this['index']());let _0x38aafa=this[_0x22c6cb(0xbb5)](this[_0x22c6cb(0x331)]());_0x38aafa=_0x38aafa['replace'](/\\I\[(\d+)\]/gi,''),_0x78bf2['resetFontSettings'](),this[_0x22c6cb(0x35f)](_0x38aafa,_0x31c7fa),this[_0x22c6cb(0x66f)](_0x38aafa,_0x31c7fa),this[_0x22c6cb(0x395)](_0x38aafa,_0x31c7fa);}}else{if(_0x22c6cb(0x883)===_0x22c6cb(0x95c))_0x253fe3[_0x22c6cb(0x92c)][_0x22c6cb(0xab7)][_0x22c6cb(0xc4a)](this,_0x38bfa4,_0x3d7202,_0x4fe0aa,_0x4adb8f,_0x564dd5);else return!![];}},Sprite_Enemy['prototype'][_0x4fbf70(0x2f0)]=function(){const _0xbfffd3=_0x4fbf70;this[_0xbfffd3(0x42f)]()&&('xnZql'===_0xbfffd3(0xb3d)?this['_svBattlerSprite'][_0xbfffd3(0x2f0)]():(this[_0xbfffd3(0x5de)]=this[_0xbfffd3(0x3ae)][_0xbfffd3(0xb12)](0x0),this[_0xbfffd3(0x991)]=0x0,this['_target']=this['_allTargets'][0x0]||null,this[_0xbfffd3(0x3e4)]=_0xbfffd3(0x6b1)));},Sprite_Enemy[_0x4fbf70(0x92c)]['forceMotion']=function(_0x16237d){const _0x59714a=_0x4fbf70;if(this[_0x59714a(0x42f)]())this['_svBattlerSprite'][_0x59714a(0xc00)](_0x16237d);},Sprite_Enemy[_0x4fbf70(0x92c)][_0x4fbf70(0x581)]=function(_0x6a49ea){const _0x523e6a=_0x4fbf70;if(this['hasSvBattler']())this[_0x523e6a(0xcd7)][_0x523e6a(0x581)](_0x6a49ea);},Sprite_Enemy[_0x4fbf70(0x92c)][_0x4fbf70(0x4ef)]=function(){const _0x142bd9=_0x4fbf70,_0x257381=VisuMZ['BattleCore'][_0x142bd9(0x837)][_0x142bd9(0xc03)],_0x32b596=_0x257381[_0x142bd9(0xcec)],_0x20c36=_0x257381[_0x142bd9(0x593)],_0x49d778=_0x257381[_0x142bd9(0xc54)];this['startMove'](_0x32b596,_0x20c36,_0x49d778);};function Sprite_SvEnemy(){const _0x51f643=_0x4fbf70;this[_0x51f643(0x691)](...arguments);}Sprite_SvEnemy['prototype']=Object[_0x4fbf70(0xadc)](Sprite_Actor[_0x4fbf70(0x92c)]),Sprite_SvEnemy[_0x4fbf70(0x92c)][_0x4fbf70(0x631)]=Sprite_SvEnemy,Sprite_SvEnemy[_0x4fbf70(0x92c)]['initialize']=function(_0x31bd7d){const _0x4c457d=_0x4fbf70;Sprite_Actor[_0x4c457d(0x92c)][_0x4c457d(0x691)][_0x4c457d(0xc4a)](this,_0x31bd7d),this[_0x4c457d(0xbfa)]['x']=-0x1,this[_0x4c457d(0xa59)][_0x4c457d(0xbfa)]['x']=-0x1;},Sprite_SvEnemy['prototype'][_0x4fbf70(0x8df)]=function(){},Sprite_SvEnemy[_0x4fbf70(0x92c)]['moveToStartPosition']=function(){},Sprite_SvEnemy[_0x4fbf70(0x92c)]['setActorHome']=function(_0x583a04){},Sprite_SvEnemy[_0x4fbf70(0x92c)][_0x4fbf70(0xb78)]=function(){},Sprite_SvEnemy[_0x4fbf70(0x92c)][_0x4fbf70(0x619)]=function(){},Sprite_SvEnemy['prototype'][_0x4fbf70(0x436)]=function(){const _0x29a8e9=_0x4fbf70;this[_0x29a8e9(0xa59)][_0x29a8e9(0x737)]=![];},Sprite_SvEnemy['prototype']['updateBitmap']=function(){const _0x2c154=_0x4fbf70;Sprite_Battler[_0x2c154(0x92c)]['updateBitmap'][_0x2c154(0xc4a)](this);const _0x12c179=this[_0x2c154(0x371)][_0x2c154(0x278)]();if(this['_battlerName']!==_0x12c179){if(_0x2c154(0x8cb)!==_0x2c154(0x8cb)){this['requestMotion']('dead');return;}else this[_0x2c154(0x33e)]=_0x12c179,this['_mainSprite'][_0x2c154(0x597)]=ImageManager['loadSvActor'](_0x12c179);}if(this[_0x2c154(0xb1b)]&&this['_mainSprite']['bitmap']&&this['_battler']){if(_0x2c154(0x5cc)===_0x2c154(0x5cc))this[_0x2c154(0xb1b)]['bitmap'][_0x2c154(0x3a9)]!==this[_0x2c154(0x80d)][_0x2c154(0xcb6)]()&&(this[_0x2c154(0xb1b)][_0x2c154(0x597)][_0x2c154(0x3a9)]=this[_0x2c154(0x80d)][_0x2c154(0xcb6)]());else{_0x3b25e9('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),_0x59d6f2[_0x2c154(0x4c5)]();return;}}},Sprite_SvEnemy['prototype'][_0x4fbf70(0x2ef)]=function(){},Sprite_SvEnemy['prototype'][_0x4fbf70(0x256)]=function(_0x48d2d4,_0x733aeb,_0x24681c){const _0x399a29=_0x4fbf70;if(this[_0x399a29(0x635)])this[_0x399a29(0x635)][_0x399a29(0x256)](_0x48d2d4,_0x733aeb,_0x24681c);},Sprite_SvEnemy[_0x4fbf70(0x92c)][_0x4fbf70(0x2f0)]=function(){const _0x3a0a76=_0x4fbf70,_0x4a6adb=this[_0x3a0a76(0x371)];if(_0x4a6adb){const _0x563c90=_0x4a6adb[_0x3a0a76(0x963)]();if(_0x4a6adb[_0x3a0a76(0x5dd)]()||_0x4a6adb[_0x3a0a76(0x732)]())this[_0x3a0a76(0x1f4)](_0x3a0a76(0xcdb));else{if(_0x563c90===0x3){if(_0x3a0a76(0xbd2)==='uKXyv')this[_0x3a0a76(0x1f4)](_0x3a0a76(0xd18));else{if(this[_0x3a0a76(0x55a)]()[_0x3a0a76(0x9c1)][_0x3a0a76(0xc4b)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return _0x53dca9(_0x471379['$1']);else{if(this['actor']()['note'][_0x3a0a76(0xc4b)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return _0x1fd069(_0x16794b['$2']);}return 0x0;}}else{if(_0x563c90===0x2)this['startMotion'](_0x3a0a76(0x922));else{if(_0x4a6adb['isChanting']())_0x3a0a76(0x372)===_0x3a0a76(0x372)?this['startMotion']('chant'):(this[_0x3a0a76(0x900)]=_0x206f3f,this[_0x3a0a76(0x7ff)]={});else{if(_0x4a6adb[_0x3a0a76(0x612)]()||_0x4a6adb['isGuardWaiting']())this[_0x3a0a76(0x1f4)](_0x3a0a76(0x73a));else{if(_0x563c90===0x1)this[_0x3a0a76(0x1f4)](_0x3a0a76(0x303));else{if(_0x4a6adb[_0x3a0a76(0x4fe)]())this[_0x3a0a76(0x1f4)]('dying');else{if(_0x4a6adb['isUndecided']())this[_0x3a0a76(0x1f4)](_0x3a0a76(0xcdb));else{if(_0x3a0a76(0x653)!=='jUxHG'){const _0x2d1045=this[_0x3a0a76(0x4e4)](),_0xc9818d=this['stateMotionIndex']();_0x125404[_0x3a0a76(0xae2)][_0x3a0a76(0x37f)][_0x3a0a76(0xc4a)](this,_0x3c3dca),this['isEnemy']()&&_0x2d1045&&this[_0x3a0a76(0x521)]()&&(this['_visualHpGauge_JustDied']=!this[_0x3a0a76(0x902)](),_0x3eda28['registerDefeatedEnemy'](this[_0x3a0a76(0x3ea)]())),_0x4a3915[_0x3a0a76(0x90d)]()&&_0xc9818d!==this['stateMotionIndex']()&&(this[_0x3a0a76(0xb81)]()&&this[_0x3a0a76(0xb81)]()[_0x3a0a76(0x2f0)]());}else this[_0x3a0a76(0x1f4)](_0x4a6adb[_0x3a0a76(0x82b)]()['motionIdle']||_0x3a0a76(0xcdb));}}}}}}}}}},Sprite_SvEnemy['prototype']['inHomePosition']=function(){const _0x39cdf7=_0x4fbf70;if(this[_0x39cdf7(0x635)])return this['parent'][_0x39cdf7(0xa6c)]===0x0&&this['parent']['_offsetY']===0x0;else{if(_0x39cdf7(0xaf6)!=='cjxgR'){if(!_0x2c2799[_0x39cdf7(0x90d)]())return;_0x1caebd['ConvertParams'](_0x406854,_0x28ba7b);const _0x145484=_0x2de5ce['_logWindow'],_0x5397f3=_0x5cd914[_0x39cdf7(0x661)]&&_0x11e8b1[_0x39cdf7(0x855)];_0x145484[_0x39cdf7(0xb70)](_0xbbd027[_0x39cdf7(0xcca)]),_0x5397f3&&_0x59cce7[_0x39cdf7(0x855)]&&_0x2161ee[_0x39cdf7(0x24f)](_0x14c53a['Text']||'',_0x1864c6[_0x39cdf7(0x905)]||0x0);}else return!![];}},Sprite_SvEnemy[_0x4fbf70(0x92c)][_0x4fbf70(0x9b7)]=function(){},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x2ad)]=Sprite_Animation['prototype'][_0x4fbf70(0x7ac)],Sprite_Animation['prototype'][_0x4fbf70(0x7ac)]=function(_0x26ae07){const _0x4a98ae=_0x4fbf70;return _0x26ae07['_distortionSprite']?this['targetDistortionSpritePosition'](_0x26ae07):VisuMZ[_0x4a98ae(0xae2)][_0x4a98ae(0x2ad)][_0x4a98ae(0xc4a)](this,_0x26ae07);},Sprite_Animation['prototype']['targetDistortionSpritePosition']=function(_0x370ea6){const _0x12a7eb=_0x4fbf70;let _0x43cc3d=_0x370ea6['x'],_0x226e3d=_0x370ea6['y'],_0x408d06=_0x370ea6['height'],_0x1c4e49=_0x370ea6['_distortionSprite'][_0x12a7eb(0xbfa)]['y'];_0x370ea6['x']=_0x370ea6['_baseX']+_0x370ea6['extraPositionX'](),_0x370ea6['y']=_0x370ea6['_baseY']+_0x370ea6['extraPositionY'](),_0x370ea6[_0x12a7eb(0x389)]*=_0x1c4e49;let _0x4afe63=VisuMZ[_0x12a7eb(0xae2)]['Sprite_Animation_targetSpritePosition'][_0x12a7eb(0xc4a)](this,_0x370ea6);return _0x370ea6['x']=_0x43cc3d,_0x370ea6['y']=_0x226e3d,_0x370ea6[_0x12a7eb(0x389)]=_0x408d06,_0x4afe63;},VisuMZ['BattleCore']['Sprite_AnimationMV_updatePosition']=Sprite_AnimationMV[_0x4fbf70(0x92c)][_0x4fbf70(0xd25)],Sprite_AnimationMV[_0x4fbf70(0x92c)]['updatePosition']=function(){const _0x31d471=_0x4fbf70;VisuMZ[_0x31d471(0xae2)][_0x31d471(0x1d3)][_0x31d471(0xc4a)](this);if(!SceneManager[_0x31d471(0x90d)]())return;if(this['_animation'][_0x31d471(0xd1e)]===0x3)this['x']=Math[_0x31d471(0xbec)](Graphics[_0x31d471(0x2d5)]/0x2),this['y']=Math[_0x31d471(0xbec)](Graphics[_0x31d471(0xa30)]/0x2);else{if(this[_0x31d471(0x338)])return;}},Sprite_Damage[_0x4fbf70(0x92c)][_0x4fbf70(0xc23)]=function(_0x4271d9){const _0x748986=_0x4fbf70,_0x49aa62=_0x4271d9[_0x748986(0xa00)]()||_0x4271d9[_0x748986(0xc07)]();if(_0x49aa62[_0x748986(0x658)]||_0x49aa62['evaded'])this[_0x748986(0xa55)]=0x0,this['createMiss']();else{if(_0x49aa62[_0x748986(0x762)])this['_colorType']=_0x49aa62[_0x748986(0xd4f)]>=0x0?0x0:0x1,this[_0x748986(0x55c)](_0x49aa62[_0x748986(0xd4f)]);else _0x4271d9[_0x748986(0x4e4)]()&&_0x49aa62[_0x748986(0x807)]!==0x0&&(this[_0x748986(0xa55)]=_0x49aa62['mpDamage']>=0x0?0x2:0x3,this[_0x748986(0x55c)](_0x49aa62['mpDamage']));}_0x49aa62['critical']&&this[_0x748986(0x19d)]();},Sprite_Damage[_0x4fbf70(0x92c)]['setup']=function(_0x1a071d){},Sprite_Damage[_0x4fbf70(0x92c)][_0x4fbf70(0x55c)]=function(_0x6f0435){const _0x6a8c1f=_0x4fbf70;let _0x3a7c57=this[_0x6a8c1f(0xd12)](_0x6f0435);const _0x1f7757=this[_0x6a8c1f(0x31d)](),_0x412167=Math['floor'](_0x1f7757*0.75);for(let _0x6e07d6=0x0;_0x6e07d6<_0x3a7c57[_0x6a8c1f(0x9d2)];_0x6e07d6++){const _0x241b2c=this[_0x6a8c1f(0x3bb)](_0x412167,_0x1f7757);_0x241b2c[_0x6a8c1f(0x597)][_0x6a8c1f(0x73c)](_0x3a7c57[_0x6e07d6],0x0,0x0,_0x412167,_0x1f7757,_0x6a8c1f(0xc5c)),_0x241b2c['x']=(_0x6e07d6-(_0x3a7c57[_0x6a8c1f(0x9d2)]-0x1)/0x2)*_0x412167,_0x241b2c['dy']=-_0x6e07d6;}},Sprite_Damage['prototype'][_0x4fbf70(0xd12)]=function(_0x2150e4){const _0x404378=_0x4fbf70;let _0x38ab2b=Math[_0x404378(0x77e)](_0x2150e4)[_0x404378(0x2b4)]();this[_0x404378(0x1ed)]()&&(_0x38ab2b=VisuMZ[_0x404378(0x2f5)](_0x38ab2b));const _0x381ead=VisuMZ[_0x404378(0xae2)][_0x404378(0x837)]['Damage'];let _0x391412='',_0x11daf3='';switch(this[_0x404378(0xa55)]){case 0x0:_0x391412=_0x381ead['hpDamageFmt']||'-%1',_0x11daf3=TextManager['hp'];if(_0x2150e4===0x0)_0x391412='%1';break;case 0x1:_0x391412=_0x381ead[_0x404378(0xba9)]||'+%1',_0x11daf3=TextManager['hp'];break;case 0x2:_0x391412=_0x381ead[_0x404378(0xad1)]||_0x404378(0xb6e),_0x11daf3=TextManager['mp'];break;case 0x3:_0x391412=_0x381ead['mpHealingFmt']||_0x404378(0x655),_0x11daf3=TextManager['mp'];break;}return _0x391412[_0x404378(0x946)](_0x38ab2b,_0x11daf3)[_0x404378(0xcda)]();},Sprite_Damage[_0x4fbf70(0x92c)][_0x4fbf70(0x1ed)]=function(){const _0xa81c2c=_0x4fbf70;return Imported[_0xa81c2c(0xcaf)]?VisuMZ[_0xa81c2c(0xbbb)][_0xa81c2c(0x837)][_0xa81c2c(0x824)][_0xa81c2c(0x6bb)]:![];},Sprite_Damage[_0x4fbf70(0x92c)][_0x4fbf70(0x19d)]=function(){const _0x21cd92=_0x4fbf70,_0x2041e7=VisuMZ[_0x21cd92(0xae2)][_0x21cd92(0x837)]['Damage'];this['_flashColor']=_0x2041e7[_0x21cd92(0xc28)][_0x21cd92(0xb12)](0x0),this['_flashDuration']=_0x2041e7['CriticalDuration'];},Sprite_Damage[_0x4fbf70(0x92c)][_0x4fbf70(0x5e8)]=function(_0x148b65,_0x16803f){const _0x427265=_0x4fbf70;this['_flashColor']=_0x16803f['flashColor']||[0x0,0x0,0x0,0x0],this[_0x427265(0x915)]=JsonEx['makeDeepCopy'](this['_flashColor']),this[_0x427265(0x212)]=_0x16803f[_0x427265(0x4d6)]||0x0;const _0x49e19c=this[_0x427265(0x31d)](),_0x3eaaef=Math[_0x427265(0xb2d)](_0x49e19c*0x1e),_0xf7fce8=this['createChildSprite'](_0x3eaaef,_0x49e19c);_0xf7fce8[_0x427265(0x597)][_0x427265(0xc46)]=ColorManager[_0x427265(0xa73)](_0x16803f[_0x427265(0xc46)]),_0xf7fce8[_0x427265(0x597)][_0x427265(0x73c)](_0x148b65,0x0,0x0,_0x3eaaef,_0x49e19c,_0x427265(0xc5c)),_0xf7fce8['dy']=0x0;},Sprite_Damage['prototype']['setupIconTextPopup']=function(_0x334123,_0xae1ce0,_0x2dd8f4){const _0x19f0ae=_0x4fbf70,_0x1baebb=Math[_0x19f0ae(0x6f0)](this[_0x19f0ae(0x31d)](),ImageManager[_0x19f0ae(0x3f6)]),_0x41f2f0=Math['floor'](_0x1baebb*0x1e),_0x24752a=this[_0x19f0ae(0x3bb)](_0x41f2f0,_0x1baebb),_0x2698d5=ImageManager[_0x19f0ae(0xa8e)]/0x2,_0x20828f=_0x24752a[_0x19f0ae(0x597)][_0x19f0ae(0x8a9)](_0xae1ce0+'\x20');_0x24752a[_0x19f0ae(0x597)][_0x19f0ae(0xc46)]=ColorManager[_0x19f0ae(0xa73)](_0x2dd8f4[_0x19f0ae(0xc46)]),_0x24752a[_0x19f0ae(0x597)][_0x19f0ae(0x73c)](_0xae1ce0,_0x2698d5,0x0,_0x41f2f0-_0x2698d5,_0x1baebb,_0x19f0ae(0xc5c));const _0x4bb123=Math[_0x19f0ae(0xbec)]((_0x1baebb-ImageManager[_0x19f0ae(0x3f6)])/0x2),_0x46367e=_0x41f2f0/0x2-ImageManager[_0x19f0ae(0xa8e)]-_0x20828f/0x2+_0x2698d5/0x2,_0x2eafb4=ImageManager[_0x19f0ae(0x5b7)](_0x19f0ae(0x8f0)),_0x143b80=ImageManager['iconWidth'],_0x281383=ImageManager[_0x19f0ae(0x3f6)],_0x23b32f=_0x334123%0x10*_0x143b80,_0x2f4ce0=Math[_0x19f0ae(0xb2d)](_0x334123/0x10)*_0x281383;_0x24752a[_0x19f0ae(0x597)][_0x19f0ae(0x579)](_0x2eafb4,_0x23b32f,_0x2f4ce0,_0x143b80,_0x281383,_0x46367e,_0x4bb123),this['_flashColor']=_0x2dd8f4[_0x19f0ae(0x5d3)]||[0x0,0x0,0x0,0x0],this[_0x19f0ae(0x915)]=JsonEx[_0x19f0ae(0xca7)](this[_0x19f0ae(0x915)]),this[_0x19f0ae(0x212)]=_0x2dd8f4[_0x19f0ae(0x4d6)]||0x0,_0x24752a['dy']=0x0;},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xb8a)]=Sprite_Damage[_0x4fbf70(0x92c)]['createChildSprite'],Sprite_Damage['prototype'][_0x4fbf70(0x3bb)]=function(_0x3dfd6c,_0x4f0470){const _0x3becf9=_0x4fbf70;return _0x4f0470=Math[_0x3becf9(0xbec)](_0x4f0470*1.2),VisuMZ[_0x3becf9(0xae2)][_0x3becf9(0xb8a)]['call'](this,_0x3dfd6c,_0x4f0470);},VisuMZ[_0x4fbf70(0xae2)]['Sprite_StateIcon_updateFrame']=Sprite_StateIcon['prototype']['updateFrame'],Sprite_StateIcon[_0x4fbf70(0x92c)][_0x4fbf70(0xcc9)]=function(){const _0x2c301c=_0x4fbf70;VisuMZ[_0x2c301c(0xae2)][_0x2c301c(0x42a)][_0x2c301c(0xc4a)](this),this[_0x2c301c(0x853)]=this[_0x2c301c(0x6ff)]>0x0?0xff:0x0;},VisuMZ['BattleCore'][_0x4fbf70(0x733)]=Sprite_Weapon['prototype'][_0x4fbf70(0x7d2)],Sprite_Weapon[_0x4fbf70(0x92c)][_0x4fbf70(0x7d2)]=function(){const _0x305177=_0x4fbf70;VisuMZ['BattleCore'][_0x305177(0x733)][_0x305177(0xc4a)](this),this[_0x305177(0x597)]&&(_0x305177(0x660)==='qkVtI'?this[_0x305177(0x597)][_0x305177(0x3a9)]=VisuMZ[_0x305177(0xae2)]['Settings']['Actor']['SmoothImage']:(this[_0x305177(0x818)]=this[_0x305177(0xd21)],this['_homeY']=this[_0x305177(0x449)]));},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x4da)]=Sprite_Gauge[_0x4fbf70(0x92c)][_0x4fbf70(0xd40)],Sprite_Gauge[_0x4fbf70(0x92c)][_0x4fbf70(0xd40)]=function(){const _0x368510=_0x4fbf70;if(this[_0x368510(0x244)]!=='time'){if(_0x368510(0x35e)===_0x368510(0x35e))return VisuMZ['BattleCore'][_0x368510(0x837)]['HpGauge'][_0x368510(0xd28)]??0x14;else this[_0x368510(0xd6a)]();}else return VisuMZ['BattleCore'][_0x368510(0x4da)][_0x368510(0xc4a)](this);};function Sprite_HpGauge(){const _0x1a8a69=_0x4fbf70;this[_0x1a8a69(0x691)](...arguments);}Sprite_HpGauge[_0x4fbf70(0x92c)]=Object[_0x4fbf70(0xadc)](Sprite_Gauge['prototype']),Sprite_HpGauge[_0x4fbf70(0x92c)][_0x4fbf70(0x631)]=Sprite_HpGauge,Sprite_HpGauge[_0x4fbf70(0x92c)][_0x4fbf70(0x691)]=function(){const _0x3444c7=_0x4fbf70;Sprite_Gauge['prototype'][_0x3444c7(0x691)][_0x3444c7(0xc4a)](this);},Sprite_HpGauge[_0x4fbf70(0x92c)][_0x4fbf70(0x391)]=function(){return 0x0;},Sprite_HpGauge['prototype'][_0x4fbf70(0x92b)]=function(){const _0x24170b=_0x4fbf70;this[_0x24170b(0x597)][_0x24170b(0xb36)]();const _0xc05a0d=this['currentValue']();if(!isNaN(_0xc05a0d)){if(_0x24170b(0xd39)!=='BNEzF')this['drawGauge']();else return this[_0x24170b(0x79f)]('DTB');}};function Sprite_EnemyName(){const _0xa77e43=_0x4fbf70;this[_0xa77e43(0x691)](...arguments);}Sprite_EnemyName[_0x4fbf70(0x92c)]=Object[_0x4fbf70(0xadc)](Sprite_Name[_0x4fbf70(0x92c)]),Sprite_EnemyName['prototype'][_0x4fbf70(0x631)]=Sprite_EnemyName,Sprite_EnemyName[_0x4fbf70(0x92c)][_0x4fbf70(0x691)]=function(){const _0x2f5a78=_0x4fbf70;Sprite_Name[_0x2f5a78(0x92c)]['initialize']['call'](this),this['createAttachedSprites']();},Sprite_EnemyName[_0x4fbf70(0x92c)][_0x4fbf70(0xa77)]=function(){const _0x2694f4=_0x4fbf70;Sprite_Name[_0x2694f4(0x92c)][_0x2694f4(0xa77)][_0x2694f4(0xc4a)](this),this[_0x2694f4(0x853)]=0x0,this['_linkedSprite']=null,this[_0x2694f4(0x951)]['x']=0.5,this[_0x2694f4(0x951)]['y']=0x0;},Sprite_EnemyName[_0x4fbf70(0x92c)][_0x4fbf70(0xaf2)]=function(){const _0x26aa37=_0x4fbf70;VisuMZ['BattleCore'][_0x26aa37(0x837)][_0x26aa37(0x73f)][_0x26aa37(0xa02)]&&(this[_0x26aa37(0x41d)]=new Sprite_StateIcon(),this[_0x26aa37(0x52a)](this[_0x26aa37(0x41d)]));},Sprite_EnemyName[_0x4fbf70(0x92c)][_0x4fbf70(0x742)]=function(){const _0x1ea949=_0x4fbf70;return Graphics[_0x1ea949(0x2d5)];},Sprite_EnemyName[_0x4fbf70(0x92c)][_0x4fbf70(0xbe5)]=function(){const _0x4385f7=_0x4fbf70;return this['_lineHeight']=this['_lineHeight']||Window_Base[_0x4385f7(0x92c)][_0x4385f7(0x445)]()||0x24,this[_0x4385f7(0x6e9)]*0x4;},Sprite_EnemyName[_0x4fbf70(0x92c)][_0x4fbf70(0x31d)]=function(){const _0x1f557f=_0x4fbf70;return VisuMZ['BattleCore'][_0x1f557f(0x837)]['Enemy'][_0x1f557f(0xa82)]||$gameSystem[_0x1f557f(0xcd0)]();},Sprite_EnemyName[_0x4fbf70(0x92c)]['linkSprite']=function(_0x2c3603){this['_linkedSprite']=_0x2c3603;},Sprite_EnemyName['prototype'][_0x4fbf70(0x7b2)]=function(){const _0x2224c5=_0x4fbf70;Sprite_Name[_0x2224c5(0x92c)][_0x2224c5(0x7b2)]['call'](this),this[_0x2224c5(0x7ce)](),this[_0x2224c5(0xd25)](),this[_0x2224c5(0x64a)](),this[_0x2224c5(0xd54)]();},Sprite_EnemyName[_0x4fbf70(0x92c)][_0x4fbf70(0x92b)]=function(){const _0x46f312=_0x4fbf70;this['_cacheTextWidth']=undefined;const _0x1e81b6=this[_0x46f312(0x27a)](),_0x23d357=this[_0x46f312(0x742)](),_0x16cc05=Window_Base[_0x46f312(0x92c)][_0x46f312(0x445)]();this[_0x46f312(0xa88)](),this[_0x46f312(0x597)][_0x46f312(0xb36)](),this[_0x46f312(0x597)]['drawText'](_0x1e81b6,0x0,0x0,_0x23d357,_0x16cc05,_0x46f312(0xc5c));},Sprite_EnemyName[_0x4fbf70(0x92c)]['updateLink']=function(){const _0x24deba=_0x4fbf70;if(!this[_0x24deba(0x6f6)])return;this['_battler']!==this[_0x24deba(0x6f6)][_0x24deba(0x80d)]&&this['setup'](this['_linkedSprite'][_0x24deba(0x80d)]);},Sprite_EnemyName['prototype'][_0x4fbf70(0xd25)]=function(){const _0x22df8a=_0x4fbf70;if(!this[_0x22df8a(0x6f6)])return;this[_0x22df8a(0x6e9)]=this[_0x22df8a(0x6e9)]||Window_Base[_0x22df8a(0x92c)][_0x22df8a(0x445)](),this['x']=Math['round'](this[_0x22df8a(0x6f6)][_0x22df8a(0xd6b)]),this['y']=Math['round'](this[_0x22df8a(0x6f6)][_0x22df8a(0x571)]-this[_0x22df8a(0x6e9)]*0.5);const _0x394743=VisuMZ['BattleCore']['Settings'][_0x22df8a(0x73f)];this['x']+=Math[_0x22df8a(0xbec)](_0x394743[_0x22df8a(0x22a)]||0x0),this['y']+=Math[_0x22df8a(0xbec)](_0x394743['NameOffsetY']||0x0);},Sprite_EnemyName['prototype'][_0x4fbf70(0x64a)]=function(){this['updateStateIconSprite']();},Sprite_EnemyName[_0x4fbf70(0x92c)][_0x4fbf70(0x1aa)]=function(){const _0x2634c4=_0x4fbf70;if(!this['_stateIconSprite'])return;if(this[_0x2634c4(0x80d)]!==this[_0x2634c4(0x41d)]['_battler']){if('hWFHH'!=='hWFHH'){if(!_0x57ca05[_0x2634c4(0x4e4)]())return![];}else this[_0x2634c4(0x41d)][_0x2634c4(0xc55)](this['_battler']);}const _0x2add71=this['textWidth']();this[_0x2634c4(0x6e9)]=this[_0x2634c4(0x6e9)]||Window_Base[_0x2634c4(0x92c)][_0x2634c4(0x445)](),this[_0x2634c4(0x41d)]['x']=Math[_0x2634c4(0xbec)]((_0x2add71+ImageManager['iconWidth'])/0x2)+0x8,this[_0x2634c4(0x41d)]['y']=this['_lineHeight']/0x2;const _0x57db33=VisuMZ[_0x2634c4(0xae2)]['Settings'][_0x2634c4(0x73f)];this[_0x2634c4(0x41d)]['x']+=_0x57db33[_0x2634c4(0x8d4)]||0x0,this[_0x2634c4(0x41d)]['y']+=_0x57db33[_0x2634c4(0x834)]||0x0;},Sprite_EnemyName[_0x4fbf70(0x92c)][_0x4fbf70(0xd54)]=function(){const _0x558334=_0x4fbf70,_0x3af862=this['visibilityState']();if(_0x3af862&&this['opacity']<0xff)this[_0x558334(0x853)]+=0x10;else!_0x3af862&&this[_0x558334(0x853)]>0x0&&(this[_0x558334(0x853)]-=0x10);},Sprite_EnemyName[_0x4fbf70(0x92c)][_0x4fbf70(0x370)]=function(){const _0x148e10=_0x4fbf70;if(this[_0x148e10(0x513)]()){if(_0x148e10(0x458)!==_0x148e10(0x458)){if(!this['item']())return![];if(this[_0x148e10(0x5e3)]())return![];return(this['item']()[_0x148e10(0x9c1)]||'')[_0x148e10(0xc4b)](/<SINGLE OR MULTIPLE SELECT>/i);}else return![];}else{if(!this[_0x148e10(0x80d)])return![];else{if(this[_0x148e10(0x80d)]['isDead']())return _0x148e10(0xd37)==='bsxIr'?_0x35199a['isSceneBattle']()?(_0x50fe11[_0x148e10(0x32c)][_0x148e10(0x7cf)][_0x148e10(0xc2d)](_0xe28b1f[0x0],_0x38ff67[0x1]),!![]):_0x267117['BattleCore'][_0x148e10(0x83e)][_0x148e10(0xc4a)](this,_0x36f9c3):![];else{if(!this[_0x148e10(0x80d)]['isAppeared']())return![];else{if(this[_0x148e10(0x8e7)]())return!![];else{if(this[_0x148e10(0x315)]())return!![];else{if(this[_0x148e10(0x673)]()){if(_0x148e10(0x997)===_0x148e10(0x73b))_0x527f0b=_0x27bf8f[_0x148e10(0xc9b)](_0x3b888a[_0x148e10(0x327)](_0x20eae2));else return!![];}else{if(this[_0x148e10(0x853)]>0x0)return![];}}}}}}}},Sprite_EnemyName['prototype'][_0x4fbf70(0x513)]=function(){const _0x4674b0=_0x4fbf70;return VisuMZ[_0x4674b0(0xae2)][_0x4674b0(0x837)][_0x4674b0(0x73f)][_0x4674b0(0x7a2)];},Sprite_EnemyName[_0x4fbf70(0x92c)][_0x4fbf70(0x8e7)]=function(){return![];},Sprite_EnemyName[_0x4fbf70(0x92c)]['isAlwaysVisible']=function(){const _0x4d6c80=_0x4fbf70;return VisuMZ[_0x4d6c80(0xae2)][_0x4d6c80(0x837)][_0x4d6c80(0x73f)][_0x4d6c80(0xb0a)];},Sprite_EnemyName['prototype']['isIncludedInEnemyWindow']=function(){const _0x566f7e=_0x4fbf70;if(VisuMZ[_0x566f7e(0xae2)][_0x566f7e(0x837)][_0x566f7e(0x73f)]['NameAlwaysSelectOnly']){if(_0x566f7e(0x8db)!==_0x566f7e(0x8db)){const _0x3f69bd=_0x2f5d79[_0x566f7e(0x9c1)];if(_0x3f69bd[_0x566f7e(0xc4b)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x3b0ad5=_0x239b09(_0x5f4f83['$1']),_0x55d6fb=_0x37c189[_0x566f7e(0xae2)][_0x566f7e(0xd27)](_0x59302b,_0x566f7e(0x2c9));_0x20064a[_0x566f7e(0xae2)][_0x566f7e(0x2bd)](_0x3b0ad5,_0x55d6fb);}if(_0x3f69bd['match'](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x5edacf=_0x53bdf8(_0x1dfdb7['$1']),_0x1b857c=_0x1ef5af[_0x566f7e(0xae2)]['createKeyJS'](_0x5af66a,_0x566f7e(0x500));_0x4a5ec5[_0x566f7e(0xae2)][_0x566f7e(0x5ef)](_0x5edacf,_0x1b857c);}}else return this[_0x566f7e(0x80d)][_0x566f7e(0x822)]();}else{if(_0x566f7e(0x8e6)===_0x566f7e(0x866)){if(!_0x521f35['isSceneBattle']())return;_0x192065[_0x566f7e(0x334)](_0x59fb60,_0x4558b6);const _0x58c20c=_0x522236[_0x566f7e(0xb15)],_0x2d4f87={'arPenRate':_0x28385b[_0x566f7e(0x7d5)],'arPenFlat':_0x1d577c['ArPenFlat'],'arRedRate':_0x453a60[_0x566f7e(0xc4c)],'arRedFlat':_0x3f9200[_0x566f7e(0x4f9)]};_0x58c20c['_armorPenetration']=_0x2d4f87;}else return SceneManager['_scene'][_0x566f7e(0x569)]&&SceneManager[_0x566f7e(0x32c)][_0x566f7e(0x569)]['active']&&SceneManager[_0x566f7e(0x32c)][_0x566f7e(0x569)][_0x566f7e(0x1ff)][_0x566f7e(0x6e3)](this[_0x566f7e(0x80d)]);}},Sprite_EnemyName[_0x4fbf70(0x92c)][_0x4fbf70(0x2c3)]=function(){const _0x278465=_0x4fbf70;if(!this[_0x278465(0x80d)])return 0x0;if(this[_0x278465(0x4fd)])return this[_0x278465(0x4fd)];const _0x2d97ae=this[_0x278465(0x27a)]();return this[_0x278465(0xa88)](),this[_0x278465(0x4fd)]=this[_0x278465(0x597)][_0x278465(0x8a9)](_0x2d97ae)||0x1,this[_0x278465(0x4fd)];},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xd35)]=Sprite_Battleback[_0x4fbf70(0x92c)]['adjustPosition'],Sprite_Battleback[_0x4fbf70(0x92c)][_0x4fbf70(0xc79)]=function(){const _0x33b40f=_0x4fbf70,_0x2177c5=VisuMZ['BattleCore'][_0x33b40f(0x837)][_0x33b40f(0xb1f)];if(!_0x2177c5)return VisuMZ[_0x33b40f(0xae2)]['Sprite_Battleback_adjustPosition'][_0x33b40f(0xc4a)](this);const _0x46c164=String(_0x2177c5[_0x33b40f(0x260)])||'MZ';switch(_0x46c164){case'MZ':VisuMZ['BattleCore'][_0x33b40f(0xd35)]['call'](this);break;case'1:1':this[_0x33b40f(0x836)]();break;case'ScaleToFit':this[_0x33b40f(0xc5a)]();break;case _0x33b40f(0xa4c):this[_0x33b40f(0x348)]();break;case _0x33b40f(0xcf5):this[_0x33b40f(0x63e)]();break;}},Sprite_Battleback[_0x4fbf70(0x92c)][_0x4fbf70(0x836)]=function(){const _0xdec2dc=_0x4fbf70,_0x25b1fc=VisuMZ[_0xdec2dc(0xae2)][_0xdec2dc(0x837)]['BattlebackScale'];if(_0x25b1fc&&_0x25b1fc[_0xdec2dc(0x8dd)])return _0x25b1fc[_0xdec2dc(0x8dd)]['call'](this);this[_0xdec2dc(0x606)]=Graphics[_0xdec2dc(0x606)],this['height']=Graphics['height'];const _0x395601=0x1;this['scale']['x']=_0x395601,this[_0xdec2dc(0xbfa)]['y']=_0x395601,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x4fbf70(0x92c)]['adjustPosition_ScaleToFit']=function(){const _0x241894=_0x4fbf70,_0x356f08=VisuMZ[_0x241894(0xae2)][_0x241894(0x837)][_0x241894(0xb1f)];if(_0x356f08&&_0x356f08['jsScaleToFit']){if(_0x241894(0xb0b)===_0x241894(0x566)){let _0x42afe1=_0x1e7f11[_0x241894(0xae2)]['Scene_Options_maxCommands'][_0x241894(0xc4a)](this);const _0x22b10d=_0x378682['BattleCore'][_0x241894(0x837)];if(_0x22b10d[_0x241894(0x5f2)][_0x241894(0x798)]&&_0x22b10d[_0x241894(0x5f2)][_0x241894(0xc7e)])_0x42afe1+=0x2;if(_0x22b10d[_0x241894(0x2c8)]['AddOption']&&_0x22b10d['HpGauge'][_0x241894(0xc7e)])_0x42afe1+=0x1;return _0x42afe1;}else return _0x356f08[_0x241894(0x309)][_0x241894(0xc4a)](this);}this[_0x241894(0x606)]=Graphics[_0x241894(0x606)],this[_0x241894(0x389)]=Graphics[_0x241894(0x389)];const _0x3c416e=this['width']/this[_0x241894(0x597)][_0x241894(0x606)],_0x4f970d=this[_0x241894(0x389)]/this['bitmap'][_0x241894(0x389)],_0x4750e1=Math[_0x241894(0x6f0)](_0x3c416e,_0x4f970d);this['scale']['x']=_0x4750e1,this[_0x241894(0xbfa)]['y']=_0x4750e1,this['x']=(Graphics[_0x241894(0x606)]-this[_0x241894(0x606)])/0x2,this['y']=Graphics[_0x241894(0x389)]-this[_0x241894(0x389)];},Sprite_Battleback[_0x4fbf70(0x92c)]['adjustPosition_ScaleDown']=function(){const _0x18f417=_0x4fbf70,_0x5f21a7=VisuMZ[_0x18f417(0xae2)]['Settings'][_0x18f417(0xb1f)];if(_0x5f21a7&&_0x5f21a7['jsScaleDown']){if(_0x18f417(0x48b)!==_0x18f417(0x6ad))return _0x5f21a7[_0x18f417(0xcd1)]['call'](this);else this[_0x18f417(0x30f)]();}this[_0x18f417(0x606)]=Graphics[_0x18f417(0x606)],this[_0x18f417(0x389)]=Graphics[_0x18f417(0x389)];const _0x5ef65a=Math[_0x18f417(0x872)](0x1,this['width']/this['bitmap']['width']),_0x1339c8=Math[_0x18f417(0x872)](0x1,this['height']/this[_0x18f417(0x597)][_0x18f417(0x389)]),_0x1231a4=Math[_0x18f417(0x6f0)](_0x5ef65a,_0x1339c8);this[_0x18f417(0xbfa)]['x']=_0x1231a4,this[_0x18f417(0xbfa)]['y']=_0x1231a4,this['x']=(Graphics['width']-this[_0x18f417(0x606)])/0x2,this['y']=Graphics[_0x18f417(0x389)]-this[_0x18f417(0x389)];},Sprite_Battleback[_0x4fbf70(0x92c)][_0x4fbf70(0x63e)]=function(){const _0x51a31b=_0x4fbf70,_0x356fbc=VisuMZ[_0x51a31b(0xae2)][_0x51a31b(0x837)][_0x51a31b(0xb1f)];if(_0x356fbc&&_0x356fbc[_0x51a31b(0xb3f)])return _0x356fbc[_0x51a31b(0xb3f)]['call'](this);this[_0x51a31b(0x606)]=Graphics['width'],this[_0x51a31b(0x389)]=Graphics['height'];const _0x232d2f=Math['max'](0x1,this[_0x51a31b(0x606)]/this[_0x51a31b(0x597)][_0x51a31b(0x606)]),_0x2f5abf=Math[_0x51a31b(0x6f0)](0x1,this[_0x51a31b(0x389)]/this['bitmap'][_0x51a31b(0x389)]),_0x508185=Math[_0x51a31b(0x6f0)](_0x232d2f,_0x2f5abf);this[_0x51a31b(0xbfa)]['x']=_0x508185,this['scale']['y']=_0x508185,this['x']=(Graphics[_0x51a31b(0x606)]-this[_0x51a31b(0x606)])/0x2,this['y']=Graphics[_0x51a31b(0x389)]-this['height'];},Spriteset_Battle[_0x4fbf70(0x874)]=![],Spriteset_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0xbdd)]=function(){const _0x291a4a=_0x4fbf70;if(!$gameSystem[_0x291a4a(0x2ee)]())return![];return![];},Spriteset_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0xd19)]=function(){return 0x0;},Spriteset_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x58c)]=function(){return 0x0;},VisuMZ[_0x4fbf70(0xae2)]['Spriteset_Battle_createLowerLayer']=Spriteset_Battle['prototype'][_0x4fbf70(0x387)],Spriteset_Battle['prototype'][_0x4fbf70(0x387)]=function(){const _0xa77dc2=_0x4fbf70;VisuMZ[_0xa77dc2(0xae2)][_0xa77dc2(0x643)]['call'](this),this[_0xa77dc2(0x374)](),this[_0xa77dc2(0x65f)]();},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xa99)]=Spriteset_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x7b2)],Spriteset_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x7b2)]=function(){const _0x2cfdc3=_0x4fbf70;VisuMZ[_0x2cfdc3(0xae2)][_0x2cfdc3(0xa99)][_0x2cfdc3(0xc4a)](this),this[_0x2cfdc3(0xa3e)](),this['updateUiContainerPosition'](),this[_0x2cfdc3(0x24e)]();},Spriteset_Battle[_0x4fbf70(0x92c)]['createWeather']=function(){const _0x58a18c=_0x4fbf70;this[_0x58a18c(0xd50)]=new Weather(),this[_0x58a18c(0xd64)]['addChild'](this[_0x58a18c(0xd50)]);},Spriteset_Battle[_0x4fbf70(0x92c)]['updateWeather']=function(){const _0x3897b2=_0x4fbf70;this[_0x3897b2(0xd50)]['type']=$gameScreen[_0x3897b2(0x3ec)](),this[_0x3897b2(0xd50)][_0x3897b2(0x730)]=$gameScreen[_0x3897b2(0xbae)]();},Game_Interpreter[_0x4fbf70(0x92c)][_0x4fbf70(0x6fb)]=function(_0x1355d6){const _0x26b468=_0x4fbf70;$gameScreen[_0x26b468(0x7b8)](_0x1355d6[0x0],_0x1355d6[0x1],_0x1355d6[0x2]);if(_0x1355d6[0x3])this[_0x26b468(0x438)](_0x1355d6[0x2]);return!![];},VisuMZ['BattleCore']['Game_Interpreter_command283']=Game_Interpreter[_0x4fbf70(0x92c)]['command283'],Game_Interpreter[_0x4fbf70(0x92c)][_0x4fbf70(0xa80)]=function(_0x18d87b){const _0x183999=_0x4fbf70;if(SceneManager[_0x183999(0x90d)]())return SceneManager[_0x183999(0x32c)][_0x183999(0x7cf)][_0x183999(0xc2d)](_0x18d87b[0x0],_0x18d87b[0x1]),!![];else{if(_0x183999(0xa05)===_0x183999(0xa05))return VisuMZ[_0x183999(0xae2)]['Game_Interpreter_command283'][_0x183999(0xc4a)](this,_0x18d87b);else this[_0x183999(0x818)]=(this['_homeX']*(_0xd50052-0x1)+this[_0x183999(0xd21)])/_0x1b9003,this[_0x183999(0xd1d)]=(this[_0x183999(0xd1d)]*(_0xea95e7-0x1)+this[_0x183999(0x449)])/_0x4504ea;}},Spriteset_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x77f)]=function(_0x27184e,_0x2f4545){const _0x1a90aa=_0x4fbf70;_0x27184e[_0x1a90aa(0x597)]=_0x2f4545;},Spriteset_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0xc2d)]=function(_0x197e6d,_0x5052f5){const _0x4ce36d=_0x4fbf70;_0x197e6d=_0x197e6d||'',_0x5052f5=_0x5052f5||'';_0x197e6d===''&&_0x5052f5===''&&(_0x197e6d=this[_0x4ce36d(0xb96)][_0x4ce36d(0x515)](),_0x5052f5=this['_back2Sprite'][_0x4ce36d(0x383)]());const _0x1b46d8=ImageManager[_0x4ce36d(0x9f3)](_0x197e6d),_0x10de4a=ImageManager[_0x4ce36d(0xc2f)](_0x5052f5);_0x1b46d8[_0x4ce36d(0x43e)](this['updateBattlebackBitmap1'][_0x4ce36d(0x8ff)](this,this[_0x4ce36d(0xb96)],this[_0x4ce36d(0x314)],_0x1b46d8,_0x10de4a));},Spriteset_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x25c)]=function(_0x3cd908,_0x565690,_0x2c4fd3,_0x51d604){const _0xf0f918=_0x4fbf70;_0x51d604['addLoadListener'](this[_0xf0f918(0xd1f)][_0xf0f918(0x8ff)](this,_0x3cd908,_0x565690,_0x2c4fd3,_0x51d604));},Spriteset_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0xd1f)]=function(_0x2c525b,_0x316031,_0x12d3b3,_0x5ef7bf){const _0x486f82=_0x4fbf70;_0x2c525b[_0x486f82(0x597)]=_0x12d3b3,_0x316031[_0x486f82(0x597)]=_0x5ef7bf,_0x2c525b[_0x486f82(0xc79)](),_0x316031['adjustPosition']();},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xae0)]=Spriteset_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0xb25)],Spriteset_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0xb25)]=function(){const _0x4685e1=_0x4fbf70;VisuMZ['BattleCore'][_0x4685e1(0xae0)][_0x4685e1(0xc4a)](this),this[_0x4685e1(0x8bb)]();},Spriteset_Battle['prototype']['createBattleFieldBattleCore']=function(){const _0x9cdc12=_0x4fbf70;this[_0x9cdc12(0x8dc)](),this['createUIContainer'](),this[_0x9cdc12(0x668)](),this[_0x9cdc12(0x779)](),this[_0x9cdc12(0x1a4)]();},Spriteset_Battle[_0x4fbf70(0x92c)]['createBattleFieldContainer']=function(){const _0x2696fb=_0x4fbf70;this[_0x2696fb(0x29a)]=new Sprite(),this[_0x2696fb(0xd64)]['addChild'](this['_battlerContainer']);},Spriteset_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x668)]=function(){const _0x372863=_0x4fbf70;this[_0x372863(0xbcc)]=new Sprite(),Spriteset_Battle[_0x372863(0x874)]?_0x372863(0x8bc)!==_0x372863(0x8bc)?this[_0x372863(0xa50)]():this[_0x372863(0x52a)](this[_0x372863(0xbcc)]):this[_0x372863(0xd64)][_0x372863(0x52a)](this[_0x372863(0xbcc)]);},Spriteset_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x779)]=function(){const _0x27e447=_0x4fbf70;this['_damageContainer']=new Sprite(),this[_0x27e447(0x5e0)]['x']=this['_battleField']['x'],this[_0x27e447(0x5e0)]['y']=this[_0x27e447(0xd64)]['y'],this[_0x27e447(0x52a)](this['_damageContainer']);},Spriteset_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x1a4)]=function(){const _0x129a7d=_0x4fbf70;if(!this['isFlipped']())return;this[_0x129a7d(0x29a)][_0x129a7d(0xbfa)]['x']=-0x1,this[_0x129a7d(0x29a)]['x']=this['_battleField']['width'],this[_0x129a7d(0x50b)]['scale']['x']=-0x1,this[_0x129a7d(0x50b)]['x']=this[_0x129a7d(0xd64)][_0x129a7d(0x606)],this['_animationContainer'][_0x129a7d(0xbfa)]['x']=-0x1,this[_0x129a7d(0xbcc)]['x']=this[_0x129a7d(0xd64)]['width'],this['_damageContainer']['scale']['x']=-0x1,this[_0x129a7d(0x5e0)]['x']=this[_0x129a7d(0xd64)]['x']+this[_0x129a7d(0xd64)][_0x129a7d(0x606)];},Spriteset_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x54c)]=function(){const _0x4891a0=_0x4fbf70;if(Imported[_0x4891a0(0xcaf)]&&this[_0x4891a0(0x582)]()){if(_0x4891a0(0xcef)!==_0x4891a0(0x7b0))this['repositionEnemiesByResolution']();else return this['battlerSprites']()[_0x4891a0(0xbb8)](_0x1cc2a3=>_0x1cc2a3[_0x4891a0(0xd5f)]());}const _0x3a087f=$gameTroop[_0x4891a0(0x9d7)](),_0x28b5a5=[];for(const _0x3ca506 of _0x3a087f){if('qWfRn'==='qWfRn')_0x28b5a5[_0x4891a0(0x25b)](new Sprite_Enemy(_0x3ca506));else{const _0x51304e=_0x5dd764(_0x5a04e2['$1']),_0x50fcd8=_0x10334e['BattleCore']['createKeyJS'](_0x241921,_0x4891a0(0x500));_0x5ba96d[_0x4891a0(0xae2)][_0x4891a0(0x5ef)](_0x51304e,_0x50fcd8);}}_0x28b5a5[_0x4891a0(0x72f)](this[_0x4891a0(0x9b4)][_0x4891a0(0x8ff)](this));for(const _0x52917d of _0x28b5a5){if(_0x4891a0(0x19c)!==_0x4891a0(0x4a2))this[_0x4891a0(0x29a)][_0x4891a0(0x52a)](_0x52917d);else return _0x33539a[_0x4891a0(0x32c)]['battleLayoutStyle']()===_0x4891a0(0x972)?_0x20d315[_0x4891a0(0xae2)][_0x4891a0(0x837)][_0x4891a0(0x41c)]['SkillItemBorderCols']:_0x38db8f[_0x4891a0(0xae2)][_0x4891a0(0x837)][_0x4891a0(0x41c)][_0x4891a0(0x51e)];}this['_enemySprites']=_0x28b5a5;},Spriteset_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x627)]=function(){const _0x35c08f=_0x4fbf70;this[_0x35c08f(0x50f)]=[];for(let _0x160c6c=0x0;_0x160c6c<$gameParty[_0x35c08f(0xd1c)]();_0x160c6c++){if('yUbHF'===_0x35c08f(0x7c5)){const _0xe7323d=$gameParty[_0x35c08f(0x914)]()[_0x160c6c],_0x1e398e=new Sprite_Actor();_0x1e398e[_0x35c08f(0xb54)](_0xe7323d),_0x1e398e[_0x35c08f(0xaf4)](_0xe7323d),_0x1e398e[_0x35c08f(0x7b2)](),this[_0x35c08f(0x50f)][_0x35c08f(0x25b)](_0x1e398e),this[_0x35c08f(0x29a)][_0x35c08f(0x52a)](_0x1e398e);}else return _0x35c08f(0x360);}},Spriteset_Battle['prototype']['createAnimationSprite']=function(_0x117613,_0x56d32a,_0x56f7f3,_0x56380d){const _0x31cca1=_0x4fbf70,_0x27ff98=this[_0x31cca1(0x1d7)](_0x56d32a),_0x1f21d8=new(_0x27ff98?Sprite_AnimationMV:Sprite_Animation)(),_0x482823=this[_0x31cca1(0x84d)](_0x117613);if(this[_0x31cca1(0xab4)](_0x117613[0x0])){if(_0x31cca1(0x4db)===_0x31cca1(0x4db))_0x56f7f3=!_0x56f7f3;else return this[_0x31cca1(0xd1b)]();}_0x1f21d8[_0x31cca1(0x421)]=_0x117613,_0x1f21d8[_0x31cca1(0xc55)](_0x482823,_0x56d32a,_0x56f7f3,_0x56380d),this[_0x31cca1(0xd02)](_0x1f21d8);},Spriteset_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0xd02)]=function(_0x3b8d36){const _0x70b877=_0x4fbf70;if(this[_0x70b877(0x6f9)](_0x3b8d36))this['battleStatusWindowAnimationContainer']()[_0x70b877(0x52a)](_0x3b8d36),_0x3b8d36[_0x70b877(0x338)]=!![];else{if('TTmRy'===_0x70b877(0x5d0)){const _0x13db47=_0x5d6fa1[_0x70b877(0xb2d)](_0x2020df['width']/0x3),_0x4cf3fd=this[_0x70b877(0xbea)]()?(_0x58889f[_0x70b877(0x606)]+_0x5e4e3c[_0x70b877(0x2d5)])/0x2-_0x13db47:(_0x467231['width']-_0x18d11e[_0x70b877(0x2d5)])/-0x2,_0xaaa7c9=this[_0x70b877(0x3bf)](),_0x4b832b=_0xaaa7c9['y']+_0xaaa7c9['height'],_0xf18b6d=this[_0x70b877(0x4ed)](),_0x5e93f4=_0xf18b6d['y']-_0x4b832b;return new _0x3664fd(_0x4cf3fd,_0x4b832b,_0x13db47,_0x5e93f4);}else{this[_0x70b877(0xbcc)][_0x70b877(0x52a)](_0x3b8d36);if(Spriteset_Battle[_0x70b877(0x874)]){if('SbboM'===_0x70b877(0x7e7)){if(this['_cache'][_0x70b877(0x3ef)]!==_0x4b0b0f)return this[_0x70b877(0x7ff)]['hardDamageCap'];const _0x55de67=/<DAMAGE CAP:[ ](\d+)>/i,_0xb3ce2b=this[_0x70b877(0xabd)]()[_0x70b877(0x990)](_0x61fc12=>_0x61fc12&&_0x61fc12[_0x70b877(0x9c1)]['match'](_0x55de67)?_0x25580b(_0x4ee18e['$1']):0x0);let _0x553503=_0xb3ce2b[_0x70b877(0x9d2)]>0x0?_0x196f21['max'](..._0xb3ce2b):0x0;if(_0x553503<=0x0)_0x553503=_0x3fec6c[_0x70b877(0xae2)]['Settings'][_0x70b877(0x835)][_0x70b877(0x2b9)];return this[_0x70b877(0x7ff)]['hardDamageCap']=_0x553503,this[_0x70b877(0x7ff)][_0x70b877(0x3ef)];}else this[_0x70b877(0xbcc)]['x']=this[_0x70b877(0x8aa)]['x'],this['_animationContainer']['y']=this[_0x70b877(0x8aa)]['y'];}}}this[_0x70b877(0xb60)][_0x70b877(0x25b)](_0x3b8d36);},Spriteset_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x6f9)]=function(_0x58dcab){const _0x1adfd3=_0x4fbf70;if(!_0x58dcab)return![];if(!_0x58dcab[_0x1adfd3(0xa8b)])return![];if(!_0x58dcab[_0x1adfd3(0x421)][0x0])return![];if(_0x58dcab[_0x1adfd3(0x421)][0x0]['isActor']&&!_0x58dcab[_0x1adfd3(0x421)][0x0][_0x1adfd3(0xc9f)]())return![];if($gameSystem['isSideView']())return![];if(!this[_0x1adfd3(0xc21)]())return![];if(_0x58dcab[_0x1adfd3(0x631)]===Sprite_Animation){if(_0x1adfd3(0xc5e)!=='yupHR'){if(_0x58dcab['_animation']['displayType']!==0x0)return![];}else _0x320491=_0x1429a8(_0x3de84b['$1']),_0x5f2220=_0x58db1e(_0x4c1f51['$2']);}else{if(_0x58dcab[_0x1adfd3(0x631)]===Sprite_AnimationMV){if(_0x1adfd3(0x3a3)===_0x1adfd3(0x3a3)){if(_0x58dcab[_0x1adfd3(0xa8b)][_0x1adfd3(0xd1e)]===0x3)return![];}else _0x196b40[_0x1adfd3(0xae2)][_0x1adfd3(0x4cb)][_0x1adfd3(0xc4a)](this),_0x408ad0[_0x1adfd3(0x90d)]()&&this[_0x1adfd3(0x9eb)]('dead');}}return!![];const _0x25c12a=Window_BattleStatus[_0x1adfd3(0x92c)][_0x1adfd3(0x3c7)]();return['xp',_0x1adfd3(0x1c0)][_0x1adfd3(0x313)](_0x25c12a);},Spriteset_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0xc21)]=function(){const _0xf252ed=_0x4fbf70;if(!SceneManager[_0xf252ed(0x32c)])return null;if(!SceneManager['_scene'][_0xf252ed(0x9e4)])return null;if(!SceneManager[_0xf252ed(0x32c)][_0xf252ed(0x9e4)][_0xf252ed(0x8aa)])return null;return SceneManager['_scene'][_0xf252ed(0x9e4)]['_effectsContainer'];},Spriteset_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x42b)]=function(_0x4c945a){const _0x1555aa=_0x4fbf70;this[_0x1555aa(0x2ab)](_0x4c945a);for(const _0x18885b of _0x4c945a[_0x1555aa(0x421)]){_0x18885b[_0x1555aa(0x3cb)]&&('TXQYY'!==_0x1555aa(0x9cc)?_0x3046c4[_0x1555aa(0x50e)]['version']<1.15&&(_0x27c1a8(_0x53b6e9[_0x1555aa(0x946)]('STB')),_0x53c35f[_0x1555aa(0x4c5)]()):_0x18885b[_0x1555aa(0x3cb)]());}_0x4c945a['destroy']();},Spriteset_Battle['prototype'][_0x4fbf70(0x2ab)]=function(_0x142b7e){const _0x217983=_0x4fbf70;if(this['isAnimationShownOnBattlePortrait'](_0x142b7e)){if(_0x217983(0xb2f)!=='dFkiC')this[_0x217983(0xc21)]()[_0x217983(0xa48)](_0x142b7e);else{if(!_0x4ffc06)return;const _0x3fb37b=new _0x47d696();this[_0x217983(0xb42)](_0x3fb37b),_0x3fb37b[_0x217983(0x2af)](_0x353b34);}}else this[_0x217983(0xbcc)][_0x217983(0xa48)](_0x142b7e);this['_effectsContainer'][_0x217983(0xa48)](_0x142b7e),this['_animationContainer'][_0x217983(0xa48)](_0x142b7e),this[_0x217983(0xb60)][_0x217983(0x5d9)](_0x142b7e);if(this[_0x217983(0x47a)])this[_0x217983(0x47a)]['remove'](_0x142b7e);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xba2)]=Spriteset_Battle['prototype'][_0x4fbf70(0x4d8)],Spriteset_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x4d8)]=function(){const _0x5bacd0=_0x4fbf70;VisuMZ[_0x5bacd0(0xae2)][_0x5bacd0(0xba2)][_0x5bacd0(0xc4a)](this),this[_0x5bacd0(0xa3e)]();},Spriteset_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0xa3e)]=function(){const _0x5eb526=_0x4fbf70;this['_battlerContainer'][_0x5eb526(0x8a6)]['sort'](this[_0x5eb526(0x789)][_0x5eb526(0x8ff)](this)),this[_0x5eb526(0x6c6)]();if(!this[_0x5eb526(0x29a)])return;this[_0x5eb526(0x29a)][_0x5eb526(0x853)]=this[_0x5eb526(0x8f4)]();},Spriteset_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x789)]=function(_0x5610fb,_0x42321a){const _0x23b2de=_0x4fbf70;if(VisuMZ[_0x23b2de(0xae2)][_0x23b2de(0x837)]['Actor'][_0x23b2de(0xc9d)]){if(_0x23b2de(0xb18)===_0x23b2de(0xb18)){if(_0x5610fb[_0x23b2de(0x80d)]&&_0x42321a['_battler']){if(_0x5610fb[_0x23b2de(0x80d)]['isActor']()&&_0x42321a[_0x23b2de(0x80d)][_0x23b2de(0x923)]())return 0x1;else{if(_0x42321a[_0x23b2de(0x80d)][_0x23b2de(0xc9f)]()&&_0x5610fb['_battler'][_0x23b2de(0x923)]()){if('Pberr'==='Pberr')return-0x1;else _0x171c05=_0x23b2de(0x1bc);}}}}else this['addBattleCoreAutoBattleStartupCommand'](),this[_0x23b2de(0x82a)]();}if(_0x5610fb[_0x23b2de(0x571)]!==_0x42321a[_0x23b2de(0x571)]){if(_0x23b2de(0xc15)!==_0x23b2de(0x4fa))return _0x5610fb[_0x23b2de(0x571)]-_0x42321a[_0x23b2de(0x571)];else{if(!this[_0x23b2de(0x516)])this[_0x23b2de(0x8fa)]();return _0x3a49b0[_0x23b2de(0xae2)][_0x23b2de(0x837)][_0x23b2de(0x835)]['NewPopupBottom']?this[_0x23b2de(0x516)][_0x23b2de(0x5c3)]():this[_0x23b2de(0x516)]['pop']();}}else return _0x42321a[_0x23b2de(0x4d5)]-_0x5610fb[_0x23b2de(0x4d5)];},Spriteset_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x6c6)]=function(){const _0x463587=_0x4fbf70;if(!VisuMZ[_0x463587(0xae2)]['Settings'][_0x463587(0x410)][_0x463587(0x8eb)])return;const _0x19a06f=BattleManager['_subject'];if(_0x19a06f){if(_0x19a06f['isActor']()&&!$gameSystem[_0x463587(0x2ee)]())return;const _0x3ade7b=_0x19a06f[_0x463587(0xb81)]();if(_0x3ade7b&&_0x19a06f[_0x463587(0xc9f)]())this[_0x463587(0x29a)]['addChild'](_0x3ade7b);}},Spriteset_Battle[_0x4fbf70(0x92c)]['processEscape']=function(){const _0x3932e6=_0x4fbf70;for(const _0x1709e6 of $gameParty[_0x3932e6(0x1c3)]()){if('AFYAp'===_0x3932e6(0x5d5))_0x28bf55['push'](_0x3932e6(0x55f),_0xfb472d,_0x29203e);else{if(!_0x1709e6)continue;if(!_0x1709e6[_0x3932e6(0xb81)]())continue;_0x1709e6[_0x3932e6(0xb81)]()[_0x3932e6(0x7dc)]=!![],_0x1709e6['battler']()[_0x3932e6(0x2ef)]();}}},Spriteset_Battle['prototype'][_0x4fbf70(0x644)]=function(){const _0x489f47=_0x4fbf70;this[_0x489f47(0x50b)]=new Sprite(),Spriteset_Battle[_0x489f47(0x874)]?this[_0x489f47(0x52a)](this[_0x489f47(0x50b)]):this['_battleField'][_0x489f47(0x52a)](this[_0x489f47(0x50b)]),SceneManager[_0x489f47(0x32c)]['_uiContainer']=this['_uiContainer'];},Spriteset_Battle['prototype'][_0x4fbf70(0x65f)]=function(){const _0x4c3c80=_0x4fbf70;if(VisuMZ[_0x4c3c80(0xae2)][_0x4c3c80(0x837)]['Enemy']['NameLegacy'])return;this[_0x4c3c80(0x196)]=new Sprite(),BattleManager['addChildToUiContainer'](this[_0x4c3c80(0x196)]);for(const _0x13e0d6 of this[_0x4c3c80(0xb45)]){const _0x25b3c1=new Sprite_EnemyName();this[_0x4c3c80(0x196)][_0x4c3c80(0x52a)](_0x25b3c1),_0x25b3c1[_0x4c3c80(0xa37)](_0x13e0d6);}},Spriteset_Battle['prototype'][_0x4fbf70(0x38a)]=function(){const _0x4e235e=_0x4fbf70;if(!this[_0x4e235e(0x5e0)])return;if(!this[_0x4e235e(0x50b)])return;const _0xaea76b=Spriteset_Battle[_0x4e235e(0x874)]?this[_0x4e235e(0x5e0)]['x']:0x0,_0x56dcd3=Spriteset_Battle[_0x4e235e(0x874)]?this[_0x4e235e(0x5e0)]['y']:0x0,_0x4da4f1=Imported[_0x4e235e(0x524)]?this['_battleField']['x']:0x0,_0x58cf68=Imported[_0x4e235e(0x524)]?this[_0x4e235e(0xd64)]['y']:0x0;this['_uiContainer']['x']=_0xaea76b+_0x4da4f1,this['_uiContainer']['y']=_0x56dcd3+_0x58cf68;},BattleManager[_0x4fbf70(0x741)]=function(_0x38ec3e){const _0x3aff10=_0x4fbf70;if(!SceneManager[_0x3aff10(0x32c)][_0x3aff10(0x50b)])return;SceneManager[_0x3aff10(0x32c)]['_uiContainer'][_0x3aff10(0x52a)](_0x38ec3e);},Spriteset_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x8f4)]=function(){return 0xff;},Spriteset_Battle['prototype'][_0x4fbf70(0x362)]=function(){return![];},Spriteset_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x4c1)]=function(){const _0x2b0f9a=_0x4fbf70;return this[_0x2b0f9a(0xd7e)]()[_0x2b0f9a(0xbb8)](_0x1f01f2=>_0x1f01f2[_0x2b0f9a(0x89c)]());},Spriteset_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x890)]=function(){const _0xf8d0b5=_0x4fbf70;return this[_0xf8d0b5(0xd7e)]()[_0xf8d0b5(0xbb8)](_0x596fc8=>_0x596fc8[_0xf8d0b5(0x32f)]());},Spriteset_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x81f)]=function(){const _0x46dc48=_0x4fbf70;return this['battlerSprites']()[_0x46dc48(0xbb8)](_0x297180=>_0x297180[_0x46dc48(0xd5f)]());},Spriteset_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0xcd5)]=function(){const _0x118d9c=_0x4fbf70;return this[_0x118d9c(0xd7e)]()[_0x118d9c(0xbb8)](_0x31f786=>_0x31f786[_0x118d9c(0x86d)]());},Spriteset_Battle['prototype'][_0x4fbf70(0x6ec)]=function(){const _0x430614=_0x4fbf70;return this[_0x430614(0xd7e)]()[_0x430614(0xbb8)](_0x1a7adf=>_0x1a7adf[_0x430614(0x29b)]());},Spriteset_Battle[_0x4fbf70(0x92c)][_0x4fbf70(0x9d1)]=function(){const _0x1010be=_0x4fbf70;return this[_0x1010be(0xd7e)]()[_0x1010be(0xbb8)](_0xc4af1e=>_0xc4af1e[_0x1010be(0xa7d)]());},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x35a)]=Window_ItemList['prototype'][_0x4fbf70(0x2d7)],Window_ItemList[_0x4fbf70(0x92c)]['maxCols']=function(){const _0x1d5c5c=_0x4fbf70;if(SceneManager['isSceneBattle']()){if(SceneManager[_0x1d5c5c(0x32c)][_0x1d5c5c(0x3c7)]()===_0x1d5c5c(0x972)){if(_0x1d5c5c(0xb84)===_0x1d5c5c(0xb84))return VisuMZ[_0x1d5c5c(0xae2)][_0x1d5c5c(0x837)]['BattleLayout']['SkillItemBorderCols'];else this[_0x1d5c5c(0xc12)]();}else return VisuMZ[_0x1d5c5c(0xae2)]['Settings']['BattleLayout']['SkillItemStandardCols'];}else{if('wvvhI'===_0x1d5c5c(0x269))this[_0x1d5c5c(0x760)]=!![];else return VisuMZ[_0x1d5c5c(0xae2)][_0x1d5c5c(0x35a)][_0x1d5c5c(0xc4a)](this);}},VisuMZ['BattleCore'][_0x4fbf70(0x4e0)]=Window_SkillList[_0x4fbf70(0x92c)][_0x4fbf70(0x2d7)],Window_SkillList[_0x4fbf70(0x92c)][_0x4fbf70(0x2d7)]=function(){const _0x3fa6e4=_0x4fbf70;return SceneManager[_0x3fa6e4(0x90d)]()?SceneManager[_0x3fa6e4(0x32c)][_0x3fa6e4(0x3c7)]()===_0x3fa6e4(0x972)?VisuMZ[_0x3fa6e4(0xae2)][_0x3fa6e4(0x837)][_0x3fa6e4(0x41c)]['SkillItemBorderCols']:VisuMZ[_0x3fa6e4(0xae2)]['Settings']['BattleLayout'][_0x3fa6e4(0x51e)]:VisuMZ['BattleCore']['Window_SkillList_maxCols']['call'](this);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x6d4)]=Window_Options[_0x4fbf70(0x92c)][_0x4fbf70(0xc26)],Window_Options['prototype']['addGeneralOptions']=function(){const _0x39ccfe=_0x4fbf70;VisuMZ[_0x39ccfe(0xae2)][_0x39ccfe(0x6d4)][_0x39ccfe(0xc4a)](this),this[_0x39ccfe(0x832)](),this[_0x39ccfe(0x3c2)]();},Window_Options['prototype'][_0x4fbf70(0x832)]=function(){const _0x456c40=_0x4fbf70;if(VisuMZ[_0x456c40(0xae2)]['Settings']['AutoBattle'][_0x456c40(0x798)]){if(_0x456c40(0xb6f)===_0x456c40(0x574)){if(!this[_0x456c40(0x80d)])return 0x0;if(this[_0x456c40(0x4fd)])return this[_0x456c40(0x4fd)];const _0x4aa689=this[_0x456c40(0x27a)]();return this['setupFont'](),this[_0x456c40(0x4fd)]=this[_0x456c40(0x597)][_0x456c40(0x8a9)](_0x4aa689)||0x1,this['_cacheTextWidth'];}else this[_0x456c40(0x2cf)](),this[_0x456c40(0x82a)]();}},Window_Options[_0x4fbf70(0x92c)]['addShowHpGaugeCommand']=function(){const _0x1d0561=_0x4fbf70;if(!VisuMZ[_0x1d0561(0xae2)]['Settings'][_0x1d0561(0x2c8)][_0x1d0561(0x701)])return;const _0x16fe78=TextManager[_0x1d0561(0xd3a)],_0x36b85e=_0x1d0561(0xd3a);this[_0x1d0561(0xc42)](_0x16fe78,_0x36b85e);},Window_Options['prototype']['addBattleCoreAutoBattleStartupCommand']=function(){const _0x2da717=_0x4fbf70,_0x5c46f8=TextManager[_0x2da717(0xc20)],_0x3cd055=_0x2da717(0x8f8);this['addCommand'](_0x5c46f8,_0x3cd055);},Window_Options[_0x4fbf70(0x92c)][_0x4fbf70(0x82a)]=function(){const _0x48a5ab=_0x4fbf70,_0x54b23d=TextManager[_0x48a5ab(0xbeb)],_0x4dcb9d='autoBattleUseSkills';this['addCommand'](_0x54b23d,_0x4dcb9d);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xb63)]=Window_Options[_0x4fbf70(0x92c)]['statusText'],Window_Options[_0x4fbf70(0x92c)][_0x4fbf70(0x713)]=function(_0x447345){const _0x865977=_0x4fbf70,_0x284b2c=this[_0x865977(0xc68)](_0x447345);return _0x284b2c===_0x865977(0x1a5)?this[_0x865977(0xa5b)]():VisuMZ[_0x865977(0xae2)]['Window_Options_statusText'][_0x865977(0xc4a)](this,_0x447345);},Window_Options['prototype'][_0x4fbf70(0xa5b)]=function(){const _0x34c53f=_0x4fbf70,_0xa351bc=VisuMZ[_0x34c53f(0xae2)]['Settings'][_0x34c53f(0x5f2)],_0x12d311=this[_0x34c53f(0x99c)]('autoBattleUseSkills');return _0x12d311?_0xa351bc[_0x34c53f(0x5d8)]:_0xa351bc[_0x34c53f(0x272)];},Window_ShopStatus[_0x4fbf70(0x92c)]['getItemDamageAmountLabelBattleCore']=function(){const _0x2612c1=_0x4fbf70,_0x35e736=DataManager[_0x2612c1(0x6fe)](this[_0x2612c1(0x2e7)]),_0xafe251=VisuMZ[_0x2612c1(0xb48)][_0x35e736];if(!_0xafe251)return this[_0x2612c1(0xbc3)]();const _0x5c52e8=_0x2612c1(0x317)['format'](this[_0x2612c1(0x2e7)][_0x2612c1(0x36f)][_0x2612c1(0x2ff)]),_0x43b6c2=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x2612c1(0x2e7)][_0x2612c1(0x36f)][_0x2612c1(0x2ff)]];return _0xafe251[_0x5c52e8]['format'](_0x43b6c2);},Window_ShopStatus['prototype'][_0x4fbf70(0xbad)]=function(){const _0x39dbab=_0x4fbf70,_0x214030=DataManager[_0x39dbab(0x6fe)](this[_0x39dbab(0x2e7)]),_0xcb8c42=VisuMZ[_0x39dbab(0xb48)][_0x214030];if(!_0xcb8c42)return this[_0x39dbab(0xb7d)]();return _0xcb8c42[_0x39dbab(0x3a6)][_0x39dbab(0xc4a)](this);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xd15)]=Window_PartyCommand[_0x4fbf70(0x92c)][_0x4fbf70(0x691)],Window_PartyCommand[_0x4fbf70(0x92c)][_0x4fbf70(0x691)]=function(_0x458e75){const _0x3bf823=_0x4fbf70;VisuMZ[_0x3bf823(0xae2)][_0x3bf823(0xd15)][_0x3bf823(0xc4a)](this,_0x458e75),this[_0x3bf823(0x72e)](_0x458e75);},Window_PartyCommand['prototype'][_0x4fbf70(0x72e)]=function(_0x57f7d8){const _0x298a5d=_0x4fbf70,_0xb868e=new Rectangle(0x0,0x0,_0x57f7d8[_0x298a5d(0x606)],_0x57f7d8[_0x298a5d(0x389)]);this['_commandNameWindow']=new Window_Base(_0xb868e),this[_0x298a5d(0xbb7)][_0x298a5d(0x853)]=0x0,this[_0x298a5d(0x52a)](this[_0x298a5d(0xbb7)]),this[_0x298a5d(0x4e2)]();},Window_PartyCommand[_0x4fbf70(0x92c)]['callUpdateHelp']=function(){const _0x59e400=_0x4fbf70;Window_Command['prototype']['callUpdateHelp'][_0x59e400(0xc4a)](this);if(this[_0x59e400(0xbb7)])this[_0x59e400(0x4e2)]();},Window_PartyCommand[_0x4fbf70(0x92c)][_0x4fbf70(0x4e2)]=function(){const _0x31045e=_0x4fbf70,_0x3c21f3=this[_0x31045e(0xbb7)];_0x3c21f3[_0x31045e(0x6d0)][_0x31045e(0xb36)]();const _0x7cef79=this[_0x31045e(0xcf2)](this[_0x31045e(0x331)]());if(_0x7cef79===_0x31045e(0x587)&&this['maxItems']()>0x0){const _0x1c4e3e=this[_0x31045e(0x8fc)](this[_0x31045e(0x331)]());let _0x5c86d3=this[_0x31045e(0xbb5)](this[_0x31045e(0x331)]());_0x5c86d3=_0x5c86d3['replace'](/\\I\[(\d+)\]/gi,''),_0x3c21f3[_0x31045e(0x6a7)](),this[_0x31045e(0x35f)](_0x5c86d3,_0x1c4e3e),this['commandNameWindowDrawText'](_0x5c86d3,_0x1c4e3e),this[_0x31045e(0x395)](_0x5c86d3,_0x1c4e3e);}},Window_PartyCommand[_0x4fbf70(0x92c)][_0x4fbf70(0x35f)]=function(_0x54b3d2,_0x4480bf){},Window_PartyCommand['prototype'][_0x4fbf70(0x66f)]=function(_0x5d18f2,_0x25498d){const _0x312e0d=_0x4fbf70,_0x158db0=this['_commandNameWindow'];_0x158db0[_0x312e0d(0x73c)](_0x5d18f2,0x0,_0x25498d['y'],_0x158db0[_0x312e0d(0x9c8)],_0x312e0d(0xc5c));},Window_PartyCommand[_0x4fbf70(0x92c)][_0x4fbf70(0x395)]=function(_0x4d8e29,_0x2bf65d){const _0xc28bec=_0x4fbf70,_0x1c3df1=this[_0xc28bec(0xbb7)],_0x47af04=$gameSystem['windowPadding'](),_0xc2afb8=_0x2bf65d['x']+Math[_0xc28bec(0xb2d)](_0x2bf65d[_0xc28bec(0x606)]/0x2)+_0x47af04;_0x1c3df1['x']=_0x1c3df1[_0xc28bec(0x606)]/-0x2+_0xc2afb8,_0x1c3df1['y']=Math[_0xc28bec(0xb2d)](_0x2bf65d[_0xc28bec(0x389)]/0x2);},Window_PartyCommand[_0x4fbf70(0x92c)][_0x4fbf70(0x78a)]=function(){const _0x43dbd1=_0x4fbf70;this['addFightCommand'](),this[_0x43dbd1(0x214)](),this[_0x43dbd1(0x81c)](),this['addOptionsCommand'](),this[_0x43dbd1(0x9a8)]();},Window_PartyCommand[_0x4fbf70(0x92c)][_0x4fbf70(0x9df)]=function(){const _0x1284a0=_0x4fbf70,_0x1b4dd0=this[_0x1284a0(0xc08)](),_0x3e91c2=VisuMZ[_0x1284a0(0xae2)][_0x1284a0(0x837)][_0x1284a0(0xbd7)][_0x1284a0(0xb14)],_0x5060e5=_0x1b4dd0===_0x1284a0(0xb73)?TextManager[_0x1284a0(0x1f5)]:_0x1284a0(0x769)[_0x1284a0(0x946)](_0x3e91c2,TextManager[_0x1284a0(0x1f5)]),_0x53f37f=this[_0x1284a0(0x615)]();this[_0x1284a0(0xc42)](_0x5060e5,'fight',_0x53f37f);},Window_PartyCommand[_0x4fbf70(0x92c)][_0x4fbf70(0x615)]=function(){return!![];},Window_PartyCommand[_0x4fbf70(0x92c)][_0x4fbf70(0x214)]=function(){const _0x263d0d=_0x4fbf70;if(!this[_0x263d0d(0xcd8)]())return;const _0xffa60e=this[_0x263d0d(0xc08)](),_0x1d8aa6=VisuMZ['BattleCore']['Settings'][_0x263d0d(0xbd7)]['CmdIconAutoBattle'],_0x707151=_0xffa60e===_0x263d0d(0xb73)?TextManager[_0x263d0d(0x850)]:'\x5cI[%1]%2'[_0x263d0d(0x946)](_0x1d8aa6,TextManager[_0x263d0d(0x850)]),_0x63cf23=this[_0x263d0d(0x907)]();this[_0x263d0d(0xc42)](_0x707151,_0x263d0d(0x850),_0x63cf23);},Window_PartyCommand[_0x4fbf70(0x92c)][_0x4fbf70(0xcd8)]=function(){const _0x1dfb7b=_0x4fbf70;return VisuMZ[_0x1dfb7b(0xae2)]['Settings'][_0x1dfb7b(0xbd7)][_0x1dfb7b(0x292)];},Window_PartyCommand[_0x4fbf70(0x92c)][_0x4fbf70(0x907)]=function(){return!![];},Window_PartyCommand[_0x4fbf70(0x92c)][_0x4fbf70(0x81c)]=function(){},Window_PartyCommand[_0x4fbf70(0x92c)][_0x4fbf70(0x8ad)]=function(){const _0x4b5da8=_0x4fbf70;if(!this['isOptionsCommandAdded']())return;const _0x11253f=this[_0x4b5da8(0xc08)](),_0x450a70=VisuMZ['BattleCore'][_0x4b5da8(0x837)][_0x4b5da8(0xbd7)][_0x4b5da8(0xa21)],_0x3df928=_0x11253f===_0x4b5da8(0xb73)?TextManager[_0x4b5da8(0xc3c)]:_0x4b5da8(0x769)[_0x4b5da8(0x946)](_0x450a70,TextManager[_0x4b5da8(0xc3c)]),_0x15357b=this['isOptionsCommandEnabled']();this[_0x4b5da8(0xc42)](_0x3df928,_0x4b5da8(0xc3c),_0x15357b);},Window_PartyCommand[_0x4fbf70(0x92c)]['isOptionsCommandAdded']=function(){const _0x4456db=_0x4fbf70;return VisuMZ[_0x4456db(0xae2)][_0x4456db(0x837)][_0x4456db(0xbd7)][_0x4456db(0x376)];},Window_PartyCommand[_0x4fbf70(0x92c)]['isOptionsCommandEnabled']=function(){return!![];},Window_PartyCommand[_0x4fbf70(0x92c)]['addEscapeCommand']=function(){const _0x41dcf5=_0x4fbf70,_0x250bfc=this[_0x41dcf5(0xc08)](),_0x56c35c=VisuMZ['BattleCore'][_0x41dcf5(0x837)][_0x41dcf5(0xbd7)][_0x41dcf5(0xaa5)],_0x4b8445=_0x250bfc===_0x41dcf5(0xb73)?TextManager[_0x41dcf5(0x6db)]:'\x5cI[%1]%2'[_0x41dcf5(0x946)](_0x56c35c,TextManager['escape']),_0x2ef551=this['isEscapeCommandEnabled']();this[_0x41dcf5(0xc42)](_0x4b8445,_0x41dcf5(0x6db),_0x2ef551);},Window_PartyCommand['prototype'][_0x4fbf70(0x216)]=function(){const _0x10e90e=_0x4fbf70;return BattleManager[_0x10e90e(0x98e)]();},Window_PartyCommand['prototype'][_0x4fbf70(0xcc6)]=function(){const _0x202fb4=_0x4fbf70;return VisuMZ['BattleCore']['Settings'][_0x202fb4(0xbd7)]['CmdTextAlign'];},Window_PartyCommand['prototype'][_0x4fbf70(0x71b)]=function(_0xa8c35d){const _0x33e5e6=_0x4fbf70,_0x389f00=this[_0x33e5e6(0xcf2)](_0xa8c35d);if(_0x389f00===_0x33e5e6(0x360))this[_0x33e5e6(0x5df)](_0xa8c35d);else{if(_0x389f00===_0x33e5e6(0x587)){if(_0x33e5e6(0xbd5)===_0x33e5e6(0x69e)){const _0x1bd6c0=_0x15be45[_0x33e5e6(0x916)]()?-0x1:0x1;let _0x2c1625=this['_baseX'];_0x2c1625+=this[_0x33e5e6(0x2a3)]();let _0x3edcf8=this[_0x33e5e6(0x571)];const _0x555e70=this[_0x33e5e6(0x2be)]['scale']['y'];_0x3edcf8+=this[_0x33e5e6(0x969)]();const _0x2a8e2a=_0x4606bc[_0x33e5e6(0x32c)]['_statusWindow'];if(_0x2a8e2a&&this[_0x33e5e6(0x635)]===_0x2a8e2a){_0x2c1625+=_0x2a8e2a['x']-this['damageOffsetX']();const _0x47c3ad=_0x2a8e2a['lineHeight']()*0x3/0x4;_0x3edcf8=_0x2a8e2a['y']+_0x47c3ad,_0x3edcf8=_0x530f06[_0x33e5e6(0x872)](_0x3edcf8,_0x2a8e2a['y']+this['y']-this[_0x33e5e6(0x389)]+_0x47c3ad);}_0x599b41['x']=_0x1ad93a[_0x33e5e6(0xbec)](_0x2c1625+this['damageOffsetX']()*_0x1bd6c0),_0x1f2740['y']=_0x582566['round'](_0x3edcf8+this[_0x33e5e6(0xc0c)]());}else this[_0x33e5e6(0xb09)](_0xa8c35d);}else Window_Command[_0x33e5e6(0x92c)][_0x33e5e6(0x71b)][_0x33e5e6(0xc4a)](this,_0xa8c35d);}},Window_PartyCommand[_0x4fbf70(0x92c)][_0x4fbf70(0xc08)]=function(){const _0x541ef2=_0x4fbf70;return VisuMZ['BattleCore'][_0x541ef2(0x837)][_0x541ef2(0xbd7)][_0x541ef2(0x5b8)];},Window_PartyCommand[_0x4fbf70(0x92c)][_0x4fbf70(0xcf2)]=function(_0x5d33c4){const _0x475d1a=_0x4fbf70;if(_0x5d33c4<0x0)return _0x475d1a(0xb73);const _0x4b906a=this[_0x475d1a(0xc08)]();if(_0x4b906a!==_0x475d1a(0x3ba)){if(_0x475d1a(0x773)!=='oLMMs')return _0x4b906a;else _0x4631d8[_0x475d1a(0xc2a)]();}else{if(this['maxItems']()>0x0){const _0x5318c6=this[_0x475d1a(0xbb5)](_0x5d33c4);if(_0x5318c6[_0x475d1a(0xc4b)](/\\I\[(\d+)\]/i)){if(_0x475d1a(0x97c)!=='VguoY'){const _0x1b6d2f=this['itemLineRect'](_0x5d33c4),_0x45d750=this[_0x475d1a(0x69d)](_0x5318c6)[_0x475d1a(0x606)];return _0x45d750<=_0x1b6d2f[_0x475d1a(0x606)]?_0x475d1a(0x360):_0x475d1a(0x587);}else this[_0x475d1a(0xd5c)]='';}}}return _0x475d1a(0xb73);},Window_PartyCommand[_0x4fbf70(0x92c)][_0x4fbf70(0x5df)]=function(_0x2b604b){const _0x23d743=_0x4fbf70,_0xcdf420=this[_0x23d743(0x8fc)](_0x2b604b),_0x189cf5=this['commandName'](_0x2b604b),_0x3d927d=this['textSizeEx'](_0x189cf5)[_0x23d743(0x606)];this[_0x23d743(0x399)](this[_0x23d743(0x5e7)](_0x2b604b));const _0x4af5fb=this[_0x23d743(0xcc6)]();if(_0x4af5fb===_0x23d743(0x8ea))_0x23d743(0xb04)!=='ZbgAZ'?this['drawTextEx'](_0x189cf5,_0xcdf420['x']+_0xcdf420['width']-_0x3d927d,_0xcdf420['y'],_0x3d927d):(_0xaf5847['BattleCore']['Window_BattleLog_popupDamage'][_0x23d743(0xc4a)](this,_0x4e55ac),this[_0x23d743(0x91e)]());else{if(_0x4af5fb==='center'){const _0x169ed8=_0xcdf420['x']+Math['floor']((_0xcdf420[_0x23d743(0x606)]-_0x3d927d)/0x2);this[_0x23d743(0x64e)](_0x189cf5,_0x169ed8,_0xcdf420['y'],_0x3d927d);}else this[_0x23d743(0x64e)](_0x189cf5,_0xcdf420['x'],_0xcdf420['y'],_0x3d927d);}},Window_PartyCommand[_0x4fbf70(0x92c)]['drawItemStyleIcon']=function(_0x2b9a8c){const _0x5d0b00=_0x4fbf70;this[_0x5d0b00(0xbb5)](_0x2b9a8c)[_0x5d0b00(0xc4b)](/\\I\[(\d+)\]/i);const _0x38d615=Number(RegExp['$1'])||0x0,_0x20df12=this[_0x5d0b00(0x8fc)](_0x2b9a8c),_0x2b1f74=_0x20df12['x']+Math[_0x5d0b00(0xb2d)]((_0x20df12[_0x5d0b00(0x606)]-ImageManager[_0x5d0b00(0xa8e)])/0x2),_0x4b1bf6=_0x20df12['y']+(_0x20df12[_0x5d0b00(0x389)]-ImageManager[_0x5d0b00(0x3f6)])/0x2;this['drawIcon'](_0x38d615,_0x2b1f74,_0x4b1bf6);},Window_PartyCommand[_0x4fbf70(0x92c)][_0x4fbf70(0x7aa)]=function(){},Window_PartyCommand[_0x4fbf70(0x92c)][_0x4fbf70(0xd3e)]=function(){const _0x108957=_0x4fbf70;Window_Command['prototype']['activate'][_0x108957(0xc4a)](this);const _0x3cd541=this[_0x108957(0x3c7)]();if(_0x3cd541===_0x108957(0x972)){if(_0x108957(0xc3f)!==_0x108957(0xc3f)){const _0x4f004f=_0x2fa5a1[_0x108957(0x206)]();if(!_0x4f004f)return!![];if(!_0x4f004f[_0x108957(0x98d)]())return!![];const _0x5a064e=this[_0x108957(0x55a)](this[_0x108957(0x331)]()),_0x3d0a56=_0x4f004f['item']()['note'];if(_0x4f004f['isForNotUser']()){if(_0x5a064e===_0x2c1e1d['actor']())return![];}if(_0x4f004f[_0x108957(0x5e3)]()){if(!_0x5a064e[_0x108957(0x521)]())return![];}if(_0x4f004f[_0x108957(0x875)]()){if(!_0x5a064e[_0x108957(0x4e4)]())return![];}return!![];}else this[_0x108957(0xa15)]();}},Window_PartyCommand[_0x4fbf70(0x92c)]['battleLayoutStyle']=function(){const _0x25f8b7=_0x4fbf70;if(this[_0x25f8b7(0xb6d)])return this['_battleLayoutStyle'];return this[_0x25f8b7(0xb6d)]=SceneManager['_scene'][_0x25f8b7(0x3c7)](),this[_0x25f8b7(0xb6d)];},Window_PartyCommand['prototype'][_0x4fbf70(0xa9c)]=function(){const _0x13197b=_0x4fbf70,_0x525b84=VisuMZ[_0x13197b(0xae2)][_0x13197b(0x837)][_0x13197b(0xbd7)],_0x3a437e=this[_0x13197b(0xd85)]();switch(_0x3a437e){case _0x13197b(0x1f5):this[_0x13197b(0x642)][_0x13197b(0xa5e)](_0x525b84['HelpFight']);break;case _0x13197b(0x850):this[_0x13197b(0x642)][_0x13197b(0xa5e)](_0x525b84['HelpAutoBattle']);break;case'options':this[_0x13197b(0x642)][_0x13197b(0xa5e)](_0x525b84[_0x13197b(0x192)]);break;case _0x13197b(0x6db):this[_0x13197b(0x642)]['setText'](_0x525b84['HelpEscape']);break;default:this[_0x13197b(0x642)][_0x13197b(0xa5e)]('');break;}},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x61f)]=Window_ActorCommand[_0x4fbf70(0x92c)][_0x4fbf70(0x691)],Window_ActorCommand[_0x4fbf70(0x92c)][_0x4fbf70(0x691)]=function(_0xf4f910){const _0x2ce6c4=_0x4fbf70;VisuMZ[_0x2ce6c4(0xae2)]['Window_ActorCommand_initialize'][_0x2ce6c4(0xc4a)](this,_0xf4f910),this[_0x2ce6c4(0x72e)](_0xf4f910);},Window_ActorCommand[_0x4fbf70(0x92c)]['createCommandNameWindow']=function(_0x1a1522){const _0x25f86c=_0x4fbf70,_0x47f8bd=new Rectangle(0x0,0x0,_0x1a1522[_0x25f86c(0x606)],_0x1a1522['height']);this[_0x25f86c(0xbb7)]=new Window_Base(_0x47f8bd),this[_0x25f86c(0xbb7)][_0x25f86c(0x853)]=0x0,this[_0x25f86c(0x52a)](this[_0x25f86c(0xbb7)]),this['updateCommandNameWindow']();},Window_ActorCommand['prototype']['callUpdateHelp']=function(){const _0x171caf=_0x4fbf70;Window_Command['prototype'][_0x171caf(0xc5b)]['call'](this);if(this['_commandNameWindow'])this['updateCommandNameWindow']();},Window_ActorCommand['prototype']['updateCommandNameWindow']=function(){const _0x4dfcd3=_0x4fbf70,_0x1a02e6=this[_0x4dfcd3(0xbb7)];_0x1a02e6[_0x4dfcd3(0x6d0)][_0x4dfcd3(0xb36)]();const _0x22c874=this['commandStyleCheck'](this[_0x4dfcd3(0x331)]());if(_0x22c874===_0x4dfcd3(0x587)&&this[_0x4dfcd3(0x230)]()>0x0){const _0x10d535=this[_0x4dfcd3(0x8fc)](this[_0x4dfcd3(0x331)]());let _0x57a104=this[_0x4dfcd3(0xbb5)](this[_0x4dfcd3(0x331)]());_0x57a104=_0x57a104[_0x4dfcd3(0xb7c)](/\\I\[(\d+)\]/gi,''),_0x1a02e6[_0x4dfcd3(0x6a7)](),this['commandNameWindowDrawBackground'](_0x57a104,_0x10d535),this['commandNameWindowDrawText'](_0x57a104,_0x10d535),this['commandNameWindowCenter'](_0x57a104,_0x10d535);}},Window_ActorCommand[_0x4fbf70(0x92c)][_0x4fbf70(0x35f)]=function(_0x585cd2,_0x3622af){},Window_ActorCommand[_0x4fbf70(0x92c)]['commandNameWindowDrawText']=function(_0x3b36de,_0x574068){const _0x26cb51=_0x4fbf70,_0x526127=this[_0x26cb51(0xbb7)];_0x526127[_0x26cb51(0x73c)](_0x3b36de,0x0,_0x574068['y'],_0x526127[_0x26cb51(0x9c8)],_0x26cb51(0xc5c));},Window_ActorCommand[_0x4fbf70(0x92c)]['commandNameWindowCenter']=function(_0x2a65a7,_0x3ef328){const _0x1829a6=_0x4fbf70,_0x5448d5=this['_commandNameWindow'],_0x10b46d=$gameSystem[_0x1829a6(0xc69)](),_0x190ca8=_0x3ef328['x']+Math['floor'](_0x3ef328[_0x1829a6(0x606)]/0x2)+_0x10b46d;_0x5448d5['x']=_0x5448d5[_0x1829a6(0x606)]/-0x2+_0x190ca8,_0x5448d5['y']=Math['floor'](_0x3ef328[_0x1829a6(0x389)]/0x2);},Window_ActorCommand[_0x4fbf70(0x92c)][_0x4fbf70(0x78a)]=function(){const _0x2190dc=_0x4fbf70;if(!this[_0x2190dc(0x371)])return;const _0x161ce3=this[_0x2190dc(0x371)][_0x2190dc(0x3a4)]();for(const _0x5f12f5 of _0x161ce3){this['makeBattleCommand'](_0x5f12f5[_0x2190dc(0x7a4)]()[_0x2190dc(0xcda)]());}},Window_ActorCommand[_0x4fbf70(0x92c)][_0x4fbf70(0x433)]=function(_0x3d50d6){const _0x398fc0=_0x4fbf70;if(_0x3d50d6===_0x398fc0(0x2e5)){if(_0x398fc0(0x34c)!==_0x398fc0(0x34c)){if(!_0x476f9b[_0x398fc0(0x90d)]())return;if(!_0x443626[_0x398fc0(0xb67)])return;if(!_0x115f7f['isETB']())return;_0x4f5f48[_0x398fc0(0x334)](_0x3e0e8d,_0x417df5);const _0x421090=_0x2f6c0e[_0x398fc0(0x4b5)];_0x760048['_subject']&&_0x551796[_0x398fc0(0xb38)][_0x398fc0(0x4e8)]()['gainCurrentActionsETB'](_0x421090);}else this[_0x398fc0(0x20e)]();}[_0x398fc0(0x434),'SKILLS'][_0x398fc0(0x6e3)](_0x3d50d6)&&this[_0x398fc0(0x5cf)]();_0x3d50d6==='GUARD'&&this[_0x398fc0(0x816)]();_0x3d50d6==='ITEM'&&this[_0x398fc0(0x210)]();_0x3d50d6===_0x398fc0(0xa0f)&&(_0x398fc0(0x7c7)===_0x398fc0(0x7c7)?this[_0x398fc0(0x9a8)]():this[_0x398fc0(0xc62)]=_0x398fc0(0xa31));_0x3d50d6===_0x398fc0(0x6f3)&&this[_0x398fc0(0x214)]();if(_0x3d50d6[_0x398fc0(0xc4b)](/STYPE: (\d+)/i)){const _0x450f47=Number(RegExp['$1']);this[_0x398fc0(0xb5a)](_0x450f47);}else{if(_0x3d50d6['match'](/STYPE: (.*)/i)){const _0x29e4b8=DataManager['getStypeIdWithName'](RegExp['$1']);this[_0x398fc0(0xb5a)](_0x29e4b8);}}_0x3d50d6===_0x398fc0(0x1c4)&&this[_0x398fc0(0x89a)]();if(_0x3d50d6[_0x398fc0(0xc4b)](/SKILL: (\d+)/i)){const _0x163960=Number(RegExp['$1']);this[_0x398fc0(0x220)]($dataSkills[_0x163960]);}else{if(_0x3d50d6['match'](/SKILL: (.*)/i)){const _0x51b437=DataManager['getSkillIdWithName'](RegExp['$1']);this[_0x398fc0(0x220)]($dataSkills[_0x51b437]);}}if(_0x3d50d6===_0x398fc0(0x3ca)&&Imported[_0x398fc0(0x469)]){if('hbVVf'==='tvxlE'){const _0x468afa=this[_0x398fc0(0x98d)]()[_0x398fc0(0x302)];return _0x468afa['match'](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);}else this[_0x398fc0(0x9d6)]();}[_0x398fc0(0xb59),'COMBAT\x20LOG'][_0x398fc0(0x6e3)](_0x3d50d6)&&Imported[_0x398fc0(0x855)]&&this['addCombatLogCommand']();if(_0x3d50d6===_0x398fc0(0x64f)&&Imported[_0x398fc0(0xb6c)]){if(_0x398fc0(0x369)===_0x398fc0(0x94c)){if(!_0x4ebb3c[_0x398fc0(0xa83)])return;const _0x585f5e=_0x2edfcb[_0x398fc0(0x32c)][_0x398fc0(0x7cf)];if(!_0x585f5e)return;if(_0x3f4cc8[_0x398fc0(0x726)]['version']<=1.04){_0x79d60e(_0x398fc0(0x19f)),_0x3344f0[_0x398fc0(0x4c5)]();return;}_0x55b42a[_0x398fc0(0x334)](_0x53e7d3,_0x1c55ff);const _0xf0433=_0x3af512[_0x398fc0(0x193)];_0x585f5e[_0x398fc0(0x323)](_0xf0433);}else this['addWeaponSwapCommand'](!![]);}_0x3d50d6===_0x398fc0(0x8be)&&Imported['VisuMZ_2_BattleGridSystem']&&this[_0x398fc0(0x88e)]();},Window_ActorCommand[_0x4fbf70(0x92c)][_0x4fbf70(0x20e)]=function(){const _0x4eb9db=_0x4fbf70,_0x41c66f=$dataSkills[this[_0x4eb9db(0x371)][_0x4eb9db(0xa8f)]()];if(!_0x41c66f)return;if(!this[_0x4eb9db(0x281)](_0x41c66f))return;const _0x3170e3=this[_0x4eb9db(0xc08)](),_0x3ce6f4=DataManager[_0x4eb9db(0xafa)](_0x41c66f),_0x5ad4ae=DataManager[_0x4eb9db(0x885)](_0x41c66f),_0xa98a46=_0x3170e3===_0x4eb9db(0xb73)?_0x3ce6f4:_0x4eb9db(0x769)[_0x4eb9db(0x946)](_0x5ad4ae,_0x3ce6f4);this[_0x4eb9db(0xc42)](_0xa98a46,'attack',this['_actor'][_0x4eb9db(0x772)]());},Window_ActorCommand[_0x4fbf70(0x92c)][_0x4fbf70(0x816)]=function(){const _0x120db4=_0x4fbf70,_0x31bca2=$dataSkills[this[_0x120db4(0x371)]['guardSkillId']()];if(!_0x31bca2)return;if(!this[_0x120db4(0x281)](_0x31bca2))return;const _0xb2001b=this[_0x120db4(0xc08)](),_0x38bc6e=DataManager['battleCommandName'](_0x31bca2),_0x49a78a=DataManager[_0x120db4(0x885)](_0x31bca2),_0x5a50a8=_0xb2001b===_0x120db4(0xb73)?_0x38bc6e:'\x5cI[%1]%2'[_0x120db4(0x946)](_0x49a78a,_0x38bc6e);this['addCommand'](_0x5a50a8,'guard',this[_0x120db4(0x371)][_0x120db4(0x44a)]());},Window_ActorCommand[_0x4fbf70(0x92c)]['addItemCommand']=function(){const _0x41f3f0=_0x4fbf70,_0x44e541=this[_0x41f3f0(0xc08)](),_0x504ec7=VisuMZ[_0x41f3f0(0xae2)][_0x41f3f0(0x837)][_0x41f3f0(0x22d)][_0x41f3f0(0x75e)],_0x20eb17=_0x44e541===_0x41f3f0(0xb73)?TextManager[_0x41f3f0(0x98d)]:_0x41f3f0(0x769)[_0x41f3f0(0x946)](_0x504ec7,TextManager['item']),_0x562ddf=this[_0x41f3f0(0xa6b)]();this[_0x41f3f0(0xc42)](_0x20eb17,'item',_0x562ddf);},Window_ActorCommand[_0x4fbf70(0x92c)][_0x4fbf70(0xa6b)]=function(){const _0x54f220=_0x4fbf70;return this[_0x54f220(0x371)]&&this[_0x54f220(0x371)][_0x54f220(0xb10)]();},Window_ActorCommand[_0x4fbf70(0x92c)]['addSkillCommands']=function(){const _0x2e5d71=_0x4fbf70,_0x498901=this[_0x2e5d71(0x371)][_0x2e5d71(0x5f3)]();for(const _0x4c251d of _0x498901){if('OcKIG'!=='OcKIG'){if(!_0x4762b6[_0x2e5d71(0x90d)]())return;if(!_0x117fce[_0x2e5d71(0xaf5)])return;if(!_0x3258e2['_subject'])return;_0x4fd1d3[_0x2e5d71(0x334)](_0x347a9e,_0x2060b);const _0x2d6104=_0x284883[_0x2e5d71(0x6d1)];_0x1091ca[_0x2e5d71(0x988)](_0x2d6104,_0x338a1e[_0x2e5d71(0xb38)][_0x2e5d71(0x437)]());}else this[_0x2e5d71(0xb5a)](_0x4c251d);}},Window_ActorCommand[_0x4fbf70(0x92c)][_0x4fbf70(0xb5a)]=function(_0x3d4330){const _0x18a951=_0x4fbf70;let _0x264d30=$dataSystem[_0x18a951(0x5f3)][_0x3d4330];if(!_0x264d30)return;let _0x54f68c=_0x264d30;const _0x13b43f=this['commandStyle']();if(_0x13b43f===_0x18a951(0xb73))_0x54f68c=_0x54f68c['replace'](/\x1I\[(\d+)\]/gi,''),_0x54f68c=_0x54f68c['replace'](/\\I\[(\d+)\]/gi,'');else{if(!_0x264d30[_0x18a951(0xc4b)](/\\I\[(\d+)\]/i)){if('lRYkW'!==_0x18a951(0xb2b)){const _0x4491aa=Imported['VisuMZ_1_SkillsStatesCore']?VisuMZ[_0x18a951(0x9e1)][_0x18a951(0x837)]['Skills']:VisuMZ[_0x18a951(0xae2)][_0x18a951(0x837)][_0x18a951(0x22d)],_0x427824=$dataSystem[_0x18a951(0x3b5)][_0x18a951(0x6e3)](_0x3d4330),_0x513908=_0x427824?_0x4491aa[_0x18a951(0x852)]:_0x4491aa['IconStypeNorm'];_0x54f68c=_0x18a951(0x769)[_0x18a951(0x946)](_0x513908,_0x264d30);}else this['isCustomBattleScope']()?_0xa5b173=this[_0x18a951(0x8c9)]():_0x23ae54=this[_0x18a951(0xca5)]();}}this[_0x18a951(0xc42)](_0x54f68c,_0x18a951(0xac9),!![],_0x3d4330);},Window_ActorCommand[_0x4fbf70(0x92c)]['addSingleSkillCommands']=function(){const _0x12fecb=_0x4fbf70,_0x1fcd4f=this[_0x12fecb(0x371)][_0x12fecb(0x5f3)](),_0x2c83f3=this['_actor'][_0x12fecb(0xc70)]();for(const _0x4f55eb of _0x2c83f3){if(_0x12fecb(0x70f)===_0x12fecb(0x70f)){if(!_0x4f55eb)continue;if(Imported['VisuMZ_1_SkillsStatesCore']){if(this[_0x12fecb(0x2bb)](_0x4f55eb))continue;if(this[_0x12fecb(0x479)](_0x4f55eb))continue;}else{if(!_0x1fcd4f[_0x12fecb(0x6e3)](_0x4f55eb[_0x12fecb(0xd52)]))continue;}this[_0x12fecb(0x220)](_0x4f55eb);}else{_0x4e2c35('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),_0x13c481[_0x12fecb(0x4c5)]();return;}}},Window_ActorCommand['prototype'][_0x4fbf70(0x2bb)]=function(_0x4c5454){const _0x95d33c=_0x4fbf70,_0x3aa328=this[_0x95d33c(0x371)][_0x95d33c(0x5f3)](),_0xb17df=_0x3aa328[_0x95d33c(0xa29)](_0x289351=>DataManager[_0x95d33c(0x959)](_0x4c5454)[_0x95d33c(0x6e3)](_0x289351));return _0xb17df[_0x95d33c(0x9d2)]<=0x0;},Window_ActorCommand['prototype']['isHiddenSkill']=function(_0x1bbd0d){const _0x449044=_0x4fbf70;if(Imported['VisuMZ_1_SkillsStatesCore']){if(VisuMZ[_0x449044(0x9e1)][_0x449044(0x1a8)]>=1.24){if(_0x449044(0xb79)===_0x449044(0xb79)){if(this['_actor']){if(_0x449044(0x5b3)===_0x449044(0x471))this[_0x449044(0x392)]();else{if(!VisuMZ['SkillsStatesCore'][_0x449044(0xa47)](this[_0x449044(0x371)],_0x1bbd0d))return!![];if(!VisuMZ[_0x449044(0x9e1)][_0x449044(0x7ae)](this[_0x449044(0x371)],_0x1bbd0d))return!![];if(!VisuMZ[_0x449044(0x9e1)][_0x449044(0x7de)](this['_actor'],_0x1bbd0d))return!![];}}}else{let _0x2ea179=this[_0x449044(0x1ec)]()?_0x391865[_0x449044(0xb4b)]:_0x4ba3e2[_0x449044(0x9a6)];if(_0x5e3e56[_0x449044(0xcaf)]&&_0x1ff562[_0x449044(0x871)]){this[_0x449044(0xd75)]=this[_0x449044(0x1ec)]()?_0x449044(0x2c2):_0x449044(0x39c),this['_buttonText']=_0x44b350[_0x449044(0xa9f)](this[_0x449044(0xd75)]);const _0x53ed1a=_0x378275[_0x449044(0xbbb)][_0x449044(0x837)][_0x449044(0x4ba)]['TextFmt'];_0x2ea179=_0x53ed1a[_0x449044(0x946)](this[_0x449044(0x5ff)],_0x2ea179);}this['addCommand'](_0x2ea179,'selectAll');}}else{if(_0x449044(0x576)===_0x449044(0x9bb))_0x361dba[_0x449044(0x25b)]('clearActiveWeaponSet',_0x3b48a9);else{if(!Window_SkillList[_0x449044(0x92c)][_0x449044(0x978)]['call'](this,_0x1bbd0d))return!![];if(!Window_SkillList[_0x449044(0x92c)][_0x449044(0x79c)][_0x449044(0xc4a)](this,_0x1bbd0d))return!![];if(!Window_SkillList[_0x449044(0x92c)][_0x449044(0x898)][_0x449044(0xc4a)](this,_0x1bbd0d))return!![];}}}return![];},Window_ActorCommand[_0x4fbf70(0x92c)][_0x4fbf70(0x220)]=function(_0x27818b){const _0x272576=_0x4fbf70;if(!_0x27818b)return;if(!this[_0x272576(0x281)](_0x27818b))return;const _0x3ab34d=this[_0x272576(0xc08)](),_0x473181=DataManager[_0x272576(0xafa)](_0x27818b),_0x3efc83=DataManager[_0x272576(0x885)](_0x27818b),_0x3d414c=_0x3ab34d===_0x272576(0xb73)?_0x473181:_0x272576(0x769)[_0x272576(0x946)](_0x3efc83,_0x473181),_0x5d13b5=this['_actor'][_0x272576(0x2e2)](_0x27818b);this['addCommand'](_0x3d414c,_0x272576(0x4be),_0x5d13b5,_0x27818b['id']);},Window_ActorCommand[_0x4fbf70(0x92c)]['canAddSkillCommand']=function(_0x2996cf){const _0x246767=_0x4fbf70,_0x1fdce0=_0x2996cf['note'];if(_0x1fdce0[_0x246767(0xc4b)](/<COMMAND REQUIRE LEARN>/i)){if(_0x246767(0xa9a)===_0x246767(0x38e))this[_0x246767(0x5cf)]();else{if(!this[_0x246767(0x371)]['isLearnedSkill'](_0x2996cf['id']))return![];}}if(_0x1fdce0[_0x246767(0xc4b)](/<COMMAND REQUIRE ACCESS>/i)){if(_0x246767(0x602)===_0x246767(0x602)){if(!this[_0x246767(0x371)][_0x246767(0x6b5)](_0x2996cf['id']))return![];}else{if(_0x53395e['_battler']&&_0x59cab8[_0x246767(0x80d)]){if(_0x2c5e54['_battler'][_0x246767(0xc9f)]()&&_0x203314[_0x246767(0x80d)][_0x246767(0x923)]())return 0x1;else{if(_0x9da8ad[_0x246767(0x80d)][_0x246767(0xc9f)]()&&_0x328d46[_0x246767(0x80d)][_0x246767(0x923)]())return-0x1;}}}}const _0x4f494f=VisuMZ[_0x246767(0xae2)]['createKeyJS'](_0x2996cf,_0x246767(0x500));if(VisuMZ[_0x246767(0xae2)]['JS'][_0x4f494f]){if(!VisuMZ[_0x246767(0xae2)]['JS'][_0x4f494f][_0x246767(0xc4a)](this,this[_0x246767(0x371)],_0x2996cf))return![];}return VisuMZ[_0x246767(0xae2)][_0x246767(0x680)](_0x2996cf);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x680)]=function(_0x245017){const _0x2b02ba=_0x4fbf70,_0x3b0726=_0x245017[_0x2b02ba(0x9c1)];if(_0x3b0726[_0x2b02ba(0xc4b)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x2b02ba(0x694)!==_0x2b02ba(0x694)){if(_0x417fa8[_0x2b02ba(0x2ce)])return![];return _0x8dc13e[_0x2b02ba(0xae2)][_0x2b02ba(0x837)]['Enemy'][_0x2b02ba(0xb20)];}else{const _0x10aaee=JSON['parse']('['+RegExp['$1'][_0x2b02ba(0xc4b)](/\d+/g)+']');for(const _0x34ae3e of _0x10aaee){if(!$gameSwitches['value'](_0x34ae3e))return![];}return!![];}}if(_0x3b0726[_0x2b02ba(0xc4b)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x2b02ba(0x457)!==_0x2b02ba(0x2e8)){const _0x530600=JSON[_0x2b02ba(0x339)]('['+RegExp['$1'][_0x2b02ba(0xc4b)](/\d+/g)+']');for(const _0xddf906 of _0x530600){if('JVDoY'!==_0x2b02ba(0x876))this[_0x2b02ba(0xba5)]=![];else{if(!$gameSwitches[_0x2b02ba(0x9fb)](_0xddf906))return![];}}return!![];}else this[_0x2b02ba(0x64e)](_0x4e88a9,_0x9e41b['x'],_0x42ab42['y'],_0xb55d03);}if(_0x3b0726[_0x2b02ba(0xc4b)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x5cd955=JSON[_0x2b02ba(0x339)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x45b854 of _0x5cd955){if($gameSwitches[_0x2b02ba(0x9fb)](_0x45b854))return!![];}return![];}if(_0x3b0726['match'](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x55f7f1=JSON['parse']('['+RegExp['$1'][_0x2b02ba(0xc4b)](/\d+/g)+']');for(const _0x3c0e7b of _0x55f7f1){if(_0x2b02ba(0x70d)==='CvfJj'){const _0x555353=this['findSymbolExt']('singleSkill',_0x1259bc['id']);this['select'](_0x555353||0x0);}else{if(!$gameSwitches[_0x2b02ba(0x9fb)](_0x3c0e7b))return!![];}}return![];}if(_0x3b0726[_0x2b02ba(0xc4b)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x4db4a9=JSON[_0x2b02ba(0x339)]('['+RegExp['$1'][_0x2b02ba(0xc4b)](/\d+/g)+']');for(const _0x3aad00 of _0x4db4a9){if(!$gameSwitches['value'](_0x3aad00))return!![];}return![];}if(_0x3b0726['match'](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x2b02ba(0xa14)===_0x2b02ba(0xb57))_0x3c51b1['forceMotion'](_0x2d3f0b),[_0x2b02ba(0x809),_0x2b02ba(0x805),_0x2b02ba(0x54d)][_0x2b02ba(0x6e3)](_0x1c63a9)&&this[_0x2b02ba(0x795)]();else{const _0x4f4b49=JSON[_0x2b02ba(0x339)]('['+RegExp['$1'][_0x2b02ba(0xc4b)](/\d+/g)+']');for(const _0x316733 of _0x4f4b49){if($gameSwitches[_0x2b02ba(0x9fb)](_0x316733))return![];}return!![];}}return!![];},Window_ActorCommand['prototype'][_0x4fbf70(0x9a8)]=function(){const _0x19b71a=_0x4fbf70,_0x3078a8=this[_0x19b71a(0xc08)](),_0x43b4b4=VisuMZ[_0x19b71a(0xae2)]['Settings'][_0x19b71a(0xbd7)][_0x19b71a(0xaa5)],_0x1e4882=_0x3078a8===_0x19b71a(0xb73)?TextManager[_0x19b71a(0x6db)]:_0x19b71a(0x769)[_0x19b71a(0x946)](_0x43b4b4,TextManager['escape']),_0x5ecce2=this[_0x19b71a(0x216)]();this[_0x19b71a(0xc42)](_0x1e4882,_0x19b71a(0x6db),_0x5ecce2);},Window_ActorCommand[_0x4fbf70(0x92c)][_0x4fbf70(0x216)]=function(){const _0x1a47f3=_0x4fbf70;return BattleManager[_0x1a47f3(0x98e)]();},Window_ActorCommand[_0x4fbf70(0x92c)][_0x4fbf70(0x214)]=function(){const _0x10fe3d=_0x4fbf70,_0x301362=this[_0x10fe3d(0xc08)](),_0x9a97c4=VisuMZ[_0x10fe3d(0xae2)][_0x10fe3d(0x837)]['PartyCmd'][_0x10fe3d(0x791)],_0x51d1e1=_0x301362===_0x10fe3d(0xb73)?TextManager[_0x10fe3d(0x850)]:'\x5cI[%1]%2'[_0x10fe3d(0x946)](_0x9a97c4,TextManager['autoBattle']),_0x87fa03=this[_0x10fe3d(0x907)]();this[_0x10fe3d(0xc42)](_0x51d1e1,_0x10fe3d(0x850),_0x87fa03);},Window_ActorCommand[_0x4fbf70(0x92c)]['isAutoBattleCommandEnabled']=function(){return!![];},Window_ActorCommand[_0x4fbf70(0x92c)][_0x4fbf70(0xcc6)]=function(){const _0x3db16a=_0x4fbf70;return VisuMZ[_0x3db16a(0xae2)]['Settings'][_0x3db16a(0x22d)][_0x3db16a(0x56b)];},Window_ActorCommand[_0x4fbf70(0x92c)][_0x4fbf70(0x71b)]=function(_0x200e26){const _0x2f36d5=_0x4fbf70,_0x44cd01=this[_0x2f36d5(0xcf2)](_0x200e26);if(_0x44cd01===_0x2f36d5(0x360)){if(_0x2f36d5(0x6ea)!==_0x2f36d5(0x6ea))return _0x2a2f7f[_0x2f36d5(0x4e8)]()['aliveMembers']()['filter'](_0xaeafa=>_0xaeafa!==_0x579a67);else this[_0x2f36d5(0x5df)](_0x200e26);}else{if(_0x44cd01===_0x2f36d5(0x587)){if(_0x2f36d5(0x5ae)===_0x2f36d5(0x5ae))this[_0x2f36d5(0xb09)](_0x200e26);else return this[_0x2f36d5(0xaac)]();}else _0x2f36d5(0xc6e)===_0x2f36d5(0x9b0)?this[_0x2f36d5(0xc77)][this[_0x2f36d5(0x966)]]=_0x46d88c:Window_Command[_0x2f36d5(0x92c)][_0x2f36d5(0x71b)][_0x2f36d5(0xc4a)](this,_0x200e26);}this[_0x2f36d5(0x20a)](_0x200e26);},Window_ActorCommand[_0x4fbf70(0x92c)][_0x4fbf70(0xc08)]=function(){const _0x335867=_0x4fbf70;return VisuMZ[_0x335867(0xae2)][_0x335867(0x837)]['ActorCmd'][_0x335867(0x5b8)];},Window_ActorCommand[_0x4fbf70(0x92c)][_0x4fbf70(0xcf2)]=function(_0x5a9f02){const _0x23dc88=_0x4fbf70;if(_0x5a9f02<0x0)return _0x23dc88(0xb73);const _0x80a38d=this['commandStyle']();if(_0x80a38d!==_0x23dc88(0x3ba)){if('nwiTg'===_0x23dc88(0x56f)){const _0x3f74f6=this['commandStyleCheck'](_0x5cb74b);if(_0x3f74f6==='iconText')this[_0x23dc88(0x5df)](_0x286196);else _0x3f74f6===_0x23dc88(0x587)?this[_0x23dc88(0xb09)](_0x31a916):_0x3a8dba['prototype'][_0x23dc88(0x71b)][_0x23dc88(0xc4a)](this,_0x2a3e0d);}else return _0x80a38d;}else{if(this[_0x23dc88(0x230)]()>0x0){const _0x2842af=this[_0x23dc88(0xbb5)](_0x5a9f02);if(_0x2842af[_0x23dc88(0xc4b)](/\\I\[(\d+)\]/i)){const _0x4b5f48=this[_0x23dc88(0x8fc)](_0x5a9f02),_0xe58873=this['textSizeEx'](_0x2842af)[_0x23dc88(0x606)];return _0xe58873<=_0x4b5f48[_0x23dc88(0x606)]?_0x23dc88(0x360):'icon';}}}return _0x23dc88(0xb73);},Window_ActorCommand[_0x4fbf70(0x92c)][_0x4fbf70(0x5df)]=function(_0x1d3e94){const _0x1ceadc=_0x4fbf70,_0x4c9e97=this[_0x1ceadc(0x8fc)](_0x1d3e94),_0x2171f5=this[_0x1ceadc(0xbb5)](_0x1d3e94),_0x42ca34=this[_0x1ceadc(0x69d)](_0x2171f5)['width'];this['changePaintOpacity'](this[_0x1ceadc(0x5e7)](_0x1d3e94));const _0x101a3c=this[_0x1ceadc(0xcc6)]();if(_0x101a3c===_0x1ceadc(0x8ea))this[_0x1ceadc(0x64e)](_0x2171f5,_0x4c9e97['x']+_0x4c9e97['width']-_0x42ca34,_0x4c9e97['y'],_0x42ca34);else{if(_0x101a3c==='center'){const _0x1677de=_0x4c9e97['x']+Math[_0x1ceadc(0xb2d)]((_0x4c9e97[_0x1ceadc(0x606)]-_0x42ca34)/0x2);this[_0x1ceadc(0x64e)](_0x2171f5,_0x1677de,_0x4c9e97['y'],_0x42ca34);}else this['drawTextEx'](_0x2171f5,_0x4c9e97['x'],_0x4c9e97['y'],_0x42ca34);}},Window_ActorCommand['prototype']['drawItemStyleIcon']=function(_0x18df3a){const _0x170295=_0x4fbf70;this[_0x170295(0xbb5)](_0x18df3a)[_0x170295(0xc4b)](/\\I\[(\d+)\]/i);const _0x572fe2=Number(RegExp['$1'])||0x0,_0x41fce8=this[_0x170295(0x8fc)](_0x18df3a),_0x36cb84=_0x41fce8['x']+Math[_0x170295(0xb2d)]((_0x41fce8['width']-ImageManager[_0x170295(0xa8e)])/0x2),_0xc6b546=_0x41fce8['y']+(_0x41fce8[_0x170295(0x389)]-ImageManager[_0x170295(0x3f6)])/0x2;this['drawIcon'](_0x572fe2,_0x36cb84,_0xc6b546);},Window_ActorCommand[_0x4fbf70(0x92c)][_0x4fbf70(0x20a)]=function(_0x30eee4){const _0x18a3f0=_0x4fbf70;if(!(VisuMZ[_0x18a3f0(0xae2)][_0x18a3f0(0x837)][_0x18a3f0(0x22d)]['ShowCosts']??!![]))return;const _0x4a2250=this[_0x18a3f0(0xc68)](_0x30eee4);if(!['attack',_0x18a3f0(0x73a),_0x18a3f0(0x4be)][_0x18a3f0(0x6e3)](_0x4a2250))return;const _0x1995ca=this[_0x18a3f0(0x8fc)](_0x30eee4);let _0x38013e=null;if(_0x4a2250==='attack'){if(_0x18a3f0(0x622)!==_0x18a3f0(0x83c))_0x38013e=$dataSkills[this[_0x18a3f0(0x371)][_0x18a3f0(0xa8f)]()];else return _0x297bbb['friendsUnit']()[_0x18a3f0(0x1c3)]()[_0x18a3f0(0xa29)](_0x4830a8=>_0x4830a8!==_0x17dea7);}else _0x4a2250==='guard'?_0x38013e=$dataSkills[this[_0x18a3f0(0x371)]['guardSkillId']()]:_0x38013e=$dataSkills[this['_list'][_0x30eee4][_0x18a3f0(0x912)]];this[_0x18a3f0(0xab7)](this[_0x18a3f0(0x371)],_0x38013e,_0x1995ca['x'],_0x1995ca['y'],_0x1995ca['width']);},Window_ActorCommand[_0x4fbf70(0x92c)][_0x4fbf70(0xab7)]=function(_0x11ec2a,_0x1bd92b,_0x8eb274,_0x4f59b4,_0x15ed96){const _0x361b73=_0x4fbf70;if(!_0x1bd92b)return;Imported[_0x361b73(0x6ba)]?Window_Command[_0x361b73(0x92c)][_0x361b73(0xab7)]['call'](this,_0x11ec2a,_0x1bd92b,_0x8eb274,_0x4f59b4,_0x15ed96):Window_SkillList['prototype'][_0x361b73(0xab7)][_0x361b73(0xc4a)](this,_0x1bd92b,_0x8eb274,_0x4f59b4,_0x15ed96);},Window_ActorCommand[_0x4fbf70(0x92c)]['hide']=function(){},Window_ActorCommand['prototype']['activate']=function(){const _0x4f4ae6=_0x4fbf70;Window_Command[_0x4f4ae6(0x92c)][_0x4f4ae6(0xd3e)][_0x4f4ae6(0xc4a)](this);const _0x434d4a=this[_0x4f4ae6(0x3c7)]();if(_0x434d4a===_0x4f4ae6(0x972)){if(_0x4f4ae6(0x92f)!=='vNrXr'){if(!_0x1734d8['VisuMZ_3_ActSeqImpact'])return;const _0x5d9fd4=_0x28111d[_0x4f4ae6(0x32c)][_0x4f4ae6(0x7cf)];if(!_0x5d9fd4)return;if(_0x101637['ActSeqImpact'][_0x4f4ae6(0x1a8)]<=1.04){_0x5a0897('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),_0x1a25c2[_0x4f4ae6(0x4c5)]();return;}_0x165b71['ConvertParams'](_0x147fa4,_0x2a4bfb);const _0x2cb27c=_0x47e2b1[_0x4f4ae6(0x193)];_0x5d9fd4['setupNegativeImpactFilter'](_0x2cb27c);}else this[_0x4f4ae6(0xa15)]();}},Window_ActorCommand[_0x4fbf70(0x92c)]['battleLayoutStyle']=function(){const _0x5690a7=_0x4fbf70;if(this[_0x5690a7(0xb6d)])return this[_0x5690a7(0xb6d)];return this['_battleLayoutStyle']=SceneManager[_0x5690a7(0x32c)][_0x5690a7(0x3c7)](),this['_battleLayoutStyle'];},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x4a4)]=Window_ActorCommand['prototype'][_0x4fbf70(0xc55)],Window_ActorCommand[_0x4fbf70(0x92c)]['setup']=function(_0x520942){const _0x4785a9=_0x4fbf70,_0x7b7c4a=this[_0x4785a9(0x3c7)]();if(_0x520942&&['xp',_0x4785a9(0x1c0)][_0x4785a9(0x6e3)](_0x7b7c4a)){if(_0x4785a9(0x9d8)!==_0x4785a9(0x9d8)){const _0x377082=this['item']()[_0x4785a9(0x302)];return _0x377082[_0x4785a9(0xc4b)](/(?:ENEMY|FOE)/i)&&_0x377082[_0x4785a9(0xc4b)](/OR/i)&&_0x377082[_0x4785a9(0xc4b)](/(?:ALLY|FRIEND)/i);}else this[_0x4785a9(0x24a)](_0x520942);}else _0x520942&&[_0x4785a9(0x972)][_0x4785a9(0x6e3)](_0x7b7c4a)&&(this[_0x4785a9(0x1cb)](_0x520942),this[_0x4785a9(0xa15)]());VisuMZ['BattleCore'][_0x4785a9(0x4a4)][_0x4785a9(0xc4a)](this,_0x520942),_0x520942&&$gameTroop[_0x4785a9(0x1c3)]()[_0x4785a9(0x9d2)]>0x0&&_0x520942[_0x4785a9(0xb81)]()&&(_0x4785a9(0x583)!==_0x4785a9(0xd51)?_0x520942[_0x4785a9(0xb81)]()[_0x4785a9(0x4ef)]():(_0x2f90bc['BattleCore'][_0x4785a9(0x61f)][_0x4785a9(0xc4a)](this,_0x398255),this['createCommandNameWindow'](_0x152951)));},Window_ActorCommand['prototype'][_0x4fbf70(0x24a)]=function(_0x754301){const _0x1653d6=_0x4fbf70,_0x438809=Math['round'](Graphics[_0x1653d6(0x2d5)]/0x3),_0x39c4b7=Math[_0x1653d6(0xbec)](Graphics[_0x1653d6(0x2d5)]/$gameParty[_0x1653d6(0x914)]()[_0x1653d6(0x9d2)]),_0x217e67=Math[_0x1653d6(0x872)](_0x438809,_0x39c4b7),_0x55aae7=this[_0x1653d6(0xaa2)](VisuMZ[_0x1653d6(0xae2)][_0x1653d6(0x837)][_0x1653d6(0x41c)][_0x1653d6(0x7f6)]),_0x2a3e5a=Math[_0x1653d6(0xbec)](_0x39c4b7*_0x754301['index']())+Math[_0x1653d6(0xbec)]((_0x39c4b7-_0x217e67)/0x2),_0x141d2c=Math[_0x1653d6(0xbec)](SceneManager['_scene'][_0x1653d6(0x9e4)]['y']-_0x55aae7);this[_0x1653d6(0xc1d)](_0x2a3e5a,_0x141d2c,_0x217e67,_0x55aae7),this[_0x1653d6(0xcb1)](),this['setBackgroundType'](0x1);},Window_ActorCommand[_0x4fbf70(0x92c)][_0x4fbf70(0x1cb)]=function(_0x5833a8){const _0x2c7def=_0x4fbf70,_0xb6a7de=SceneManager[_0x2c7def(0x32c)]['partyCommandWindowRectBorderStyle']();this[_0x2c7def(0xc1d)](_0xb6a7de['x'],_0xb6a7de['y'],_0xb6a7de[_0x2c7def(0x606)],_0xb6a7de[_0x2c7def(0x389)]),this[_0x2c7def(0xcb1)](),this['setBackgroundType'](0x0);},Window_ActorCommand['prototype']['refreshDimmerBitmap']=function(){const _0x587b46=_0x4fbf70;if(this[_0x587b46(0x7bf)]){const _0x4292da=this[_0x587b46(0x7bf)][_0x587b46(0x597)],_0x1a5e9e=this[_0x587b46(0x606)]-0x8,_0x1f5ebe=this[_0x587b46(0x389)],_0x1b1432=this[_0x587b46(0x379)],_0x4084d5=ColorManager[_0x587b46(0xade)](),_0x9d9870=ColorManager['dimColor2']();this[_0x587b46(0x7bf)]['x']=0x4,_0x4292da[_0x587b46(0x41e)](_0x1a5e9e,_0x1f5ebe),_0x4292da[_0x587b46(0x80e)](0x0,0x0,_0x1a5e9e,_0x1b1432,_0x9d9870,_0x4084d5,!![]),_0x4292da['fillRect'](0x0,_0x1b1432,_0x1a5e9e,_0x1f5ebe-_0x1b1432*0x2,_0x4084d5),_0x4292da[_0x587b46(0x80e)](0x0,_0x1f5ebe-_0x1b1432,_0x1a5e9e,_0x1b1432,_0x4084d5,_0x9d9870,!![]),this[_0x587b46(0x7bf)]['setFrame'](0x0,0x0,_0x1a5e9e,_0x1f5ebe);}},Window_ActorCommand['prototype'][_0x4fbf70(0xa9c)]=function(){const _0x1cbf8b=_0x4fbf70;if(!this['_actor'])return;const _0x3bbd04=VisuMZ[_0x1cbf8b(0xae2)]['Settings'][_0x1cbf8b(0x22d)],_0x3ecb9f=this[_0x1cbf8b(0xd85)]();switch(_0x3ecb9f){case _0x1cbf8b(0x3f3):this[_0x1cbf8b(0x654)]($dataSkills[this[_0x1cbf8b(0x371)]['attackSkillId']()]);break;case _0x1cbf8b(0x73a):this[_0x1cbf8b(0x654)]($dataSkills[this[_0x1cbf8b(0x371)]['guardSkillId']()]);break;case _0x1cbf8b(0xac9):const _0x3f4c88=_0x3bbd04[_0x1cbf8b(0xbf8)],_0x28d0b1=_0x3f4c88[_0x1cbf8b(0x946)]($dataSystem[_0x1cbf8b(0x5f3)][this['currentExt']()]);this[_0x1cbf8b(0x642)]['setText'](_0x28d0b1);break;case _0x1cbf8b(0x4be):this[_0x1cbf8b(0x654)]($dataSkills[this[_0x1cbf8b(0x3e9)]()]);break;case _0x1cbf8b(0x98d):this[_0x1cbf8b(0x642)][_0x1cbf8b(0xa5e)](_0x3bbd04['HelpItem']);break;case _0x1cbf8b(0x6db):this[_0x1cbf8b(0x642)][_0x1cbf8b(0xa5e)](_0x3bbd04[_0x1cbf8b(0xbd6)]);break;case _0x1cbf8b(0x850):this[_0x1cbf8b(0x642)]['setText'](_0x3bbd04[_0x1cbf8b(0x65d)]);break;default:this['_helpWindow']['setText']('');break;}},Window_ActorCommand[_0x4fbf70(0x92c)][_0x4fbf70(0x578)]=function(){const _0x550253=_0x4fbf70;this[_0x550253(0x2a8)](0x0);if(this[_0x550253(0x371)]&&ConfigManager[_0x550253(0x667)]){const _0x22180c=this[_0x550253(0x371)][_0x550253(0x3b0)]();this[_0x550253(0x45e)](_0x22180c);if(_0x22180c===_0x550253(0xac9)){const _0x54de90=this[_0x550253(0x371)][_0x550253(0xbaf)]();if(_0x54de90){const _0xae999b=this[_0x550253(0x7d3)](_0x550253(0xac9),_0x54de90['stypeId']);this[_0x550253(0x76b)](_0xae999b||0x0);}}else{if(_0x22180c===_0x550253(0x4be)){if('BReku'===_0x550253(0xb71)){const _0x51585a=this[_0x550253(0x371)][_0x550253(0xbaf)]();if(_0x51585a){if('BnyKI'==='BnyKI'){const _0x886213=this[_0x550253(0x7d3)]('singleSkill',_0x51585a['id']);this['select'](_0x886213||0x0);}else this[_0x550253(0x4ee)](),this[_0x550253(0x3c1)]();}}else _0x101ff1['setWaitMode'](_0x550253(0x505));}}}},Window_ActorCommand[_0x4fbf70(0x92c)][_0x4fbf70(0x7d3)]=function(_0x37fc98,_0x496fd9){const _0x255d57=_0x4fbf70;return this[_0x255d57(0x2da)]['findIndex'](_0x24fc7a=>_0x24fc7a[_0x255d57(0xcc8)]===_0x37fc98&&_0x24fc7a[_0x255d57(0x912)]===_0x496fd9);},VisuMZ['BattleCore']['Window_BattleStatus_initialize']=Window_BattleStatus[_0x4fbf70(0x92c)]['initialize'],Window_BattleStatus[_0x4fbf70(0x92c)][_0x4fbf70(0x691)]=function(_0x16f41e){const _0x4be24b=_0x4fbf70;VisuMZ[_0x4be24b(0xae2)][_0x4be24b(0x1a7)][_0x4be24b(0xc4a)](this,_0x16f41e),this[_0x4be24b(0x4d0)](),this['createAttachmentSprites']();},Window_BattleStatus[_0x4fbf70(0x92c)][_0x4fbf70(0x3c7)]=function(){const _0x3a9c8b=_0x4fbf70;if(this['_battleLayoutStyle'])return this[_0x3a9c8b(0xb6d)];return this[_0x3a9c8b(0xb6d)]=SceneManager['_scene'][_0x3a9c8b(0x3c7)](),this['_battleLayoutStyle'];},Window_BattleStatus[_0x4fbf70(0x92c)][_0x4fbf70(0x4d0)]=function(){const _0x43ee21=_0x4fbf70;this[_0x43ee21(0x71c)]=this['isFrameVisible']();const _0x2e64b7=VisuMZ['BattleCore'][_0x43ee21(0x837)][_0x43ee21(0x41c)];_0x2e64b7[_0x43ee21(0x5bb)]&&(this[_0x43ee21(0x853)]=0x0);},Window_BattleStatus[_0x4fbf70(0x92c)][_0x4fbf70(0x649)]=function(){const _0x1b8cb1=_0x4fbf70,_0x288776=VisuMZ[_0x1b8cb1(0xae2)][_0x1b8cb1(0x837)][_0x1b8cb1(0x41c)];if(_0x288776[_0x1b8cb1(0x999)])return!![];const _0x159b11=this['battleLayoutStyle']();switch(_0x159b11){case'list':case'border':return!![];break;case _0x1b8cb1(0x23c):case'xp':case _0x1b8cb1(0x1c0):default:return![];break;}},Window_BattleStatus['prototype'][_0x4fbf70(0x8cc)]=function(){const _0x387b8b=_0x4fbf70;return this[_0x387b8b(0x649)]()?0x0:0xa;},Window_BattleStatus['prototype'][_0x4fbf70(0x2d7)]=function(){const _0x13d362=_0x4fbf70,_0x44e52c=this['battleLayoutStyle']();switch(_0x44e52c){case _0x13d362(0xa31):return 0x1;break;case'xp':case _0x13d362(0x1c0):return $gameParty[_0x13d362(0x914)]()['length'];break;case'default':default:return $gameParty[_0x13d362(0xd1c)]();break;}},Window_BattleStatus[_0x4fbf70(0x92c)][_0x4fbf70(0x3b9)]=function(){const _0x35a146=_0x4fbf70,_0x5b23f4=this['battleLayoutStyle']();switch(_0x5b23f4){case'list':return Window_StatusBase[_0x35a146(0x92c)][_0x35a146(0x3b9)]['call'](this);break;case _0x35a146(0x23c):case'xp':case _0x35a146(0x1c0):default:return this[_0x35a146(0xc35)];break;}},Window_BattleStatus['prototype'][_0x4fbf70(0x688)]=function(){const _0x211bbc=_0x4fbf70,_0x118e89=this[_0x211bbc(0x3c7)]();switch(_0x118e89){case'list':return Window_StatusBase[_0x211bbc(0x92c)]['rowSpacing'][_0x211bbc(0xc4a)](this);break;case _0x211bbc(0x23c):case'xp':case _0x211bbc(0x1c0):default:return 0x0;break;}},Window_BattleStatus[_0x4fbf70(0x92c)][_0x4fbf70(0x440)]=function(){const _0x13fcde=_0x4fbf70;this[_0x13fcde(0x649)]()?_0x13fcde(0x51f)!==_0x13fcde(0x51f)?(_0xc4cae4[_0x13fcde(0xae2)][_0x13fcde(0x1f0)](),_0x5445b0['BattleCore'][_0x13fcde(0x51b)](_0x276877),_0x1ea0b4['BattleCore'][_0x13fcde(0x51b)](_0x24eead)):Window_StatusBase['prototype'][_0x13fcde(0x440)]['call'](this):this[_0x13fcde(0x379)]=0x8;},Window_BattleStatus[_0x4fbf70(0x92c)][_0x4fbf70(0x683)]=function(){const _0x3c2301=_0x4fbf70,_0x4baf92=VisuMZ[_0x3c2301(0xae2)]['Settings']['BattleLayout'];if(_0x4baf92['StatusWindowSkinFilename']){if(_0x3c2301(0xbff)!==_0x3c2301(0xbff)){let _0x2bb4d8=0x0;this[_0x3c2301(0x3ff)][_0x3c2301(0x9d2)]>0x0&&(_0x2bb4d8=this[_0x3c2301(0x3ff)][this[_0x3c2301(0x3ff)][_0x3c2301(0x9d2)]-0x1]),this[_0x3c2301(0x575)][_0x3c2301(0x9d2)]>_0x2bb4d8?this[_0x3c2301(0x438)]():this[_0x3c2301(0x91e)]();}else this['windowskin']=ImageManager[_0x3c2301(0x5b7)](_0x4baf92['StatusWindowSkinFilename']);}else _0x3c2301(0x749)!==_0x3c2301(0x750)?Window_StatusBase['prototype']['loadWindowskin'][_0x3c2301(0xc4a)](this):(_0x314573=(_0x4599fe+_0x5a25e1)/0x2,_0x4cdcf5=-0x1);},Window_BattleStatus[_0x4fbf70(0x92c)]['drawItemBackground']=function(_0x501d12){const _0xe1de3d=_0x4fbf70,_0xe444b5=VisuMZ[_0xe1de3d(0xae2)][_0xe1de3d(0x837)][_0xe1de3d(0x41c)];if(_0xe444b5[_0xe1de3d(0x95d)])return;Window_StatusBase[_0xe1de3d(0x92c)][_0xe1de3d(0xb4f)][_0xe1de3d(0xc4a)](this,_0x501d12);},Window_BattleStatus[_0x4fbf70(0x92c)]['requestRefresh']=function(){this['_requestRefresh']=!![];},Window_BattleStatus[_0x4fbf70(0x92c)]['update']=function(){const _0xeca2cb=_0x4fbf70;Window_StatusBase[_0xeca2cb(0x92c)][_0xeca2cb(0x7b2)][_0xeca2cb(0xc4a)](this),this[_0xeca2cb(0xc1f)](),this[_0xeca2cb(0x93e)]();if(this['battleLayoutStyle']()===_0xeca2cb(0x972))this[_0xeca2cb(0x3ed)]();},Window_BattleStatus[_0x4fbf70(0x92c)][_0x4fbf70(0xc1f)]=function(){const _0x3126c7=_0x4fbf70;if($gameTemp[_0x3126c7(0x258)]())this['preparePartyRefresh'](),this[_0x3126c7(0x760)]=![],$gameTemp['clearBattleRefreshRequest']();else{if(this[_0x3126c7(0x760)]){if(_0x3126c7(0x2a9)!=='HxUMe')return _0xb3f284[_0x3126c7(0x2d5)];else this[_0x3126c7(0x760)]=![],this[_0x3126c7(0x1e5)](),this[_0x3126c7(0x9e8)]();}}},Window_BattleStatus['prototype'][_0x4fbf70(0x9c9)]=function(){const _0xf85315=_0x4fbf70;Window_StatusBase[_0xf85315(0x92c)][_0xf85315(0x9c9)][_0xf85315(0xc4a)](this);if(!$gameSystem['isSideView']())this['refresh']();},Window_BattleStatus['prototype'][_0x4fbf70(0x7aa)]=function(){const _0x9a8b5f=_0x4fbf70;if(this[_0x9a8b5f(0x631)]===Window_BattleStatus)return;Window_StatusBase[_0x9a8b5f(0x92c)][_0x9a8b5f(0x7aa)]['call'](this);},Window_BattleStatus[_0x4fbf70(0x92c)][_0x4fbf70(0xb5b)]=function(_0xe9bd91){const _0x3f55f6=_0x4fbf70,_0x3a3876=this['battleLayoutStyle']();switch(_0x3a3876){case'xp':case'portrait':break;case _0x3f55f6(0x23c):case _0x3f55f6(0xa31):case _0x3f55f6(0x972):default:return Window_StatusBase[_0x3f55f6(0x92c)][_0x3f55f6(0xb5b)]['call'](this,_0xe9bd91);break;}},VisuMZ[_0x4fbf70(0xae2)]['Window_BattleStatus_drawItemImage']=Window_BattleStatus['prototype'][_0x4fbf70(0x99a)],Window_BattleStatus['prototype'][_0x4fbf70(0x99a)]=function(_0x378356){const _0x28a5d3=_0x4fbf70,_0x358d91=this['battleLayoutStyle']();switch(_0x358d91){case _0x28a5d3(0xa31):this[_0x28a5d3(0x361)](_0x378356);break;case'xp':this[_0x28a5d3(0x8fb)](_0x378356);break;case _0x28a5d3(0x1c0):this['drawItemImagePortraitStyle'](_0x378356);break;case'default':case _0x28a5d3(0x972):default:VisuMZ['BattleCore']['Window_BattleStatus_drawItemImage'][_0x28a5d3(0xc4a)](this,_0x378356);break;}},Window_BattleStatus[_0x4fbf70(0x92c)][_0x4fbf70(0x1bf)]=function(_0x1ed0a0){const _0x4dc552=_0x4fbf70,_0x24d5fd=this[_0x4dc552(0x3c7)]();if(!$gameSystem[_0x4dc552(0x2ee)]())this[_0x4dc552(0x27d)](_0x1ed0a0);switch(_0x24d5fd){case'list':this[_0x4dc552(0x21b)](_0x1ed0a0);break;case'xp':case _0x4dc552(0x1c0):case _0x4dc552(0x23c):case _0x4dc552(0x972):default:this[_0x4dc552(0xc14)](_0x1ed0a0);break;}},Window_BattleStatus['prototype'][_0x4fbf70(0x352)]=function(){const _0x4e98a7=_0x4fbf70,_0x222a9f=this[_0x4e98a7(0x3c7)]();if(['xp'][_0x4e98a7(0x6e3)](_0x222a9f)&&!$gameSystem[_0x4e98a7(0x2ee)]()){if(_0x4e98a7(0xa1c)===_0x4e98a7(0xa1c)){this[_0x4e98a7(0xa24)](0x0,0x0,0x0,0x0);return;}else{this[_0x4e98a7(0x219)]['push'](_0x5ef2f7);if(this[_0x4e98a7(0x724)]()){const _0x395a7b=_0x51ad94['_scene'][_0x4e98a7(0x9e4)];if(_0x395a7b)_0x395a7b[_0x4e98a7(0xaad)](_0x3bde42,this[_0x4e98a7(0x80d)]);}else{this[_0x4e98a7(0xb7e)]()[_0x4e98a7(0x52a)](_0x4d724f);if(_0x229ba9['isBattleFlipped']())_0x5c648b['scale']['x']=-0x1;}}}Window_StatusBase[_0x4e98a7(0x92c)]['refreshCursor'][_0x4e98a7(0xc4a)](this);},Window_BattleStatus[_0x4fbf70(0x92c)]['centerFrontViewSprite']=function(_0x59e143){const _0x55eef6=_0x4fbf70,_0x50089b=this[_0x55eef6(0x55a)](_0x59e143)['battler']();if(!_0x50089b)return;const _0x323956=this[_0x55eef6(0x3c7)](),_0x2ae148=this[_0x55eef6(0xa63)](_0x59e143);let _0x726bbe=Math[_0x55eef6(0xbec)](_0x2ae148['x']+_0x2ae148[_0x55eef6(0x606)]/0x2)+this[_0x55eef6(0x379)];['list']['includes'](_0x323956)&&(_0x726bbe=_0x2ae148[_0x55eef6(0x606)]/$gameParty[_0x55eef6(0x914)]()[_0x55eef6(0x9d2)],_0x726bbe*=_0x59e143,_0x726bbe+=_0x2ae148[_0x55eef6(0x606)]/$gameParty['battleMembers']()[_0x55eef6(0x9d2)]/0x2);let _0x4ea26f=Math[_0x55eef6(0xbec)](this[_0x55eef6(0x96c)](_0x59e143,_0x50089b,_0x2ae148));_0x50089b[_0x55eef6(0xb51)](_0x726bbe,_0x4ea26f),this[_0x55eef6(0x93a)](_0x50089b,0x1),_0x50089b[_0x55eef6(0x9c9)](),this['updateEffectsContainer'](),this[_0x55eef6(0x9e8)]();},Window_BattleStatus['prototype'][_0x4fbf70(0x96c)]=function(_0x53c67e,_0x35827d,_0x561051){const _0x40b091=_0x4fbf70,_0x4eed42=VisuMZ['BattleCore'][_0x40b091(0x837)][_0x40b091(0x41c)],_0x637629=this[_0x40b091(0x3c7)]();if(_0x637629==='xp'){if(_0x40b091(0xb8b)===_0x40b091(0xb8b)){const _0x551f70=_0x4eed42[_0x40b091(0x92a)];switch(_0x551f70[_0x40b091(0x39e)]()[_0x40b091(0xcda)]()){case _0x40b091(0xaf7):return _0x561051[_0x40b091(0x389)]-_0x35827d['_shadowSprite'][_0x40b091(0x389)]/0x4;break;case _0x40b091(0xc5c):const _0x3aa183=_0x4eed42[_0x40b091(0x4d1)];return(_0x561051[_0x40b091(0x389)]+(_0x35827d[_0x40b091(0x389)]||_0x3aa183))/0x2;break;case _0x40b091(0x9dc):return 0x0;case _0x40b091(0x27a):default:return this[_0x40b091(0xab6)](_0x561051);break;}}else _0x33198b[_0x40b091(0x44c)]()?_0x5e03e1[_0x40b091(0x92c)]['terminate'][_0x40b091(0xc4a)](this):_0x599ec9[_0x40b091(0xae2)][_0x40b091(0x5f9)]['call'](this),this['clearOnceParallelInterpreters']();}else{if(_0x637629===_0x40b091(0x1c0)){}}return _0x35827d['height'];},Sprite_Name['prototype'][_0x4fbf70(0xbe5)]=function(){return 0x24;},Sprite_Name[_0x4fbf70(0x92c)][_0x4fbf70(0x92b)]=function(){const _0x424053=_0x4fbf70,_0x400bfb=this[_0x424053(0x27a)](),_0x983da9=this[_0x424053(0x742)](),_0x5856c6=this[_0x424053(0xbe5)]();this[_0x424053(0xa88)](),this[_0x424053(0x597)][_0x424053(0xb36)](),this['bitmap']['drawTextTopAligned'](_0x400bfb,0x4,0x0,_0x983da9,_0x5856c6,'left');},Bitmap['prototype'][_0x4fbf70(0x5be)]=function(_0x53ed4a,_0x5beaf0,_0x426e2e,_0x10e24e,_0x42165d,_0x817ae3){const _0x4c00c8=_0x4fbf70,_0xf761de=this[_0x4c00c8(0x646)],_0x57a9df=_0xf761de[_0x4c00c8(0xc84)];_0x10e24e=_0x10e24e||0xffffffff;let _0x284c3b=_0x5beaf0,_0x24067b=Math[_0x4c00c8(0xbec)](_0x426e2e+0x18/0x2+this['fontSize']*0.35);if(_0x817ae3===_0x4c00c8(0xc5c)){if('RWBWK'==='RWBWK')_0x284c3b+=_0x10e24e/0x2;else return this['_growDuration']>0x0;}if(_0x817ae3==='right'){if(_0x4c00c8(0x4b3)===_0x4c00c8(0xd59))return _0x501e9d[_0x4c00c8(0x331)]()-_0x13475e[_0x4c00c8(0x331)]();else _0x284c3b+=_0x10e24e;}_0xf761de['save'](),_0xf761de[_0x4c00c8(0xadf)]=this[_0x4c00c8(0x4a0)](),_0xf761de['textAlign']=_0x817ae3,_0xf761de[_0x4c00c8(0x9f2)]=_0x4c00c8(0x953),_0xf761de['globalAlpha']=0x1,this['_drawTextOutline'](_0x53ed4a,_0x284c3b,_0x24067b,_0x10e24e),_0xf761de[_0x4c00c8(0xc84)]=_0x57a9df,this[_0x4c00c8(0xa66)](_0x53ed4a,_0x284c3b,_0x24067b,_0x10e24e),_0xf761de[_0x4c00c8(0xa16)](),this[_0x4c00c8(0xc38)][_0x4c00c8(0x7b2)]();},Window_BattleStatus[_0x4fbf70(0x92c)]['nameY']=function(_0x1364af){const _0x4a72b5=_0x4fbf70;return this[_0x4a72b5(0x985)](_0x1364af)-this[_0x4a72b5(0x429)]();},Window_BattleStatus[_0x4fbf70(0x92c)][_0x4fbf70(0x361)]=function(_0x3099d6){const _0xee63e1=_0x4fbf70;if(!VisuMZ[_0xee63e1(0xae2)][_0xee63e1(0x837)]['BattleLayout'][_0xee63e1(0xcab)])return;const _0x1d937a=this[_0xee63e1(0x55a)](_0x3099d6),_0x4bf6c5=this['itemRect'](_0x3099d6);_0x4bf6c5[_0xee63e1(0x606)]=ImageManager['faceWidth'],_0x4bf6c5[_0xee63e1(0x389)]-=0x2,this[_0xee63e1(0x94b)](_0x1d937a,_0x4bf6c5['x']+0x1,_0x4bf6c5['y']+0x1,_0x4bf6c5['width'],_0x4bf6c5[_0xee63e1(0x389)]);},Window_BattleStatus['prototype']['drawItemStatusListStyle']=function(_0x5d6053){const _0x51743d=_0x4fbf70,_0xc01bda=VisuMZ[_0x51743d(0xae2)]['Settings'][_0x51743d(0x41c)],_0xd08547=$dataSystem[_0x51743d(0x81d)]?0x4:0x3,_0x5c68bc=_0xd08547*0x80+(_0xd08547-0x1)*0x8+0x4,_0x21e2ec=this['actor'](_0x5d6053),_0x335115=this['itemRect'](_0x5d6053);let _0x4d727c=_0x335115['x']+this['padding'];if(_0xc01bda[_0x51743d(0xcab)])_0x4d727c=_0x335115['x']+ImageManager[_0x51743d(0x86f)]+0x8;else{if('ziQnj'!==_0x51743d(0x7e2))_0x4d727c+=ImageManager['iconWidth'];else{const _0x3ac882=_0x57a8ce['VisuMZ_1_SkillsStatesCore']?_0xa75d8c[_0x51743d(0x9e1)][_0x51743d(0x837)][_0x51743d(0x8a1)]:_0xeeac45[_0x51743d(0xae2)][_0x51743d(0x837)][_0x51743d(0x22d)],_0x13d732=_0x1a3829[_0x51743d(0x3b5)][_0x51743d(0x6e3)](_0x599eae),_0x37efab=_0x13d732?_0x3ac882['IconStypeMagic']:_0x3ac882['IconStypeNorm'];_0x4a3285=_0x51743d(0x769)[_0x51743d(0x946)](_0x37efab,_0x196466);}}const _0x25b9e9=Math[_0x51743d(0xbec)](Math[_0x51743d(0x872)](_0x335115['x']+_0x335115[_0x51743d(0x606)]-_0x5c68bc,_0x4d727c)),_0x373908=Math['round'](_0x335115['y']+(_0x335115[_0x51743d(0x389)]-Sprite_Name['prototype'][_0x51743d(0xbe5)]())/0x2),_0x65dd56=Math[_0x51743d(0xbec)](_0x25b9e9-ImageManager[_0x51743d(0xa8e)]/0x2-0x4),_0x2cd73e=Math['round'](_0x335115['y']+(_0x335115['height']-ImageManager[_0x51743d(0x3f6)])/0x2+ImageManager['iconHeight']/0x2);let _0x66e463=_0x25b9e9+0x88;const _0xa66241=_0x373908;this[_0x51743d(0x93c)](_0x21e2ec,_0x25b9e9-0x4+(_0xc01bda[_0x51743d(0xd4a)]||0x0),_0x373908+(_0xc01bda['TpbGaugeOffsetY']||0x0)),this[_0x51743d(0x358)](_0x21e2ec,_0x25b9e9+(_0xc01bda[_0x51743d(0x22a)]||0x0),_0x373908+(_0xc01bda[_0x51743d(0x1e1)]||0x0)),this[_0x51743d(0x5b4)](_0x21e2ec,_0x65dd56+(_0xc01bda['StateIconOffsetX']||0x0),_0x2cd73e+(_0xc01bda[_0x51743d(0x91c)]||0x0)),this[_0x51743d(0x3aa)](_0x21e2ec,'hp',_0x66e463+0x88*0x0+(_0xc01bda[_0x51743d(0x32d)]||0x0),_0xa66241+(_0xc01bda[_0x51743d(0x748)]||0x0)),this[_0x51743d(0x3aa)](_0x21e2ec,'mp',_0x66e463+0x88*0x1+(_0xc01bda[_0x51743d(0x81b)]||0x0),_0xa66241+(_0xc01bda['MpGaugeOffsetY']||0x0)),$dataSystem['optDisplayTp']&&this[_0x51743d(0x3aa)](_0x21e2ec,'tp',_0x66e463+0x88*0x2+(_0xc01bda['TpGaugeOffsetX']||0x0),_0xa66241+(_0xc01bda['TpGaugeOffsetY']||0x0));},Window_BattleStatus[_0x4fbf70(0x92c)][_0x4fbf70(0x8fb)]=function(_0x28f415){const _0x4ce3eb=_0x4fbf70;if(!$gameSystem['isSideView']())return;VisuMZ[_0x4ce3eb(0xae2)][_0x4ce3eb(0xa6d)]['call'](this,_0x28f415);},Window_BattleStatus[_0x4fbf70(0x92c)]['drawItemStatusXPStyle']=function(_0x339385){const _0x675e22=_0x4fbf70,_0x24fdf4=VisuMZ[_0x675e22(0xae2)][_0x675e22(0x837)][_0x675e22(0x41c)],_0x4f587f=this[_0x675e22(0x55a)](_0x339385),_0x19e098=this[_0x675e22(0xa63)](_0x339385),_0x3fa6e9=Math['round'](_0x19e098['x']+(_0x19e098[_0x675e22(0x606)]-0x80)/0x2),_0x3e3962=this[_0x675e22(0xab6)](_0x19e098);let _0x46ab33=_0x3fa6e9-ImageManager[_0x675e22(0xa8e)]/0x2-0x4,_0x227d81=_0x3e3962+ImageManager[_0x675e22(0x3f6)]/0x2;_0x46ab33-ImageManager['iconWidth']/0x2<_0x19e098['x']&&(_0x46ab33=_0x3fa6e9+ImageManager[_0x675e22(0xa8e)]/0x2-0x4,_0x227d81=_0x3e3962-ImageManager[_0x675e22(0x3f6)]/0x2);const _0x17c29b=_0x3fa6e9,_0x38cb37=this[_0x675e22(0x985)](_0x19e098);this[_0x675e22(0x93c)](_0x4f587f,_0x3fa6e9+(_0x24fdf4[_0x675e22(0xd4a)]||0x0),_0x3e3962+(_0x24fdf4[_0x675e22(0x99b)]||0x0)),this[_0x675e22(0x358)](_0x4f587f,_0x3fa6e9+(_0x24fdf4[_0x675e22(0x22a)]||0x0),_0x3e3962+(_0x24fdf4[_0x675e22(0x1e1)]||0x0)),this[_0x675e22(0x5b4)](_0x4f587f,_0x46ab33+(_0x24fdf4['StateIconOffsetX']||0x0),_0x227d81+(_0x24fdf4[_0x675e22(0x91c)]||0x0)),this[_0x675e22(0x3aa)](_0x4f587f,'hp',_0x17c29b+(_0x24fdf4[_0x675e22(0x32d)]||0x0),_0x38cb37+(_0x24fdf4[_0x675e22(0x748)]||0x0)),this['placeGauge'](_0x4f587f,'mp',_0x17c29b+(_0x24fdf4[_0x675e22(0x81b)]||0x0),_0x38cb37+this[_0x675e22(0x429)]()+(_0x24fdf4[_0x675e22(0x3a2)]||0x0)),$dataSystem['optDisplayTp']&&this[_0x675e22(0x3aa)](_0x4f587f,'tp',_0x17c29b+(_0x24fdf4[_0x675e22(0x2c6)]||0x0),_0x38cb37+this[_0x675e22(0x429)]()*0x2+(_0x24fdf4[_0x675e22(0xc63)]||0x0));},Window_BattleStatus[_0x4fbf70(0x92c)][_0x4fbf70(0x780)]=function(_0x830e0f){const _0x463005=_0x4fbf70;if(!VisuMZ[_0x463005(0xae2)][_0x463005(0x837)][_0x463005(0x41c)][_0x463005(0x48a)])return![];if(_0x830e0f[_0x463005(0x31e)]())return!![];return Imported[_0x463005(0x96d)]&&_0x830e0f[_0x463005(0x4f2)]();},Game_Actor['prototype'][_0x4fbf70(0x9fa)]=function(){const _0x116793=_0x4fbf70;if(this['actor']()[_0x116793(0x9c1)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i)){if(_0x116793(0xb5d)!==_0x116793(0xb4a))return Number(RegExp['$1']);else this[_0x116793(0xb15)][_0x116793(0xb3b)]=_0x28389b,this['_logWindow']['displayReflection'](_0x539924),this[_0x116793(0x2e0)][_0x116793(0x7ea)](_0x4cc287,this['_action']),this[_0x116793(0xb15)][_0x116793(0xbdf)](_0x2928f2),this['_logWindow']['displayActionResults'](_0x3cb99e,_0xaf27fa);}else{if(this['actor']()[_0x116793(0x9c1)][_0x116793(0xc4b)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x4fbf70(0x92c)]['getBattlePortraitOffsetY']=function(){const _0x33954f=_0x4fbf70;if(this[_0x33954f(0x55a)]()[_0x33954f(0x9c1)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this['actor']()[_0x33954f(0x9c1)][_0x33954f(0xc4b)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus['prototype'][_0x4fbf70(0xb01)]=function(_0x3d9afa){const _0x4c5ac8=_0x4fbf70,_0x2f72b8=this['actor'](_0x3d9afa);if(this[_0x4c5ac8(0x780)](_0x2f72b8)){if(_0x4c5ac8(0x580)!==_0x4c5ac8(0x580))this[_0x4c5ac8(0x996)]++,_0x574735[_0x4c5ac8(0x59e)]%0x1e<0xf?_0x25ca56[_0x4c5ac8(0xca4)]([0xff,0xff,0xff,0x40]):_0x1eeb4c[_0x4c5ac8(0xca4)]([0x0,0x0,0x0,0x0]);else{const _0x5d655e='actor%1-portrait'['format'](_0x2f72b8[_0x4c5ac8(0x415)]()),_0x2d680e=this[_0x4c5ac8(0xb65)](_0x5d655e,Sprite),_0x2c52b4=_0x2f72b8[_0x4c5ac8(0xa4d)]();if(_0x2c52b4!==''){if(_0x4c5ac8(0x308)!==_0x4c5ac8(0x308))for(const _0x1c8e6f of this['_damages']){_0x1c8e6f['x']+=_0xb2578d[_0x4c5ac8(0x61e)]*_0x2fa348,_0x1c8e6f['y']+=_0x10d8d0[_0x4c5ac8(0x752)];}else _0x2d680e[_0x4c5ac8(0x597)]=ImageManager[_0x4c5ac8(0x335)](_0x2c52b4);}else _0x2d680e['bitmap']=ImageManager[_0x4c5ac8(0x1ce)];const _0x5522da=this[_0x4c5ac8(0xa63)](_0x3d9afa);_0x2d680e[_0x4c5ac8(0x951)]['x']=0.5,_0x2d680e['anchor']['y']=0x1;let _0x46a75e=Math[_0x4c5ac8(0xbec)](_0x5522da['x']+_0x5522da[_0x4c5ac8(0x606)]/0x2)+this['padding'];_0x46a75e+=_0x2f72b8[_0x4c5ac8(0x9fa)]();let _0x1a6fe7=Math['round'](this[_0x4c5ac8(0x389)]);_0x1a6fe7+=_0x2f72b8['getBattlePortraitOffsetY'](),_0x2d680e[_0x4c5ac8(0xc1d)](_0x46a75e,_0x1a6fe7);const _0x18b4e3=VisuMZ[_0x4c5ac8(0xae2)][_0x4c5ac8(0x837)][_0x4c5ac8(0x41c)]['PortraitScale'];_0x2d680e[_0x4c5ac8(0xbfa)]['x']=_0x18b4e3,_0x2d680e['scale']['y']=_0x18b4e3,_0x2d680e[_0x4c5ac8(0x9c9)]();}}else{const _0x267295=this['faceRect'](_0x3d9afa);this[_0x4c5ac8(0x94b)](_0x2f72b8,_0x267295['x'],_0x267295['y'],_0x267295['width'],_0x267295['height']);}},Window_BattleStatus[_0x4fbf70(0x92c)]['createInnerPortrait']=function(_0x8710ad,_0x56723c){const _0x2509e5=_0x4fbf70,_0x213ca8=this[_0x2509e5(0xb83)];if(_0x213ca8[_0x8710ad])return _0x213ca8[_0x8710ad];else{const _0x3f6e8d=new _0x56723c();return _0x213ca8[_0x8710ad]=_0x3f6e8d,this[_0x2509e5(0xcbc)](_0x3f6e8d),this['addChildToBack'](this[_0x2509e5(0x604)]),_0x3f6e8d;}},Window_BattleStatus[_0x4fbf70(0x92c)][_0x4fbf70(0xc50)]=function(){const _0xfd1f0e=_0x4fbf70;this['_createCursorArea'](),this[_0xfd1f0e(0x34f)](),Window_StatusBase[_0xfd1f0e(0x92c)][_0xfd1f0e(0xc50)]['call'](this),this[_0xfd1f0e(0x213)]();},Window_BattleStatus[_0x4fbf70(0x92c)][_0x4fbf70(0x712)]=function(){const _0x304b35=_0x4fbf70;this[_0x304b35(0x604)]=new Sprite(),this['_cursorArea']['filters']=[new PIXI[(_0x304b35(0x57e))][(_0x304b35(0x670))]()],this['_cursorArea'][_0x304b35(0xca2)]=new Rectangle(),this[_0x304b35(0x604)][_0x304b35(0xc1d)](this[_0x304b35(0x430)],this[_0x304b35(0x430)]),this[_0x304b35(0x52a)](this[_0x304b35(0x604)]);},Window_BattleStatus[_0x4fbf70(0x92c)][_0x4fbf70(0x34f)]=function(){const _0x5d88f5=_0x4fbf70;this[_0x5d88f5(0x8aa)]=new Sprite(),this['addChild'](this['_effectsContainer']);},Window_BattleStatus[_0x4fbf70(0x92c)][_0x4fbf70(0xad4)]=function(){const _0x2595b5=_0x4fbf70;this[_0x2595b5(0x8aa)]&&this[_0x2595b5(0x52a)](this[_0x2595b5(0x8aa)]);},Window_BattleStatus[_0x4fbf70(0x92c)][_0x4fbf70(0x213)]=function(){const _0x406fa5=_0x4fbf70;this[_0x406fa5(0x5e0)]=new Sprite(),this['addChild'](this[_0x406fa5(0x5e0)]);},Window_BattleStatus[_0x4fbf70(0x92c)]['_createCursorSprite']=function(){const _0x1060f0=_0x4fbf70;this['_cursorSprite']=new Sprite();for(let _0x58c85a=0x0;_0x58c85a<0x9;_0x58c85a++){this[_0x1060f0(0x708)]['addChild'](new Sprite());}this[_0x1060f0(0x604)][_0x1060f0(0x52a)](this[_0x1060f0(0x708)]);},Window_BattleStatus[_0x4fbf70(0x92c)][_0x4fbf70(0x4b8)]=function(){const _0x273a5b=_0x4fbf70;Window_StatusBase[_0x273a5b(0x92c)][_0x273a5b(0x4b8)][_0x273a5b(0xc4a)](this),this[_0x273a5b(0x854)]();},Window_BattleStatus[_0x4fbf70(0x92c)][_0x4fbf70(0x854)]=function(){const _0x6f4835=_0x4fbf70,_0x47805c=this[_0x6f4835(0x430)];this[_0x6f4835(0x604)][_0x6f4835(0xc1d)](_0x47805c,_0x47805c),this[_0x6f4835(0x604)]['x']=_0x47805c-this[_0x6f4835(0xc24)]['x'],this['_cursorArea']['y']=_0x47805c-this[_0x6f4835(0xc24)]['y'],this[_0x6f4835(0x9c8)]>0x0&&this['innerHeight']>0x0?this[_0x6f4835(0x604)][_0x6f4835(0x737)]=this[_0x6f4835(0x4f4)]():this[_0x6f4835(0x604)][_0x6f4835(0x737)]=![];},Window_BattleStatus[_0x4fbf70(0x92c)]['_updateFilterArea']=function(){const _0x10af20=_0x4fbf70;Window_StatusBase['prototype'][_0x10af20(0xc60)][_0x10af20(0xc4a)](this),this['_updateCursorFilterArea']();},Window_BattleStatus[_0x4fbf70(0x92c)][_0x4fbf70(0x841)]=function(){const _0x5d8cb6=_0x4fbf70,_0x155ce1=this[_0x5d8cb6(0x604)][_0x5d8cb6(0x46b)][_0x5d8cb6(0xbdf)](new Point(0x0,0x0)),_0x690b11=this[_0x5d8cb6(0x604)][_0x5d8cb6(0xca2)];_0x690b11['x']=_0x155ce1['x']+this[_0x5d8cb6(0xc24)]['x'],_0x690b11['y']=_0x155ce1['y']+this[_0x5d8cb6(0xc24)]['y'],_0x690b11[_0x5d8cb6(0x606)]=this[_0x5d8cb6(0x9c8)],_0x690b11[_0x5d8cb6(0x389)]=this[_0x5d8cb6(0xc35)];},Window_BattleStatus[_0x4fbf70(0x92c)][_0x4fbf70(0x68d)]=function(_0xfbc5b2){const _0x25dbab=_0x4fbf70;if(this[_0x25dbab(0x3c7)]()!=='portrait')return;this['drawItemImagePortraitStyle'](_0xfbc5b2[_0x25dbab(0x331)]());},Window_BattleStatus['prototype']['addDamageSprite']=function(_0x4c2e8e,_0x2d6f7c){const _0x4a07ac=_0x4fbf70;if(!this[_0x4a07ac(0x5e0)])return;if(!_0x4c2e8e)return;if(!_0x2d6f7c)return;const _0x379976=this['itemRect'](_0x2d6f7c['index']());_0x379976['x']+=_0x379976['width']/0x2+this['padding'],_0x4c2e8e['x']=_0x379976['x'],_0x4c2e8e['y']=_0x379976['y'],this['_damageContainer'][_0x4a07ac(0x52a)](_0x4c2e8e);},Window_BattleStatus['prototype'][_0x4fbf70(0x68c)]=function(_0x33c733){const _0x11405b=_0x4fbf70;if(!this[_0x11405b(0x5e0)])return;if(!_0x33c733)return;this[_0x11405b(0x5e0)]['removeChild'](_0x33c733);},Window_BattleStatus['prototype'][_0x4fbf70(0x3ed)]=function(){const _0x4a8956=_0x4fbf70;if(!this[_0x4a8956(0x9cf)]())return;if(!this[_0x4a8956(0x46d)])this[_0x4a8956(0xd53)]();this['prepareBorderActor'](),this[_0x4a8956(0xc6c)]();},Window_BattleStatus[_0x4fbf70(0x92c)][_0x4fbf70(0x9cf)]=function(){const _0x4c6929=_0x4fbf70;if(this[_0x4c6929(0x631)]!==Window_BattleStatus)return![];if(!SceneManager[_0x4c6929(0x90d)]())return![];return VisuMZ[_0x4c6929(0xae2)][_0x4c6929(0x837)][_0x4c6929(0x41c)]['ShowPortraitsBorderStyle'];},Window_BattleStatus[_0x4fbf70(0x92c)][_0x4fbf70(0xd53)]=function(){const _0x47e7a6=_0x4fbf70;this[_0x47e7a6(0x46d)]=new Sprite();const _0xe17da0=SceneManager['_scene'],_0x516e41=_0xe17da0[_0x47e7a6(0x8a6)][_0x47e7a6(0xd48)](_0xe17da0[_0x47e7a6(0x676)]);_0xe17da0[_0x47e7a6(0x93a)](this['_borderPortraitSprite'],_0x516e41),this['_borderPortraitSprite'][_0x47e7a6(0x951)]['x']=0.5,this['_borderPortraitSprite'][_0x47e7a6(0x951)]['y']=0x1;const _0x13d5e6=VisuMZ['BattleCore'][_0x47e7a6(0x837)]['BattleLayout'][_0x47e7a6(0x942)];this[_0x47e7a6(0x46d)][_0x47e7a6(0xbfa)]['x']=_0x13d5e6,this[_0x47e7a6(0x46d)][_0x47e7a6(0xbfa)]['y']=_0x13d5e6,this['_borderPortraitSprite']['y']=this['y']+this['height'],this[_0x47e7a6(0xc64)]=0x0;},Window_BattleStatus[_0x4fbf70(0x92c)][_0x4fbf70(0x2cd)]=function(){const _0x52523e=_0x4fbf70;return BattleManager[_0x52523e(0x5dd)]();},Window_BattleStatus[_0x4fbf70(0x92c)][_0x4fbf70(0xd05)]=function(){const _0x205e89=_0x4fbf70;this[_0x205e89(0x46d)][_0x205e89(0x737)]=this['isBorderPortraitSpriteVisible']();const _0x13b88f=BattleManager[_0x205e89(0x55a)](),_0x1b95f5=_0x13b88f?_0x13b88f[_0x205e89(0xa4d)]()||'':'';if(_0x13b88f===this[_0x205e89(0x46d)][_0x205e89(0x55a)]&&_0x1b95f5===this[_0x205e89(0x46d)][_0x205e89(0x995)])return;this[_0x205e89(0x46d)][_0x205e89(0x55a)]=_0x13b88f||this[_0x205e89(0x46d)]['actor'],this['_borderPortraitSprite'][_0x205e89(0x995)]=_0x1b95f5;if(!_0x13b88f)return;else{if(_0x1b95f5===''){this[_0x205e89(0x46d)][_0x205e89(0x597)]=ImageManager[_0x205e89(0x1ce)],this[_0x205e89(0x46d)][_0x205e89(0x995)]='';return;}else{const _0x36faaf=ImageManager[_0x205e89(0x335)](_0x1b95f5);this[_0x205e89(0x46d)][_0x205e89(0x853)]=0x0,_0x36faaf[_0x205e89(0x43e)](this[_0x205e89(0xd62)][_0x205e89(0x8ff)](this,_0x36faaf));}}},Window_BattleStatus[_0x4fbf70(0x92c)][_0x4fbf70(0xd62)]=function(_0x53ffab){const _0xf1c6de=_0x4fbf70;this['_borderPortraitDuration']=0x14,this[_0xf1c6de(0x46d)][_0xf1c6de(0x597)]=_0x53ffab;if(SceneManager[_0xf1c6de(0x32c)][_0xf1c6de(0xbea)]())_0xf1c6de(0x522)!==_0xf1c6de(0x1ae)?(this['_borderPortraitSprite']['x']=0x0,this['_borderPortraitTargetX']=Math[_0xf1c6de(0x745)](_0x53ffab[_0xf1c6de(0x606)]/0x2)):_0x400306=_0x213fca>=_0x36c520?_0x4288db:_0x3a1030;else{if(_0xf1c6de(0x98b)===_0xf1c6de(0xd77)){const _0x1e2833=_0x453db7[_0xf1c6de(0xcac)](_0x19cf45['x'],_0x3455a0['y']);if(this[_0xf1c6de(0x860)]&&this[_0xf1c6de(0x860)][_0x1e2833])return this[_0xf1c6de(0x860)][_0x1e2833];}else this[_0xf1c6de(0x46d)]['x']=this[_0xf1c6de(0x606)],this[_0xf1c6de(0x97d)]=this[_0xf1c6de(0x606)]*0x3/0x4;}this[_0xf1c6de(0x46d)][_0xf1c6de(0x853)]=0x0,this[_0xf1c6de(0x46d)]['y']=this['y']+this[_0xf1c6de(0x389)];const _0x48b7f8=BattleManager[_0xf1c6de(0x55a)]();_0x48b7f8&&('DrcDE'===_0xf1c6de(0xc8f)?(this['_animationContainer']=new _0x573d86(),_0x122a6b[_0xf1c6de(0x874)]?this['addChild'](this['_animationContainer']):this[_0xf1c6de(0xd64)]['addChild'](this[_0xf1c6de(0xbcc)])):(this['_borderPortraitTargetX']+=_0x48b7f8['getBattlePortraitOffsetX'](),this[_0xf1c6de(0x46d)]['y']+=_0x48b7f8[_0xf1c6de(0x821)]()));},Window_BattleStatus['prototype'][_0x4fbf70(0xc6c)]=function(){const _0x2e2063=_0x4fbf70;if(this[_0x2e2063(0xc64)]>0x0){const _0x5894a9=this[_0x2e2063(0xc64)],_0x2bbb5a=this[_0x2e2063(0x46d)];_0x2bbb5a['x']=(_0x2bbb5a['x']*(_0x5894a9-0x1)+this[_0x2e2063(0x97d)])/_0x5894a9,_0x2bbb5a['opacity']=(_0x2bbb5a[_0x2e2063(0x853)]*(_0x5894a9-0x1)+0xff)/_0x5894a9,this[_0x2e2063(0xc64)]--;}},Window_BattleStatus[_0x4fbf70(0x92c)][_0x4fbf70(0x93e)]=function(){const _0x28fa9e=_0x4fbf70;return;this['_effectsContainer']&&(this[_0x28fa9e(0x8aa)]['x']=this['x'],this[_0x28fa9e(0x8aa)]['y']=this['y']);if(this['_damageContainer']){if(_0x28fa9e(0xd5d)!==_0x28fa9e(0xd5d))return this[_0x28fa9e(0x389)]*this[_0x28fa9e(0x4d7)]();else this[_0x28fa9e(0x5e0)]['x']=this['x'],this[_0x28fa9e(0x5e0)]['y']=this['y'];}},Window_BattleStatus['prototype'][_0x4fbf70(0x5da)]=function(){const _0x21b6a3=_0x4fbf70,_0x5727c4=VisuMZ[_0x21b6a3(0xae2)][_0x21b6a3(0x837)][_0x21b6a3(0x41c)];if(_0x5727c4[_0x21b6a3(0x7e1)]){if(_0x21b6a3(0xc9a)!==_0x21b6a3(0xc9a)){if(!_0x10f891[_0x21b6a3(0x90d)]())return;const _0x569c3b=this[_0x21b6a3(0xb81)]();if(!_0x569c3b)return;let _0x49ab5c=this[_0x21b6a3(0xc9f)]()?_0x569c3b[_0x21b6a3(0x651)]:_0x569c3b['_svBattlerSprite'][_0x21b6a3(0x651)];_0x49ab5c&&_0x49ab5c[_0x21b6a3(0xc55)](0x0);}else{const _0x569458=new Sprite();_0x569458['bitmap']=ImageManager['loadSystem'](_0x5727c4['StatusWindowAttachmentBack']),_0x569458['x']=_0x5727c4[_0x21b6a3(0x695)]||0x0,_0x569458['y']=_0x5727c4['StatusWindowAttachmentBackOffsetY']||0x0,this[_0x21b6a3(0xcbc)](_0x569458),this['_backAttachmentSprite']=_0x569458;}}if(_0x5727c4[_0x21b6a3(0xacb)]){const _0x4a0b50=new Sprite();_0x4a0b50[_0x21b6a3(0x597)]=ImageManager[_0x21b6a3(0x5b7)](_0x5727c4['StatusWindowAttachmentFront']),_0x4a0b50['x']=_0x5727c4[_0x21b6a3(0x648)]||0x0,_0x4a0b50['y']=_0x5727c4[_0x21b6a3(0x37c)]||0x0,this[_0x21b6a3(0x52a)](_0x4a0b50),this[_0x21b6a3(0x22f)]=_0x4a0b50;}},Window_BattleStatus['prototype'][_0x4fbf70(0x9e8)]=function(){const _0x597e4f=_0x4fbf70;if(this[_0x597e4f(0x22f)]){if(_0x597e4f(0x1f6)==='OLthm')this['addChild'](this[_0x597e4f(0x22f)]);else{if(!_0x3af9f6[_0x597e4f(0x90d)]())return;if(_0x328a69[_0x597e4f(0x3bd)]())return;if(!this[_0x597e4f(0xb81)]())return;if(_0x421dc8[_0x597e4f(0x9d2)]<=0x0)return;_0xc2f137=_0x4c9d52||{},_0x10640e[_0x597e4f(0xc46)]=_0x3cd7b6[_0x597e4f(0xc46)]||'#ffffff',_0x581300['flashColor']=_0x24f904[_0x597e4f(0x5d3)]||[0x0,0x0,0x0,0x0],_0x22c8be[_0x597e4f(0x4d6)]=_0x720986[_0x597e4f(0x4d6)]||0x0,this[_0x597e4f(0xb81)]()['setupTextPopup'](_0x1cdaed,_0x119762);}}if(this['_backAttachmentSprite']){if(_0x597e4f(0x40f)!==_0x597e4f(0x40f)){if(!_0x55a38b[_0x597e4f(0xae2)][_0x597e4f(0x837)][_0x597e4f(0x73f)][_0x597e4f(0x7d4)])return;this[_0x597e4f(0x196)]=new _0x19cec9(),this[_0x597e4f(0x196)]['x']=this[_0x597e4f(0x676)]['x'],this[_0x597e4f(0x196)]['y']=this['_windowLayer']['y'];const _0x438cf9=this[_0x597e4f(0x8a6)][_0x597e4f(0xd48)](this[_0x597e4f(0x676)]);this[_0x597e4f(0x93a)](this[_0x597e4f(0x196)],_0x438cf9);for(let _0x37cfc3=0x0;_0x37cfc3<0x8;_0x37cfc3++){const _0x838106=new _0x5e4c0d(_0x37cfc3);this[_0x597e4f(0x196)][_0x597e4f(0x52a)](_0x838106);}}else this[_0x597e4f(0xcbc)](this[_0x597e4f(0x93d)]);}},Window_BattleActor[_0x4fbf70(0x92c)][_0x4fbf70(0xad9)]=function(){const _0x55f37f=_0x4fbf70;return this[_0x55f37f(0xaac)]();},Window_BattleActor[_0x4fbf70(0x92c)][_0x4fbf70(0xaac)]=function(){const _0x4b74b4=_0x4fbf70,_0x590160=BattleManager['inputtingAction']();if(!_0x590160)return!![];if(!_0x590160[_0x4b74b4(0x98d)]())return!![];const _0x43012c=this['actor'](this['index']()),_0x593fc5=_0x590160[_0x4b74b4(0x98d)]()[_0x4b74b4(0x9c1)];if(_0x590160[_0x4b74b4(0x570)]()){if(_0x43012c===BattleManager[_0x4b74b4(0x55a)]())return![];}if(_0x590160['isForDeadFriend']()){if(!_0x43012c[_0x4b74b4(0x521)]())return![];}if(_0x590160['isForAliveFriend']()){if(!_0x43012c[_0x4b74b4(0x4e4)]())return![];}return!![];},Window_BattleActor[_0x4fbf70(0x92c)][_0x4fbf70(0x945)]=function(_0x5eb098){const _0x41a018=_0x4fbf70;this[_0x41a018(0x869)]=_0x5eb098;},VisuMZ['BattleCore'][_0x4fbf70(0x68e)]=Window_BattleActor[_0x4fbf70(0x92c)][_0x4fbf70(0x586)],Window_BattleActor[_0x4fbf70(0x92c)][_0x4fbf70(0x586)]=function(){const _0x35dd6c=_0x4fbf70;Window_BattleStatus[_0x35dd6c(0x92c)][_0x35dd6c(0x586)][_0x35dd6c(0xc4a)](this),this[_0x35dd6c(0x869)]?this[_0x35dd6c(0x402)]():VisuMZ[_0x35dd6c(0xae2)][_0x35dd6c(0x68e)][_0x35dd6c(0xc4a)](this);},Window_BattleActor[_0x4fbf70(0x92c)]['processEnemyModeTouchBattleCore']=function(){const _0x65a905=_0x4fbf70,_0x5d9148=SceneManager[_0x65a905(0x32c)][_0x65a905(0x569)];if(!_0x5d9148)return;this[_0x65a905(0x233)]=![];const _0x5ee05a=this[_0x65a905(0xa3d)]();if(_0x5ee05a>=0x0){this[_0x65a905(0x76b)](_0x5ee05a);if(TouchInput[_0x65a905(0x1e4)]()){if('GESOm'===_0x65a905(0xca3)){const _0x5952bf=$gameParty[_0x65a905(0x9d7)]()[_0x5ee05a],_0x452fbe=_0x5d9148[_0x65a905(0x1ff)][_0x65a905(0xd48)](_0x5952bf);_0x452fbe>=0x0&&(_0x5d9148[_0x65a905(0x76b)](_0x452fbe),_0x5d9148[_0x65a905(0xb34)]());}else _0x21f3f4=_0x2209dd(_0x41d167['$1']);}}},Window_BattleActor[_0x4fbf70(0x92c)][_0x4fbf70(0x7f3)]=function(){const _0x1cb4a9=_0x4fbf70;this[_0x1cb4a9(0x869)]&&(this[_0x1cb4a9(0x669)]++,this['active']=!![]);const _0xeb789b=Window_BattleStatus[_0x1cb4a9(0x92c)][_0x1cb4a9(0x7f3)]['call'](this);return this[_0x1cb4a9(0x869)]&&(this['active']=![]),_0xeb789b;},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xab0)]=Window_BattleActor[_0x4fbf70(0x92c)][_0x4fbf70(0x9c9)],Window_BattleActor[_0x4fbf70(0x92c)][_0x4fbf70(0x9c9)]=function(){const _0x21ff0c=_0x4fbf70;VisuMZ[_0x21ff0c(0xae2)][_0x21ff0c(0xab0)][_0x21ff0c(0xc4a)](this);const _0x57365f=BattleManager[_0x21ff0c(0x206)]();if(_0x57365f){const _0x47d9a3=$gameParty[_0x21ff0c(0x1c3)]();if(_0x57365f[_0x21ff0c(0x9dd)]()&&_0x47d9a3[_0x21ff0c(0x9d2)]>0x1){if(_0x21ff0c(0x5c1)==='iJqAF'){if(_0x1ae969['match'](/(.*):[ ](\d+)/i)){const _0x236361=_0x50c6f2(_0x12f3fc['$1'])[_0x21ff0c(0xcda)](),_0x102855=_0x2629b9(_0x38d276['$2']);_0x1c4273[_0x236361]=_0x102855,_0x53e35c+=_0x102855;}else{if(_0x3b65aa[_0x21ff0c(0xc4b)](/(.*):[ ](\d+\.?\d+)/i)){const _0x5d337a=_0x359c7b(_0x21881c['$1'])['trim'](),_0x189709=_0x248b48(_0x142faa['$2']);_0x90cc88[_0x5d337a]=_0x189709,_0x4e62fa+=_0x189709;}else _0x5d4521!==''&&(_0x67775c[_0x5f3348]=0x1,_0x1e7b6a++);}}else this[_0x21ff0c(0x4c8)]('pagedown',this['selectAllActors'][_0x21ff0c(0x8ff)](this));}}},VisuMZ['BattleCore'][_0x4fbf70(0xcc5)]=Window_BattleActor[_0x4fbf70(0x92c)][_0x4fbf70(0x7aa)],Window_BattleActor[_0x4fbf70(0x92c)][_0x4fbf70(0x7aa)]=function(){const _0x18cfe7=_0x4fbf70;VisuMZ[_0x18cfe7(0xae2)][_0x18cfe7(0xcc5)]['call'](this),delete this['_handlers'][_0x18cfe7(0x39c)],delete this['_handlers']['pagedown'];},Window_BattleActor[_0x4fbf70(0x92c)][_0x4fbf70(0x84f)]=function(){const _0x2db3b9=_0x4fbf70,_0x297683=BattleManager['inputtingAction']();if(_0x297683)_0x297683[_0x2db3b9(0x594)](_0x2db3b9(0xc76));this[_0x2db3b9(0xb34)]();},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x55e)]=Window_BattleEnemy[_0x4fbf70(0x92c)][_0x4fbf70(0x691)],Window_BattleEnemy[_0x4fbf70(0x92c)][_0x4fbf70(0x691)]=function(_0x6b6842){const _0x3657a2=_0x4fbf70;this['_lastEnemy']=null,VisuMZ[_0x3657a2(0xae2)]['Window_BattleEnemy_initialize'][_0x3657a2(0xc4a)](this,_0x6b6842);if(Imported[_0x3657a2(0x3fb)]){if(VisuMZ[_0x3657a2(0x598)]['version']<1.12){let _0x4deb61='';_0x4deb61+=_0x3657a2(0x7bb),_0x4deb61+=_0x3657a2(0xaaf),_0x4deb61+=_0x3657a2(0x84e),alert(_0x4deb61),SceneManager['exit']();}}},Window_BattleEnemy[_0x4fbf70(0x92c)][_0x4fbf70(0x2d7)]=function(){const _0x480f3c=_0x4fbf70;return this[_0x480f3c(0x230)]();},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xc01)]=Window_BattleEnemy[_0x4fbf70(0x92c)][_0x4fbf70(0x9c9)],Window_BattleEnemy[_0x4fbf70(0x92c)]['show']=function(){const _0x1d9627=_0x4fbf70;VisuMZ[_0x1d9627(0xae2)][_0x1d9627(0xc01)][_0x1d9627(0xc4a)](this),this['y']=Graphics['height']*0xa;if(this[_0x1d9627(0xd2e)]()){if(_0x1d9627(0x849)!=='AqRoS'){const _0x277e77=_0x2e24a3[_0x1d9627(0xca7)](_0x50b31a);_0x277e77[_0x1d9627(0x762)]=![],_0x277e77[_0x1d9627(0x807)]=0x0,this[_0x1d9627(0x516)][_0x1d9627(0x25b)](_0x277e77);}else this[_0x1d9627(0x931)]();}},VisuMZ['BattleCore'][_0x4fbf70(0x2c0)]=Window_BattleEnemy[_0x4fbf70(0x92c)]['hide'],Window_BattleEnemy[_0x4fbf70(0x92c)][_0x4fbf70(0x7aa)]=function(){const _0x139c78=_0x4fbf70;VisuMZ[_0x139c78(0xae2)]['Window_BattleEnemy_hide'][_0x139c78(0xc4a)](this),$gameParty[_0x139c78(0x76b)](null),delete this[_0x139c78(0xa36)][_0x139c78(0x39c)],delete this[_0x139c78(0xa36)][_0x139c78(0x2c2)];},Window_BattleEnemy['prototype'][_0x4fbf70(0x519)]=function(){const _0x2fe25e=_0x4fbf70;let _0xab67d=$gameTroop[_0x2fe25e(0x1c3)]();const _0x5bb3d1=BattleManager['inputtingAction']();if(_0x5bb3d1){if(_0x2fe25e(0x6e7)===_0x2fe25e(0x6e7)){_0x5bb3d1[_0x2fe25e(0x9dd)]()&&_0xab67d[_0x2fe25e(0x9d2)]>0x1&&this[_0x2fe25e(0x4c8)](_0x2fe25e(0x39c),this['selectAllEnemies']['bind'](this));if(_0x5bb3d1['isForAnyone']()){const _0x559dc2=$gameParty[_0x2fe25e(0x1c3)]();_0xab67d=_0xab67d['concat'](_0x559dc2);if(_0x5bb3d1['canSingleOrMultipleSelect']()&&_0x559dc2[_0x2fe25e(0x9d2)]>0x1){if(_0x2fe25e(0x973)!==_0x2fe25e(0x973)){if(this['_cache'][_0x2fe25e(0x448)]!==_0x26bcb0)return this[_0x2fe25e(0x7ff)]['svAnchorY'];return this[_0x2fe25e(0x55a)]()[_0x2fe25e(0x9c1)][_0x2fe25e(0xc4b)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x2fe25e(0x7ff)][_0x2fe25e(0x3f0)]=_0x2a90a5(_0x4d0fdb['$1']),this[_0x2fe25e(0x7ff)]['svAnchorY']=_0x2cda31(_0x395c10['$2'])):this[_0x2fe25e(0x7ff)][_0x2fe25e(0x448)]=_0x5dcb0c[_0x2fe25e(0x92c)][_0x2fe25e(0xac8)][_0x2fe25e(0xc4a)](this),this['_cache'][_0x2fe25e(0x448)];}else this[_0x2fe25e(0x4c8)](_0x2fe25e(0x2c2),this[_0x2fe25e(0x84f)][_0x2fe25e(0x8ff)](this));}}}else{if(_0x3745ef[_0x2fe25e(0xc9f)]()&&!_0x145e2d[_0x2fe25e(0x2ee)]())return;const _0x110b86=_0x27610e['battler']();if(_0x110b86&&_0x443ca7[_0x2fe25e(0xc9f)]())this['_battlerContainer'][_0x2fe25e(0x52a)](_0x110b86);}}return _0xab67d;},Window_BattleEnemy[_0x4fbf70(0x92c)][_0x4fbf70(0x1e5)]=function(){const _0x5f1c1f=_0x4fbf70;this[_0x5f1c1f(0x1ff)]=this['validTargets'](),this[_0x5f1c1f(0xa26)](),Window_Selectable[_0x5f1c1f(0x92c)][_0x5f1c1f(0x1e5)][_0x5f1c1f(0xc4a)](this);},Window_BattleEnemy[_0x4fbf70(0x92c)][_0x4fbf70(0xa26)]=function(){const _0x5023f1=_0x4fbf70;this[_0x5023f1(0x1ff)][_0x5023f1(0x72f)]((_0x155986,_0x4cf95a)=>{const _0x4f5b77=_0x5023f1;if(_0x155986[_0x4f5b77(0xc9f)]()!==_0x4cf95a[_0x4f5b77(0xc9f)]()){if(_0x155986[_0x4f5b77(0x923)]())return-0x1;if(_0x4cf95a[_0x4f5b77(0x923)]())return 0x1;}if(_0x155986[_0x4f5b77(0xc9f)]()&&_0x4cf95a[_0x4f5b77(0xc9f)]())return _0x155986[_0x4f5b77(0x331)]()-_0x4cf95a[_0x4f5b77(0x331)]();if(_0x155986[_0x4f5b77(0xb81)]()[_0x4f5b77(0xd6b)]===_0x4cf95a[_0x4f5b77(0xb81)]()[_0x4f5b77(0xd6b)]){if(_0x4f5b77(0xd30)!==_0x4f5b77(0xd30))this[_0x4f5b77(0xd49)]['close']();else return _0x155986[_0x4f5b77(0xb81)]()[_0x4f5b77(0x571)]-_0x4cf95a['battler']()['_baseY'];}else{if(_0x4f5b77(0x201)!=='byzzi')return _0x155986[_0x4f5b77(0xb81)]()['_baseX']-_0x4cf95a[_0x4f5b77(0xb81)]()[_0x4f5b77(0xd6b)];else this[_0x4f5b77(0x4c8)](_0x4f5b77(0x2c2),this[_0x4f5b77(0x84f)]['bind'](this));}}),SceneManager[_0x5023f1(0x916)]()&&this[_0x5023f1(0x1ff)][_0x5023f1(0x462)]();},Window_BattleEnemy['prototype']['autoSelect']=function(){const _0x54f299=_0x4fbf70,_0x439882=VisuMZ[_0x54f299(0xae2)][_0x54f299(0x837)][_0x54f299(0x73f)];_0x439882[_0x54f299(0x542)]?this['autoSelectLastSelected']():this['autoSelectPriority']();},Window_BattleEnemy[_0x4fbf70(0x92c)][_0x4fbf70(0x21f)]=function(){const _0x397114=_0x4fbf70,_0x51e37b=BattleManager['inputtingAction']();if(_0x51e37b&&_0x51e37b[_0x397114(0x83f)]()){if(_0x51e37b[_0x397114(0x1cd)]()){if(this['_lastActor']&&this[_0x397114(0x1ff)][_0x397114(0x6e3)](this[_0x397114(0x5d1)])){const _0x13a72a=this[_0x397114(0x1ff)][_0x397114(0xd48)](this[_0x397114(0x5d1)]);return this['forceSelect'](_0x13a72a);}else return _0x397114(0x930)===_0x397114(0x930)?this[_0x397114(0x6f7)]():this[_0x397114(0x80d)][_0x397114(0x822)]();}}if(this[_0x397114(0xaf1)]&&this[_0x397114(0x1ff)][_0x397114(0x6e3)](this[_0x397114(0xaf1)])){if('YMwHN'==='xSwgq'){const _0x189844=_0x238981['x']+_0x4cd1bf[_0x397114(0xb2d)]((_0xa570f3[_0x397114(0x606)]-_0x4391f4)/0x2);this[_0x397114(0x64e)](_0x367436,_0x189844,_0x7cf4fa['y'],_0x4ec29e);}else{const _0x452ed6=this[_0x397114(0x1ff)][_0x397114(0xd48)](this[_0x397114(0xaf1)]);this[_0x397114(0x2a8)](_0x452ed6);}}else'swFuM'!==_0x397114(0x512)?this['autoSelectPriority']():_0x2a5da8[_0x397114(0x3cb)]&&_0x410493[_0x397114(0x3cb)]();},Window_BattleEnemy[_0x4fbf70(0x92c)][_0x4fbf70(0x6f7)]=function(){const _0x4d35be=_0x4fbf70,_0x336809=BattleManager[_0x4d35be(0x206)]();if(_0x336809&&_0x336809[_0x4d35be(0x83f)]()){const _0x3830fe=$gameParty[_0x4d35be(0x1c3)]()[0x0];let _0x5edc3f=this[_0x4d35be(0x1ff)]['indexOf'](_0x3830fe);const _0x134aff=_0x336809['item']()[_0x4d35be(0x302)];if(_0x134aff[_0x4d35be(0xc4b)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i)){this['forceSelect'](_0x5edc3f);return;}else{if(_0x134aff[_0x4d35be(0xc4b)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i)){if('rDaeb'!==_0x4d35be(0x877)){this[_0x4d35be(0x2a8)](_0x5edc3f-0x1);return;}else this[_0x4d35be(0x1f4)](_0x4d35be(0x73a));}}}const _0x471d84=VisuMZ[_0x4d35be(0xae2)][_0x4d35be(0x837)][_0x4d35be(0x73f)];let _0x3fb197=![];$gameSystem[_0x4d35be(0x2ee)]()?_0x3fb197=_0x471d84[_0x4d35be(0x21d)]:_0x3fb197=_0x471d84[_0x4d35be(0x5e5)],this[_0x4d35be(0x2a8)](_0x3fb197?this[_0x4d35be(0x230)]()-0x1:0x0);},Window_BattleEnemy[_0x4fbf70(0x92c)][_0x4fbf70(0x9c6)]=function(){const _0x517f52=_0x4fbf70;Window_Selectable[_0x517f52(0x92c)][_0x517f52(0x9c6)][_0x517f52(0xc4a)](this);if(this[_0x517f52(0xbb3)]()[_0x517f52(0x923)]())this['_lastEnemy']=this[_0x517f52(0xbb3)]();if(this[_0x517f52(0xbb3)]()['isActor']())this['_lastActor']=this[_0x517f52(0xbb3)]();},Window_BattleEnemy[_0x4fbf70(0x92c)][_0x4fbf70(0x76b)]=function(_0x128e21){const _0x11b5d8=_0x4fbf70;Window_Selectable[_0x11b5d8(0x92c)][_0x11b5d8(0x76b)][_0x11b5d8(0xc4a)](this,_0x128e21),$gameTroop[_0x11b5d8(0x76b)](this[_0x11b5d8(0xbb3)]()),$gameParty[_0x11b5d8(0x76b)](this[_0x11b5d8(0xbb3)]());if(!this[_0x11b5d8(0xbb3)]())return;if(this['meetsSelectFrontviewActorConditions']()){if('JhkuU'!=='JhkuU')return _0x27b5c1[_0x11b5d8(0xae2)]['Game_Action_numRepeats']['call'](this);else{const _0x3833ad=SceneManager[_0x11b5d8(0x32c)][_0x11b5d8(0xa2c)];if(this[_0x11b5d8(0xbb3)]()[_0x11b5d8(0xc9f)]()){if(_0x11b5d8(0x5a6)!==_0x11b5d8(0x9ad))_0x3833ad['select'](this[_0x11b5d8(0xbb3)]()['index']());else return _0x48e40e[_0x11b5d8(0xbbb)][_0x11b5d8(0x837)][_0x11b5d8(0x824)][_0x11b5d8(0x6bb)];}else _0x3833ad[_0x11b5d8(0x3fe)]();}}},Window_BattleEnemy[_0x4fbf70(0x92c)][_0x4fbf70(0xd2e)]=function(){const _0x2b1df6=_0x4fbf70;if(!this[_0x2b1df6(0x737)])return![];if($gameSystem[_0x2b1df6(0x2ee)]())return![];const _0x3c37c0=SceneManager[_0x2b1df6(0x32c)][_0x2b1df6(0x3c7)](),_0x27a311=[_0x2b1df6(0x23c),'list','xp',_0x2b1df6(0x1c0),'border'];return _0x27a311[_0x2b1df6(0x6e3)](_0x3c37c0);},Window_BattleEnemy[_0x4fbf70(0x92c)][_0x4fbf70(0x931)]=function(){const _0x593bc3=_0x4fbf70,_0x299600=SceneManager['_scene'][_0x593bc3(0xa2c)];_0x299600[_0x593bc3(0x9c9)](),_0x299600['setEnemyWindowMode'](!![]),_0x299600[_0x593bc3(0x1e5)](),_0x299600[_0x593bc3(0x3fe)]();const _0x33a0c5=SceneManager[_0x593bc3(0x32c)][_0x593bc3(0x3c7)](),_0xe8f190=['xp',_0x593bc3(0x1c0),'border'];if(_0xe8f190[_0x593bc3(0x6e3)](_0x33a0c5)){if('riAHD'!==_0x593bc3(0x495)){const _0x2ba967=SceneManager['_scene'][_0x593bc3(0x9e4)];_0x2ba967[_0x593bc3(0xbfa)]['y']=0x0;}else this[_0x593bc3(0x7d8)](_0x593bc3(0x563)),_0x3c5dd5['_spriteset']['processEscape'](),_0x4922b8['BattleCore'][_0x593bc3(0xce2)]['call'](this),this[_0x593bc3(0x6cc)](_0x593bc3(0x27f));}},Window_BattleEnemy['prototype'][_0x4fbf70(0x6ce)]=function(){const _0x4f2868=_0x4fbf70,_0x2db4e4=SceneManager[_0x4f2868(0x32c)][_0x4f2868(0xa2c)];_0x2db4e4['hide'](),_0x2db4e4['setEnemyWindowMode'](![]),_0x2db4e4[_0x4f2868(0x3fe)]();const _0xb5e82e=SceneManager['_scene']['_statusWindow'];_0xb5e82e[_0x4f2868(0xbfa)]['y']=0x1;},Window_BattleEnemy[_0x4fbf70(0x92c)]['selectAllEnemies']=function(){const _0x5b1d16=_0x4fbf70,_0x52467d=BattleManager[_0x5b1d16(0x206)]();if(_0x52467d)_0x52467d[_0x5b1d16(0x594)](_0x5b1d16(0xb98));this[_0x5b1d16(0xb34)]();},Window_BattleEnemy[_0x4fbf70(0x92c)][_0x4fbf70(0x84f)]=function(){const _0x33e8ea=_0x4fbf70,_0x2503ea=BattleManager[_0x33e8ea(0x206)]();if(_0x2503ea)_0x2503ea[_0x33e8ea(0x594)](_0x33e8ea(0xc76));this[_0x33e8ea(0xb34)]();},Window_BattleEnemy[_0x4fbf70(0x92c)][_0x4fbf70(0xad9)]=function(){const _0x575dce=_0x4fbf70;return this[_0x575dce(0xaac)]();},Window_BattleEnemy['prototype'][_0x4fbf70(0xaac)]=function(){const _0x3bb1c3=_0x4fbf70,_0x58e446=BattleManager[_0x3bb1c3(0x206)]();if(!_0x58e446)return!![];if(!_0x58e446[_0x3bb1c3(0x98d)]())return!![];const _0x28db76=this['enemy'](),_0x32105d=_0x58e446[_0x3bb1c3(0x98d)]()['note'];if(_0x58e446[_0x3bb1c3(0x570)]()){if(_0x28db76===BattleManager[_0x3bb1c3(0x55a)]())return![];}return!![];},Window_BattleItem['prototype']['includes']=function(_0x5917e0){const _0x221ca6=_0x4fbf70;if(!_0x5917e0)return![];return _0x5917e0[_0x221ca6(0x746)]===0x0||_0x5917e0[_0x221ca6(0x746)]===0x1;};function Window_AutoBattleCancel(){const _0x5a0323=_0x4fbf70;this[_0x5a0323(0x691)](...arguments);}Window_AutoBattleCancel['prototype']=Object[_0x4fbf70(0xadc)](Window_Base['prototype']),Window_AutoBattleCancel[_0x4fbf70(0x92c)]['constructor']=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x4fbf70(0x92c)][_0x4fbf70(0x691)]=function(_0xdfa72c){const _0x3d77b8=_0x4fbf70;Window_Base[_0x3d77b8(0x92c)][_0x3d77b8(0x691)][_0x3d77b8(0xc4a)](this,_0xdfa72c),this[_0x3d77b8(0x2fb)](this[_0x3d77b8(0x518)]()),this[_0x3d77b8(0x1e5)]();},Window_AutoBattleCancel[_0x4fbf70(0x92c)][_0x4fbf70(0x518)]=function(){const _0xa84e0a=_0x4fbf70;return VisuMZ['BattleCore'][_0xa84e0a(0x837)][_0xa84e0a(0x5f2)][_0xa84e0a(0x4b4)];},Window_AutoBattleCancel[_0x4fbf70(0x92c)]['refresh']=function(){const _0x4ee1e1=_0x4fbf70;this[_0x4ee1e1(0x6d0)]['clear']();const _0x25d7a1=VisuMZ[_0x4ee1e1(0xae2)]['Settings'][_0x4ee1e1(0x5f2)][_0x4ee1e1(0xc1c)],_0x4e12eb=_0x25d7a1[_0x4ee1e1(0x946)](this[_0x4ee1e1(0x8ef)](),this['cancelButtonText']()),_0x192c94=this[_0x4ee1e1(0x69d)](_0x4e12eb)[_0x4ee1e1(0x606)],_0x2db84a=Math[_0x4ee1e1(0xb2d)]((this[_0x4ee1e1(0x9c8)]-_0x192c94)/0x2);this['drawTextEx'](_0x4e12eb,_0x2db84a,0x0,_0x192c94);},Window_AutoBattleCancel['prototype'][_0x4fbf70(0x8ef)]=function(){const _0x851d2a=_0x4fbf70;if(Imported[_0x851d2a(0xcaf)]){if(_0x851d2a(0x52e)===_0x851d2a(0x52e))return TextManager[_0x851d2a(0xa9f)]('ok');else this['updateCustomActionSequence']();}else return VisuMZ[_0x851d2a(0xae2)][_0x851d2a(0x837)][_0x851d2a(0x5f2)][_0x851d2a(0xa41)];},Window_AutoBattleCancel[_0x4fbf70(0x92c)][_0x4fbf70(0x2aa)]=function(){const _0x10364c=_0x4fbf70;return Imported[_0x10364c(0xcaf)]?TextManager[_0x10364c(0xa9f)]('cancel'):VisuMZ[_0x10364c(0xae2)][_0x10364c(0x837)]['AutoBattle']['AutoBattleCancel'];},Window_AutoBattleCancel[_0x4fbf70(0x92c)][_0x4fbf70(0x7b2)]=function(){const _0x363fcb=_0x4fbf70;Window_Base[_0x363fcb(0x92c)][_0x363fcb(0x7b2)][_0x363fcb(0xc4a)](this),this['updateVisibility'](),this[_0x363fcb(0xb08)]();},Window_AutoBattleCancel['prototype'][_0x4fbf70(0x54e)]=function(){const _0x430ac9=_0x4fbf70;this[_0x430ac9(0x737)]=BattleManager[_0x430ac9(0x2ce)];},Window_AutoBattleCancel[_0x4fbf70(0x92c)]['updateCancel']=function(){const _0x416f54=_0x4fbf70;if(!BattleManager['_autoBattle'])return;(Input[_0x416f54(0x6e6)]('ok')||Input[_0x416f54(0x6e6)](_0x416f54(0x5fa))||TouchInput['isClicked']()||TouchInput[_0x416f54(0x284)]())&&(SoundManager[_0x416f54(0x870)](),BattleManager[_0x416f54(0x2ce)]=![],Input['clear'](),TouchInput['clear']());};function Window_EnemyName(){const _0x5e34e9=_0x4fbf70;this[_0x5e34e9(0x691)](...arguments);}Window_EnemyName[_0x4fbf70(0x92c)]=Object['create'](Window_StatusBase[_0x4fbf70(0x92c)]),Window_EnemyName[_0x4fbf70(0x92c)][_0x4fbf70(0x631)]=Window_EnemyName,Window_EnemyName[_0x4fbf70(0x92c)][_0x4fbf70(0x691)]=function(_0x3e87e8){const _0x528ce0=_0x4fbf70;this['_enemyID']=_0x3e87e8,this['_text']='';const _0x20d11f=new Rectangle(0x0,0x0,Graphics[_0x528ce0(0x2d5)],this[_0x528ce0(0x445)]()*0x4);Window_StatusBase['prototype'][_0x528ce0(0x691)][_0x528ce0(0xc4a)](this,_0x20d11f),this[_0x528ce0(0x2fb)](0x2),this[_0x528ce0(0x8ed)]=0x0;},Window_EnemyName[_0x4fbf70(0x92c)][_0x4fbf70(0x440)]=function(){const _0xb7ccfc=_0x4fbf70;this[_0xb7ccfc(0x379)]=0x0;},Window_EnemyName[_0x4fbf70(0x92c)][_0x4fbf70(0xbb3)]=function(){const _0x4393ad=_0x4fbf70;return $gameTroop['members']()[this[_0x4393ad(0xbb9)]];},Window_EnemyName[_0x4fbf70(0x92c)][_0x4fbf70(0x7b2)]=function(){const _0x368892=_0x4fbf70;Window_StatusBase['prototype'][_0x368892(0x7b2)][_0x368892(0xc4a)](this),this[_0x368892(0xbb3)]()&&this['enemy']()['name']()!==this[_0x368892(0x307)]&&(this[_0x368892(0x307)]=this['enemy']()[_0x368892(0x27a)](),this[_0x368892(0x1e5)]()),this[_0x368892(0xd54)](),this['updatePosition']();},Window_EnemyName[_0x4fbf70(0x92c)]['updateOpacity']=function(){const _0x4944be=_0x4fbf70;if(!this['enemy']()){if(_0x4944be(0xbc8)===_0x4944be(0x8a4))this[_0x4944be(0xc55)](_0x4f3576[_0x4944be(0xa31)],0x0);else{if(this[_0x4944be(0x8ed)]>0x0)this[_0x4944be(0x8ed)]-=0x10;}}else{if(this['enemy']()[_0x4944be(0x521)]()){if(this['contentsOpacity']>0x0)this[_0x4944be(0x8ed)]-=0x10;}else{if(SceneManager[_0x4944be(0x32c)][_0x4944be(0x569)]&&SceneManager[_0x4944be(0x32c)][_0x4944be(0x569)][_0x4944be(0xa4a)]&&SceneManager[_0x4944be(0x32c)]['_enemyWindow']['_enemies']['includes'](this[_0x4944be(0xbb3)]())){if(this[_0x4944be(0x8ed)]<0xff)this[_0x4944be(0x8ed)]+=0x10;}else{if(this[_0x4944be(0x8ed)]>0x0){if('EyWrZ'===_0x4944be(0x2a4))this[_0x4944be(0x8ed)]-=0x10;else{if(!_0x48a26b['isSideView']())return;const _0x31426a=this[_0x4944be(0xb81)]();if(!_0x31426a)return;_0x31426a[_0x4944be(0xcb0)](_0x184870,_0xc68b46,_0x2942b6);}}}}}},Window_EnemyName['prototype'][_0x4fbf70(0xd25)]=function(){const _0x1f0b87=_0x4fbf70;if(!this[_0x1f0b87(0xbb3)]())return;if(SceneManager[_0x1f0b87(0x916)]()){if(_0x1f0b87(0xab2)===_0x1f0b87(0x3d8))return this[_0x1f0b87(0xbab)]()[_0x1f0b87(0x9c1)]['match'](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?_0x522685(_0x18d327['$1'])[_0x1f0b87(0x94a)](/[\r\n]+/):_0x36e681[_0x1f0b87(0xae2)]['Settings'][_0x1f0b87(0x22d)][_0x1f0b87(0x1a0)];else this['x']=Graphics[_0x1f0b87(0x2d5)]-this[_0x1f0b87(0xbb3)]()[_0x1f0b87(0xb81)]()[_0x1f0b87(0xd6b)];}else _0x1f0b87(0xb0f)===_0x1f0b87(0xb0f)?this['x']=this[_0x1f0b87(0xbb3)]()['battler']()[_0x1f0b87(0xd6b)]:(_0x3e3c3c[_0x1f0b87(0xae2)][_0x1f0b87(0x37e)][_0x1f0b87(0xc4a)](this),this[_0x1f0b87(0x3c7)]()==='border'&&this[_0x1f0b87(0x401)]());this['x']-=Math['round'](this[_0x1f0b87(0x606)]/0x2),this['y']=this['enemy']()[_0x1f0b87(0xb81)]()[_0x1f0b87(0x571)]-Math[_0x1f0b87(0xbec)](this[_0x1f0b87(0x445)]()*1.5);const _0x1fc269=VisuMZ[_0x1f0b87(0xae2)][_0x1f0b87(0x837)][_0x1f0b87(0x73f)];this['x']+=_0x1fc269[_0x1f0b87(0x22a)]||0x0,this['y']+=_0x1fc269[_0x1f0b87(0x1e1)]||0x0;},Window_EnemyName[_0x4fbf70(0x92c)][_0x4fbf70(0x6a7)]=function(){const _0x3256cb=_0x4fbf70;Window_Base['prototype'][_0x3256cb(0x6a7)][_0x3256cb(0xc4a)](this),this[_0x3256cb(0x6d0)][_0x3256cb(0x31d)]=VisuMZ[_0x3256cb(0xae2)][_0x3256cb(0x837)][_0x3256cb(0x73f)][_0x3256cb(0xa82)];},Window_EnemyName['prototype'][_0x4fbf70(0x1e5)]=function(){const _0x40cf2e=_0x4fbf70;Window_StatusBase[_0x40cf2e(0x92c)][_0x40cf2e(0x1e5)][_0x40cf2e(0xc4a)](this),this[_0x40cf2e(0x6d0)][_0x40cf2e(0xb36)]();if(!this[_0x40cf2e(0xbb3)]())return;this[_0x40cf2e(0x67e)]();},Window_EnemyName[_0x4fbf70(0x92c)]['drawEnemyName']=function(){const _0x278adc=_0x4fbf70;this['_text']=this[_0x278adc(0xbb3)]()[_0x278adc(0x27a)]();const _0xbf6864=this['textSizeEx'](this[_0x278adc(0x307)])[_0x278adc(0x606)],_0x1e863b=Math[_0x278adc(0xbec)]((this[_0x278adc(0x9c8)]-_0xbf6864)/0x2);this[_0x278adc(0x64e)](this[_0x278adc(0x307)],_0x1e863b,0x0,_0xbf6864+0x8);},Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0xaa4)]=function(){const _0x5a2199=_0x4fbf70;return VisuMZ[_0x5a2199(0xae2)]['Settings']['BattleLog']['MaxLines'];},Window_BattleLog['prototype'][_0x4fbf70(0xc87)]=function(){const _0x4f0551=_0x4fbf70;return VisuMZ[_0x4f0551(0xae2)][_0x4f0551(0x837)]['BattleLog']['MessageWait'];},Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x947)]=function(){const _0x347f1c=_0x4fbf70;return VisuMZ[_0x347f1c(0xae2)]['Settings']['BattleLog'][_0x347f1c(0x459)];},Window_BattleLog['prototype'][_0x4fbf70(0x4bf)]=function(){return![];},Window_BattleLog[_0x4fbf70(0x92c)]['actionEffect']=function(_0xe4cc5c,_0x3e4aed){const _0x2817f=_0x4fbf70;this[_0x2817f(0x481)](_0x2817f(0xc0a)),BattleManager[_0x2817f(0x455)](_0xe4cc5c,_0x3e4aed),this[_0x2817f(0x91e)]();},Window_BattleLog[_0x4fbf70(0x92c)]['actionSplicePoint']=function(){const _0x2cf9de=_0x4fbf70;this[_0x2cf9de(0x91e)]();},Window_BattleLog['prototype'][_0x4fbf70(0x25b)]=function(_0x528cad){const _0xd026b3=_0x4fbf70,_0x394272=Array['prototype'][_0xd026b3(0xb12)][_0xd026b3(0xc4a)](arguments,0x1),_0x23dccd={'name':_0x528cad,'params':_0x394272},_0x16ea29=this[_0xd026b3(0xba4)][_0xd026b3(0x990)](_0x272c5d=>_0x272c5d['name'])[_0xd026b3(0xd48)](_0xd026b3(0xc0a));_0x16ea29>=0x0?this[_0xd026b3(0xba4)][_0xd026b3(0x4ad)](_0x16ea29,0x0,_0x23dccd):this[_0xd026b3(0xba4)][_0xd026b3(0x25b)](_0x23dccd);},Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x481)]=function(_0x26b406){const _0x227b2a=_0x4fbf70,_0xb77edb=Array[_0x227b2a(0x92c)][_0x227b2a(0xb12)][_0x227b2a(0xc4a)](arguments,0x1);this['_methods'][_0x227b2a(0x481)]({'name':_0x26b406,'params':_0xb77edb});},Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x7c2)]=function(){const _0x2d6ff4=_0x4fbf70;if(!$gameTemp[_0x2d6ff4(0x6a5)]())return;console['log'](this[_0x2d6ff4(0xba4)][_0x2d6ff4(0x990)](_0x48617a=>_0x48617a[_0x2d6ff4(0x27a)])['join']('\x0a'));},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x647)]=Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x1e5)],Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x1e5)]=function(){this['_requestRefresh']=!![];},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x2f6)]=Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x7b2)],Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x7b2)]=function(){const _0x72dc79=_0x4fbf70;VisuMZ[_0x72dc79(0xae2)]['Window_BattleLog_update']['call'](this);if(this[_0x72dc79(0x760)])this['processRefresh']();},Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x83d)]=function(){const _0x2457bd=_0x4fbf70;this['_requestRefresh']=![],VisuMZ[_0x2457bd(0xae2)][_0x2457bd(0x647)][_0x2457bd(0xc4a)](this);},Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x846)]=function(_0xf0a0a1){const _0x3ab525=_0x4fbf70;let _0x3a3988=VisuMZ[_0x3ab525(0xae2)]['Settings']['BattleLog'][_0x3ab525(0x7ed)][_0x3ab525(0x39e)]()['trim'](),_0x1401a2=this[_0x3ab525(0x575)][_0xf0a0a1];if(_0x1401a2['match'](/<LEFT>/i))_0x3a3988=_0x3ab525(0x1bc);else{if(_0x1401a2[_0x3ab525(0xc4b)](/<CENTER>/i))_0x3a3988=_0x3ab525(0xc5c);else{if(_0x1401a2['match'](/<RIGHT>/i)){if(_0x3ab525(0x205)===_0x3ab525(0x9ce)){if(!_0x24b294[_0x3ab525(0x90d)]())return;const _0x535111=_0x464ad0[_0x3ab525(0x2e0)];_0x535111['popBaseLine']();}else _0x3a3988=_0x3ab525(0x8ea);}}}_0x1401a2=_0x1401a2['replace'](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x1401a2=_0x1401a2['replace'](/\\I\[0\]/gi,'');const _0xd4f5ef=this[_0x3ab525(0x198)](_0xf0a0a1);this[_0x3ab525(0x6d0)][_0x3ab525(0x5ca)](_0xd4f5ef['x'],_0xd4f5ef['y'],_0xd4f5ef[_0x3ab525(0x606)],_0xd4f5ef[_0x3ab525(0x389)]);const _0x25ebed=this[_0x3ab525(0x69d)](_0x1401a2)[_0x3ab525(0x606)];let _0x4424de=_0xd4f5ef['x'];if(_0x3a3988==='center')_0x4424de+=(_0xd4f5ef[_0x3ab525(0x606)]-_0x25ebed)/0x2;else _0x3a3988===_0x3ab525(0x8ea)&&(_0x4424de+=_0xd4f5ef[_0x3ab525(0x606)]-_0x25ebed);this['drawTextEx'](_0x1401a2,_0x4424de,_0xd4f5ef['y'],_0x25ebed+0x8);},Window_BattleLog[_0x4fbf70(0x92c)]['addText']=function(_0x5638bf){const _0x6e59af=_0x4fbf70;this[_0x6e59af(0x575)]['push'](_0x5638bf),this[_0x6e59af(0x1e5)](),this['callNextMethod']();},Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0xd46)]=function(){const _0x368a8b=_0x4fbf70;let _0x357141=![];switch(this[_0x368a8b(0xd5c)]){case'effect':_0x357141=this[_0x368a8b(0x7cf)][_0x368a8b(0xa89)]();break;case'movement':_0x357141=this['_spriteset'][_0x368a8b(0x5bd)]();break;case _0x368a8b(0x8d1):_0x357141=this[_0x368a8b(0x7cf)][_0x368a8b(0x58d)]();break;case _0x368a8b(0x8ac):_0x357141=this['_spriteset'][_0x368a8b(0x4c1)]();break;case _0x368a8b(0x3d6):_0x357141=this[_0x368a8b(0x7cf)][_0x368a8b(0x890)]();break;case _0x368a8b(0x853):_0x357141=this[_0x368a8b(0x7cf)]['isAnyoneChangingOpacity']();break;}return!_0x357141&&(this[_0x368a8b(0xd5c)]=''),_0x357141;},Window_BattleLog[_0x4fbf70(0x92c)]['waitForAnimation']=function(){const _0x15f376=_0x4fbf70;this['setWaitMode'](_0x15f376(0x8d1));},Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0xb95)]=function(){const _0x410947=_0x4fbf70;this[_0x410947(0x645)]('float');},Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x194)]=function(){const _0x2e5d05=_0x4fbf70;this[_0x2e5d05(0x645)](_0x2e5d05(0x3d6));},Window_BattleLog['prototype'][_0x4fbf70(0x74b)]=function(){const _0x28c80e=_0x4fbf70;this[_0x28c80e(0x645)]('opacity');},Window_BattleLog[_0x4fbf70(0x92c)]['startTurn']=function(){const _0x3b340d=_0x4fbf70,_0x528457=VisuMZ[_0x3b340d(0xae2)][_0x3b340d(0x837)][_0x3b340d(0x202)];if(!_0x528457[_0x3b340d(0xb85)])return;this[_0x3b340d(0x25b)](_0x3b340d(0xb70),_0x528457[_0x3b340d(0x4ca)][_0x3b340d(0x946)]($gameTroop[_0x3b340d(0xd32)]())),this['push']('waitCount',_0x528457[_0x3b340d(0x4ff)]),this[_0x3b340d(0x25b)]('clear');},Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x8ce)]=function(_0x48b2fa,_0x39289c,_0xb3d954){const _0x809da8=_0x4fbf70;this[_0x809da8(0xa32)](_0x39289c)?_0x809da8(0x9b5)!==_0x809da8(0x9b5)?this[_0x809da8(0x7ff)][_0x809da8(0x5c9)]=![]:BattleManager[_0x809da8(0x557)]():_0x809da8(0xbe3)!==_0x809da8(0xbe3)?_0x84b7d5[_0x809da8(0x92c)][_0x809da8(0xab7)]['call'](this,_0x1a20dc,_0x2644aa,_0x3bb96d,_0x24fdee):this['usePremadeActionSequence'](_0x48b2fa,_0x39289c,_0xb3d954);},Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0xa32)]=function(_0x4b4803){const _0x9bd5bd=_0x4fbf70;if(!SceneManager[_0x9bd5bd(0x90d)]())return![];if(!_0x4b4803)return![];if(!_0x4b4803['item']())return![];if(_0x4b4803[_0x9bd5bd(0x98d)]()[_0x9bd5bd(0x9c1)][_0x9bd5bd(0xc4b)](/<CUSTOM ACTION SEQUENCE>/i)){if(_0x9bd5bd(0x678)===_0x9bd5bd(0x1bd))_0x3c5d58=!_0x2df663;else return!![];}if(DataManager['checkAutoCustomActionSequenceNotetagEffect'](_0x4b4803[_0x9bd5bd(0x98d)]()))return!![];return![];},Window_BattleLog[_0x4fbf70(0x92c)]['usePremadeActionSequence']=function(_0x783f37,_0x5412a3,_0xa5334a){const _0x128588=_0x4fbf70,_0x424c07=_0x5412a3[_0x128588(0x98d)]();this['setupActionSet'](_0x783f37,_0x5412a3,_0xa5334a),this[_0x128588(0x3b6)](_0x783f37,_0x5412a3,_0xa5334a),this['finishActionSet'](_0x783f37,_0x5412a3,_0xa5334a);},Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0xc91)]=function(_0x2adf09,_0x2dc0f0){const _0x439b31=_0x4fbf70,_0x44054b=VisuMZ[_0x439b31(0xae2)][_0x439b31(0x837)][_0x439b31(0x202)];_0x44054b[_0x439b31(0x76d)]&&('efYQE'!=='efYQE'?_0x41b380[_0x439b31(0x815)](_0x439b31(0x207)):this[_0x439b31(0x25b)](_0x439b31(0xb70),_0x439b31(0x74c)[_0x439b31(0x946)](DataManager[_0x439b31(0x3d7)](_0x2dc0f0))));if(DataManager[_0x439b31(0x547)](_0x2dc0f0)){if(_0x439b31(0xcd2)!=='NUIRw')_0x5e7d04=_0x4393fb+_0x25860b[_0x439b31(0xa8e)]/0x2-0x4,_0x7f2028=_0x2cc468-_0x4aacfc[_0x439b31(0x3f6)]/0x2;else{if(_0x44054b['ActionSkillMsg1'])this[_0x439b31(0xbe0)](_0x2dc0f0[_0x439b31(0x442)],_0x2adf09,_0x2dc0f0);if(_0x44054b['ActionSkillMsg2'])this['displayItemMessage'](_0x2dc0f0['message2'],_0x2adf09,_0x2dc0f0);}}else{if(_0x439b31(0x3dd)===_0x439b31(0x3dd)){if(_0x44054b[_0x439b31(0xb6a)])this[_0x439b31(0xbe0)](TextManager[_0x439b31(0xd73)],_0x2adf09,_0x2dc0f0);}else{if(_0x57bad6[_0x439b31(0x53a)])this['displayItemMessage'](_0x4db45c[_0x439b31(0x442)],_0x3665c9,_0x531708);if(_0x15fa18['ActionSkillMsg2'])this[_0x439b31(0xbe0)](_0x4898da[_0x439b31(0x9db)],_0x280fd5,_0x45d03b);}}},Window_BattleLog['prototype'][_0x4fbf70(0x786)]=function(_0x3b784e,_0x52cc32,_0x3c6be8){const _0x3c0173=_0x4fbf70,_0x33df97=_0x52cc32[_0x3c0173(0x98d)]();this[_0x3c0173(0xc91)](_0x3b784e,_0x33df97),this['push'](_0x3c0173(0xa09),_0x3b784e,_0x3c6be8,!![]),this['push'](_0x3c0173(0x297),_0x3b784e,_0x52cc32),this[_0x3c0173(0x25b)](_0x3c0173(0xcba)),this[_0x3c0173(0x25b)](_0x3c0173(0xbfb),_0x3b784e,_0x52cc32),this['push']('waitForAnimation');},Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x3b6)]=function(_0x2fad09,_0xc97fc8,_0x4d137c){const _0x1667f0=_0x4fbf70;if(this[_0x1667f0(0x623)](_0xc97fc8))this[_0x1667f0(0xabc)](_0x2fad09,_0xc97fc8,_0x4d137c);else{if(this[_0x1667f0(0x321)](_0xc97fc8))_0x1667f0(0x1b3)==='DbRQY'?this[_0x1667f0(0x62f)](_0x2fad09,_0xc97fc8,_0x4d137c):(_0x52e7fb+=_0x2a54a4['isActor']()?-_0x10b2db:_0x2a2871,_0x23c572+=_0x26ac47);else _0xc97fc8['isForRandom']()?this[_0x1667f0(0x1e0)](_0x2fad09,_0xc97fc8,_0x4d137c):this['wholeActionSet'](_0x2fad09,_0xc97fc8,_0x4d137c);}},Window_BattleLog[_0x4fbf70(0x92c)]['addMeleeReturnActionSet']=function(_0x39b9f1,_0x3e9f30,_0x39b4f6,_0x1edb0f){const _0xc32b34=_0x4fbf70;if(_0x3e9f30){if('Qespe'!=='BdSkr'){const _0x38b1dc=_0x39b9f1['battler']();this[_0xc32b34(0x25b)]('performJump',[_0x39b9f1],_0x39b4f6,_0x1edb0f),this['push']('performMoveToPoint',_0x39b9f1,_0x38b1dc[_0xc32b34(0x818)],_0x38b1dc[_0xc32b34(0xd1d)],_0x1edb0f,![],_0xc32b34(0x60a)),this[_0xc32b34(0x25b)](_0xc32b34(0x9eb),[_0x39b9f1],'evade'),this[_0xc32b34(0x25b)](_0xc32b34(0xcba)),this[_0xc32b34(0x25b)](_0xc32b34(0x9eb),[_0x39b9f1],_0xc32b34(0xcdb));}else{const _0x337f8f=_0x61d914(_0x13a9c2['$1'])[_0xc32b34(0x7a4)]()['trim']();return _0x337f8f;}}},Window_BattleLog['prototype'][_0x4fbf70(0x623)]=function(_0x5cc053){const _0xb3c6fa=_0x4fbf70;if(!_0x5cc053['isPhysical']())return![];if(!_0x5cc053[_0xb3c6fa(0xa44)]())return![];if(!_0x5cc053[_0xb3c6fa(0x7c1)]())return![];return VisuMZ[_0xb3c6fa(0xae2)]['Settings'][_0xb3c6fa(0xc03)][_0xb3c6fa(0xacf)];},Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0xabc)]=function(_0x363812,_0x2aed22,_0x11ea78){const _0x382214=_0x4fbf70,_0x55bb2d=_0x363812[_0x382214(0xb62)]()['type']<0x2,_0x9386e2=0x14,_0x1e2a25=0x30;let _0x340ec8=!![];_0x11ea78[_0x382214(0x9d2)]>0x0&&_0x363812[_0x382214(0xc9f)]()===_0x11ea78[0x0][_0x382214(0xc9f)]()&&(_0x340ec8=![]);if(_0x55bb2d&&_0x340ec8){if('HfBzq'===_0x382214(0x2fe)){const _0x16882a=_0x5f5348(_0x4ee28e['$1'])[_0x382214(0x94a)](/[\r\n]+/)[_0x382214(0x5d9)]('');_0x1858f9[_0x382214(0x27a)]=_0x3739f3[_0x382214(0x794)](_0x16882a);}else this[_0x382214(0x25b)](_0x382214(0xd55),[_0x363812],_0x1e2a25,_0x9386e2),this[_0x382214(0x25b)](_0x382214(0x411),_0x363812,_0x11ea78,_0x382214(0xc10),_0x9386e2,!![],_0x382214(0x60a),!![]),this[_0x382214(0x25b)](_0x382214(0x9eb),[_0x363812],'walk'),this['push'](_0x382214(0xcba));}let _0x207b7a=_0x2aed22[_0x382214(0x4c0)]()?this['getDualWieldTimes'](_0x363812):0x1;for(let _0x16546f=0x0;_0x16546f<_0x207b7a;_0x16546f++){_0x2aed22[_0x382214(0x4c0)]()&&_0x363812[_0x382214(0xc9f)]()&&this[_0x382214(0x25b)]('setActiveWeaponSet',_0x363812,_0x16546f),_0x2aed22[_0x382214(0x98d)]()['animationId']<0x0?_0x382214(0x3e1)!==_0x382214(0x616)?this[_0x382214(0x1e0)](_0x363812,_0x2aed22,_0x11ea78):(_0x4c344c&&(_0x4fa486[_0x382214(0xcf3)]=_0x336e56[_0x382214(0xcf3)]||{},_0x2dc7e9[_0x382214(0xcf3)]['priority']=0x0),_0x359193[_0x382214(0xaca)](_0xba72aa,_0xf5219e,_0x14270e,_0x30817d)):this[_0x382214(0x954)](_0x363812,_0x2aed22,_0x11ea78);}_0x2aed22[_0x382214(0x4c0)]()&&_0x363812[_0x382214(0xc9f)]()&&this[_0x382214(0x25b)](_0x382214(0x781),_0x363812),this[_0x382214(0x25b)](_0x382214(0xa09),_0x363812,_0x11ea78,![]),this['addMeleeReturnActionSet'](_0x363812,_0x55bb2d,_0x1e2a25,_0x9386e2);},Window_BattleLog['prototype'][_0x4fbf70(0x321)]=function(_0x16de51){const _0x575238=_0x4fbf70;if(!_0x16de51[_0x575238(0x6bf)]())return![];if(!_0x16de51[_0x575238(0x5c7)]())return![];if(!_0x16de51[_0x575238(0x7c1)]())return![];return VisuMZ[_0x575238(0xae2)][_0x575238(0x837)][_0x575238(0xc03)][_0x575238(0x812)];},Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x62f)]=function(_0x5bab63,_0x50666c,_0x141ab2){const _0x906a10=_0x4fbf70,_0x98a17a=_0x5bab63[_0x906a10(0xb62)]()[_0x906a10(0x2ff)]<0x2,_0x6b8a64=0x14,_0x496615=0x30;if(_0x98a17a){this['push'](_0x906a10(0xd55),[_0x5bab63],_0x496615,_0x6b8a64);const _0x234e1f=_0x141ab2['length']>0x1?_0x906a10(0x250):'front\x20base';this[_0x906a10(0x25b)]('performMoveToTargets',_0x5bab63,_0x141ab2,_0x234e1f,_0x6b8a64,!![],_0x906a10(0x60a),!![]),this[_0x906a10(0x25b)]('requestMotion',[_0x5bab63],_0x906a10(0xcdb)),this[_0x906a10(0x25b)](_0x906a10(0xcba));}let _0x172657=_0x50666c[_0x906a10(0x4c0)]()?this[_0x906a10(0xa96)](_0x5bab63):0x1;for(let _0x581a0b=0x0;_0x581a0b<_0x172657;_0x581a0b++){_0x906a10(0x4f5)!=='mIHnm'?(_0x2282f8[_0x906a10(0x76b)](_0x479ad5),_0x49b945[_0x906a10(0xb34)]()):(_0x50666c[_0x906a10(0x4c0)]()&&_0x5bab63[_0x906a10(0xc9f)]()&&this[_0x906a10(0x25b)]('setActiveWeaponSet',_0x5bab63,_0x581a0b),this[_0x906a10(0x954)](_0x5bab63,_0x50666c,_0x141ab2));}_0x50666c['isAttack']()&&_0x5bab63[_0x906a10(0xc9f)]()&&(_0x906a10(0x572)!==_0x906a10(0x572)?this['setWaitMode'](_0x906a10(0x853)):this[_0x906a10(0x25b)]('clearActiveWeaponSet',_0x5bab63)),this[_0x906a10(0x25b)](_0x906a10(0xa09),_0x5bab63,_0x141ab2,![]),this[_0x906a10(0xd58)](_0x5bab63,_0x98a17a,_0x496615,_0x6b8a64);},Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x1e0)]=function(_0x780b91,_0x403ed0,_0x4d2cfd){const _0x14a942=_0x4fbf70,_0x28b67f=_0x403ed0[_0x14a942(0x98d)]();for(const _0x23e45d of _0x4d2cfd){if(_0x14a942(0xa67)!==_0x14a942(0xa67))return!![];else{if(!_0x23e45d)continue;this[_0x14a942(0x25b)](_0x14a942(0x377),_0x780b91,_0x403ed0),this['push'](_0x14a942(0x857),Sprite_Battler[_0x14a942(0xc33)]),this[_0x14a942(0x25b)](_0x14a942(0x600),_0x780b91,[_0x23e45d],_0x28b67f[_0x14a942(0x475)]),this[_0x14a942(0x25b)](_0x14a942(0x857),0x18),this[_0x14a942(0x25b)]('actionEffect',_0x780b91,_0x23e45d);}}},Window_BattleLog[_0x4fbf70(0x92c)]['wholeActionSet']=function(_0x4c0803,_0xf40a80,_0xaaa11d){const _0x1038c4=_0x4fbf70,_0xa2c8e8=_0xf40a80[_0x1038c4(0x98d)]();let _0x295ace=_0xf40a80[_0x1038c4(0x4c0)]()?0x1+_0x4c0803[_0x1038c4(0x9ff)]():0x1;while(_0x295ace--){if(_0x1038c4(0x9c2)!==_0x1038c4(0x848))this[_0x1038c4(0x25b)](_0x1038c4(0x377),_0x4c0803,_0xf40a80),this[_0x1038c4(0x25b)](_0x1038c4(0x857),Sprite_Battler[_0x1038c4(0xc33)]),this[_0x1038c4(0x25b)]('showAnimation',_0x4c0803,_0xaaa11d['clone'](),_0xa2c8e8['animationId']),this[_0x1038c4(0x25b)]('waitForAnimation');else{_0x52d87b[_0x1038c4(0x72f)]((_0x5c7306,_0x4f0ed3)=>_0x5c7306['hpRate']()-_0x4f0ed3[_0x1038c4(0xb21)]());while(_0x5a85b6[_0x1038c4(0x6e3)](this[_0x1038c4(0x928)]())){const _0x52ee6a=_0x1b73eb[_0x1038c4(0xd48)](this[_0x1038c4(0x928)]());_0x413a19[_0x52ee6a]=_0x1873fb[_0x583e1d[_0x1038c4(0x545)](_0x268fcd['length'])];}}}for(const _0x12dd60 of _0xaaa11d){if(!_0x12dd60)continue;this[_0x1038c4(0x25b)](_0x1038c4(0x31f),_0x4c0803,_0x12dd60);}},Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x8e5)]=function(_0x54e8e9,_0x518fd4,_0x2ffe7d){const _0x5670cf=_0x4fbf70,_0x43f308=_0x518fd4[_0x5670cf(0x98d)]();this[_0x5670cf(0x25b)](_0x5670cf(0xa09),_0x54e8e9,_0x2ffe7d,![]),this['push'](_0x5670cf(0x6fd)),this[_0x5670cf(0x25b)](_0x5670cf(0x404)),this[_0x5670cf(0x25b)](_0x5670cf(0xb36)),this['push'](_0x5670cf(0x287),_0x54e8e9),this['push'](_0x5670cf(0xcba));},Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x541)]=function(_0x4dd510){},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xd31)]=Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x633)],Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x633)]=function(_0x589df4){const _0x4f9e45=_0x4fbf70;if(!VisuMZ[_0x4f9e45(0xae2)][_0x4f9e45(0x837)]['BattleLog'][_0x4f9e45(0x5f1)])return;VisuMZ[_0x4f9e45(0xae2)][_0x4f9e45(0xd31)][_0x4f9e45(0xc4a)](this,_0x589df4);},Window_BattleLog[_0x4fbf70(0x92c)]['displayCounter']=function(_0x5128be){const _0x4897b1=_0x4fbf70;this[_0x4897b1(0x25b)](_0x4897b1(0x5d6),_0x5128be);if(VisuMZ[_0x4897b1(0xae2)][_0x4897b1(0x837)][_0x4897b1(0xc03)]['CounterPlayback']){if(_0x4897b1(0x65b)!==_0x4897b1(0xac2))this[_0x4897b1(0x25b)](_0x4897b1(0x600),_0x5128be,[BattleManager[_0x4897b1(0xb38)]],-0x1);else{if(_0x18c180[_0x4897b1(0xad8)]()['zoomDuration']>0x0)return!![];this[_0x4897b1(0xd5c)]='';}}if(!VisuMZ[_0x4897b1(0xae2)][_0x4897b1(0x837)][_0x4897b1(0x202)][_0x4897b1(0x6a1)])return;this[_0x4897b1(0x25b)](_0x4897b1(0xb70),TextManager['counterAttack'][_0x4897b1(0x946)](_0x5128be[_0x4897b1(0x27a)]()));},Window_BattleLog['prototype']['displayReflection']=function(_0x3a1f1f){const _0x40efe7=_0x4fbf70;this[_0x40efe7(0x25b)](_0x40efe7(0x1ee),_0x3a1f1f);if(!VisuMZ[_0x40efe7(0xae2)][_0x40efe7(0x837)]['BattleLog'][_0x40efe7(0xc29)])return;this[_0x40efe7(0x25b)]('addText',TextManager[_0x40efe7(0x423)]['format'](_0x3a1f1f[_0x40efe7(0x27a)]()));},Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x7ea)]=function(_0x317ee6,_0x52e24d){const _0xb49d6b=_0x4fbf70;if(VisuMZ[_0xb49d6b(0xae2)]['Settings'][_0xb49d6b(0xc03)][_0xb49d6b(0x2c1)]){const _0xfc4602=_0x52e24d[_0xb49d6b(0x98d)]();this[_0xb49d6b(0x25b)](_0xb49d6b(0x600),_0x317ee6,[_0x317ee6],_0xfc4602[_0xb49d6b(0x475)]);}},Window_BattleLog['prototype']['displaySubstitute']=function(_0x486897,_0x139c27){const _0x5b2ced=_0x4fbf70;this[_0x5b2ced(0x25b)](_0x5b2ced(0x829),_0x486897,_0x139c27);if(!VisuMZ[_0x5b2ced(0xae2)][_0x5b2ced(0x837)]['BattleLog']['ShowSubstitute'])return;const _0x51f2e3=_0x486897[_0x5b2ced(0x27a)](),_0x5a723d=TextManager[_0x5b2ced(0x69b)]['format'](_0x51f2e3,_0x139c27[_0x5b2ced(0x27a)]());this['push'](_0x5b2ced(0xb70),_0x5a723d);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x31c)]=Window_BattleLog['prototype'][_0x4fbf70(0x403)],Window_BattleLog['prototype']['displayActionResults']=function(_0xcbdf01,_0x3b0e8e){const _0x1efacc=_0x4fbf70;VisuMZ['BattleCore'][_0x1efacc(0x31c)][_0x1efacc(0xc4a)](this,_0xcbdf01,_0x3b0e8e);},VisuMZ[_0x4fbf70(0xae2)]['Window_BattleLog_displayFailure']=Window_BattleLog[_0x4fbf70(0x92c)]['displayFailure'],Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x72c)]=function(_0x41a689){const _0x5aed04=_0x4fbf70;if(!VisuMZ[_0x5aed04(0xae2)][_0x5aed04(0x837)]['BattleLog']['ShowFailure'])return;VisuMZ[_0x5aed04(0xae2)]['Window_BattleLog_displayFailure']['call'](this,_0x41a689);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x979)]=Window_BattleLog[_0x4fbf70(0x92c)]['displayCritical'],Window_BattleLog['prototype']['displayCritical']=function(_0x37598d){const _0x3a854b=_0x4fbf70;if(!VisuMZ[_0x3a854b(0xae2)][_0x3a854b(0x837)]['BattleLog'][_0x3a854b(0x9ba)])return;VisuMZ['BattleCore']['Window_BattleLog_displayCritical']['call'](this,_0x37598d);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x58e)]=Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0xb55)],Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0xb55)]=function(_0x59cc25){const _0x36863a=_0x4fbf70;!VisuMZ[_0x36863a(0xae2)][_0x36863a(0x837)]['BattleLog'][_0x36863a(0x3b2)]?_0x36863a(0x2cb)===_0x36863a(0x4cc)?_0x5a680a+=_0x902a0a(_0x4142e4['$1']):this['push']('performMiss',_0x59cc25):VisuMZ[_0x36863a(0xae2)][_0x36863a(0x58e)][_0x36863a(0xc4a)](this,_0x59cc25);},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x952)]=Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0xc75)],Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0xc75)]=function(_0x4a2622){const _0x4fd2cb=_0x4fbf70;!VisuMZ[_0x4fd2cb(0xae2)][_0x4fd2cb(0x837)][_0x4fd2cb(0x202)][_0x4fd2cb(0x3b2)]?_0x4a2622['result']()[_0x4fd2cb(0x897)]?_0x4fd2cb(0x820)===_0x4fd2cb(0x820)?this[_0x4fd2cb(0x25b)](_0x4fd2cb(0x863),_0x4a2622):_0x281479[_0x4fd2cb(0xae2)][_0x4fd2cb(0x65a)]['call'](this,_0x5f048d):this[_0x4fd2cb(0x25b)](_0x4fd2cb(0x9a9),_0x4a2622):VisuMZ[_0x4fd2cb(0xae2)][_0x4fd2cb(0x952)][_0x4fd2cb(0xc4a)](this,_0x4a2622);},Window_BattleLog['prototype'][_0x4fbf70(0x2eb)]=function(_0x2d8bc4){const _0x2982d3=_0x4fbf70;_0x2d8bc4[_0x2982d3(0xc07)]()[_0x2982d3(0x762)]&&(_0x2d8bc4[_0x2982d3(0x878)]=0x0,_0x2d8bc4['result']()[_0x2982d3(0xd4f)]>0x0&&!_0x2d8bc4['result']()['drain']&&(_0x2d8bc4[_0x2982d3(0x878)]=_0x2d8bc4[_0x2982d3(0xc07)]()[_0x2982d3(0xd4f)],this[_0x2982d3(0x25b)](_0x2982d3(0x2db),_0x2d8bc4)),_0x2d8bc4[_0x2982d3(0xc07)]()[_0x2982d3(0xd4f)]<0x0&&this[_0x2982d3(0x25b)](_0x2982d3(0x1d6),_0x2d8bc4),VisuMZ[_0x2982d3(0xae2)][_0x2982d3(0x837)]['BattleLog'][_0x2982d3(0x720)]&&this[_0x2982d3(0x25b)]('addText',this[_0x2982d3(0x9b6)](_0x2d8bc4)));},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x55d)]=Window_BattleLog[_0x4fbf70(0x92c)]['displayMpDamage'],Window_BattleLog['prototype'][_0x4fbf70(0x573)]=function(_0x529ccb){const _0x22dbc6=_0x4fbf70;if(!VisuMZ[_0x22dbc6(0xae2)][_0x22dbc6(0x837)][_0x22dbc6(0x202)][_0x22dbc6(0x20d)])return;VisuMZ['BattleCore'][_0x22dbc6(0x55d)]['call'](this,_0x529ccb);},VisuMZ[_0x4fbf70(0xae2)]['Window_BattleLog_displayTpDamage']=Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0xcfc)],Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0xcfc)]=function(_0x369059){const _0xd0829f=_0x4fbf70;if(!VisuMZ[_0xd0829f(0xae2)][_0xd0829f(0x837)][_0xd0829f(0x202)][_0xd0829f(0x50c)])return;VisuMZ[_0xd0829f(0xae2)][_0xd0829f(0x537)][_0xd0829f(0xc4a)](this,_0x369059);},Window_BattleLog['prototype'][_0x4fbf70(0xca1)]=function(_0x4c9719){const _0x13d9e5=_0x4fbf70;_0x4c9719[_0x13d9e5(0xc07)]()[_0x13d9e5(0x982)]()&&(_0x13d9e5(0x9ae)===_0x13d9e5(0x26a)?this[_0x13d9e5(0x1f4)](_0x13d9e5(0x303)):(this['push'](_0x13d9e5(0xc49)),this[_0x13d9e5(0x257)](_0x4c9719),this[_0x13d9e5(0xd80)](_0x4c9719),this['push']('waitForNewLine')));},Window_BattleLog['prototype']['displayAddedStates']=function(_0x1068f2){const _0x466542=_0x4fbf70,_0x13d4d2=_0x1068f2[_0x466542(0xc07)](),_0x212830=_0x13d4d2['addedStateObjects']();for(const _0x2dc8a0 of _0x212830){const _0x5d8e22=_0x1068f2[_0x466542(0xc9f)]()?_0x2dc8a0['message1']:_0x2dc8a0[_0x466542(0x9db)];_0x5d8e22&&VisuMZ[_0x466542(0xae2)][_0x466542(0x837)][_0x466542(0x202)][_0x466542(0xac5)]&&(this[_0x466542(0x25b)]('fnordAddedStates'),this[_0x466542(0x25b)](_0x466542(0x941)),this['push'](_0x466542(0xc49)),this[_0x466542(0x25b)](_0x466542(0xb70),_0x5d8e22[_0x466542(0x946)](_0x1068f2[_0x466542(0x27a)]())),this[_0x466542(0x25b)](_0x466542(0x438))),_0x2dc8a0['id']===_0x1068f2[_0x466542(0xc8a)]()&&(_0x466542(0x6cd)!==_0x466542(0x6cd)?this[_0x466542(0x2dc)]():this['push'](_0x466542(0xc2a),_0x1068f2));}},Window_BattleLog['prototype'][_0x4fbf70(0xc2b)]=function(){},Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x6e8)]=function(_0x389fc4){const _0x4b6e4a=_0x4fbf70;if(!VisuMZ[_0x4b6e4a(0xae2)]['Settings']['BattleLog']['ShowRemovedState'])return;const _0x5e149c=_0x389fc4['result'](),_0x499c86=_0x5e149c[_0x4b6e4a(0x799)]();for(const _0x298dbe of _0x499c86){_0x4b6e4a(0xbe8)!==_0x4b6e4a(0xbee)?_0x298dbe[_0x4b6e4a(0xd3f)]&&(_0x4b6e4a(0x8a8)===_0x4b6e4a(0x66b)?this[_0x4b6e4a(0xa79)]=_0x1d6b2d[_0x4b6e4a(0x5b7)](_0x542ca0[_0x4b6e4a(0x999)]):(this['push'](_0x4b6e4a(0x1a3)),this[_0x4b6e4a(0x25b)](_0x4b6e4a(0x941)),this[_0x4b6e4a(0x25b)](_0x4b6e4a(0xc49)),this[_0x4b6e4a(0x25b)](_0x4b6e4a(0xb70),_0x298dbe[_0x4b6e4a(0xd3f)][_0x4b6e4a(0x946)](_0x389fc4['name']())),this[_0x4b6e4a(0x25b)]('wait'))):this[_0x4b6e4a(0x8f8)]=_0x4a67e8[_0x4b6e4a(0x8f8)];}},Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x1a3)]=function(){},Window_BattleLog[_0x4fbf70(0x92c)]['displayChangedBuffs']=function(_0x196ea7){const _0x27a9f9=_0x4fbf70,_0x41020e=VisuMZ[_0x27a9f9(0xae2)][_0x27a9f9(0x837)]['BattleLog'],_0x128756=_0x196ea7['result']();if(_0x41020e[_0x27a9f9(0x5d7)])this[_0x27a9f9(0x1f8)](_0x196ea7,_0x128756[_0x27a9f9(0x546)],TextManager[_0x27a9f9(0x85f)]);if(_0x41020e[_0x27a9f9(0xa40)])this[_0x27a9f9(0x1f8)](_0x196ea7,_0x128756[_0x27a9f9(0x7f0)],TextManager[_0x27a9f9(0x3e7)]);if(_0x41020e[_0x27a9f9(0xbd4)])this[_0x27a9f9(0x1f8)](_0x196ea7,_0x128756['removedBuffs'],TextManager[_0x27a9f9(0xa85)]);},Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x1f8)]=function(_0x21e307,_0x42540e,_0x2727a3){const _0x408d99=_0x4fbf70;for(const _0x37c70d of _0x42540e){const _0xeae13=_0x2727a3[_0x408d99(0x946)](_0x21e307['name'](),TextManager[_0x408d99(0x722)](_0x37c70d));this[_0x408d99(0x25b)](_0x408d99(0x941)),this[_0x408d99(0x25b)]('pushBaseLine'),this[_0x408d99(0x25b)](_0x408d99(0xb70),_0xeae13),this[_0x408d99(0x25b)](_0x408d99(0x438));}},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xa18)]=Window_BattleLog['prototype'][_0x4fbf70(0xb36)],Window_BattleLog[_0x4fbf70(0x92c)]['clear']=function(){const _0x416122=_0x4fbf70;VisuMZ[_0x416122(0xae2)][_0x416122(0xa18)][_0x416122(0xc4a)](this),this[_0x416122(0x91e)]();},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x7cd)]=Window_BattleLog[_0x4fbf70(0x92c)]['pushBaseLine'],Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0xc49)]=function(){const _0x2d38e5=_0x4fbf70;VisuMZ[_0x2d38e5(0xae2)][_0x2d38e5(0x7cd)][_0x2d38e5(0xc4a)](this),this[_0x2d38e5(0x91e)]();},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x5f8)]=Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x941)],Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x941)]=function(){const _0x2b316=_0x4fbf70;VisuMZ[_0x2b316(0xae2)]['Window_BattleLog_popBaseLine'][_0x2b316(0xc4a)](this),this['processRefresh'](),this[_0x2b316(0x91e)]();},VisuMZ['BattleCore'][_0x4fbf70(0x75f)]=Window_BattleLog['prototype'][_0x4fbf70(0x7d1)],Window_BattleLog['prototype'][_0x4fbf70(0x7d1)]=function(_0x575227){const _0x37a8d8=_0x4fbf70;VisuMZ['BattleCore'][_0x37a8d8(0x75f)][_0x37a8d8(0xc4a)](this,_0x575227),this[_0x37a8d8(0x91e)]();},Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x6fd)]=function(){const _0xb62a2c=_0x4fbf70;let _0x34c0ee=0x0;if(this['_baseLineStack'][_0xb62a2c(0x9d2)]>0x0){if(_0xb62a2c(0x7cb)!==_0xb62a2c(0x87d))_0x34c0ee=this['_baseLineStack'][this[_0xb62a2c(0x3ff)][_0xb62a2c(0x9d2)]-0x1];else{_0x1b62c2['VisuMZ_0_CoreEngine']&&this[_0xb62a2c(0x582)]()&&this[_0xb62a2c(0x7e4)]();const _0x472318=_0x573522[_0xb62a2c(0x9d7)](),_0x3a0adb=[];for(const _0x1f0928 of _0x472318){_0x3a0adb[_0xb62a2c(0x25b)](new _0x1398a9(_0x1f0928));}_0x3a0adb[_0xb62a2c(0x72f)](this[_0xb62a2c(0x9b4)][_0xb62a2c(0x8ff)](this));for(const _0x57104d of _0x3a0adb){this['_battlerContainer'][_0xb62a2c(0x52a)](_0x57104d);}this[_0xb62a2c(0xb45)]=_0x3a0adb;}}this[_0xb62a2c(0x575)][_0xb62a2c(0x9d2)]>_0x34c0ee?this[_0xb62a2c(0x438)]():'LuEUR'==='ZEvdm'?_0x172c06['Actor'][_0xb62a2c(0x8eb)]=![]:this[_0xb62a2c(0x91e)]();},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xbf6)]=Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x297)],Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x297)]=function(_0x387843,_0x1dea37){const _0x4e7e41=_0x4fbf70;VisuMZ['BattleCore'][_0x4e7e41(0xbf6)][_0x4e7e41(0xc4a)](this,_0x387843,_0x1dea37),this[_0x4e7e41(0x91e)]();},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x783)]=Window_BattleLog['prototype']['performAction'],Window_BattleLog['prototype'][_0x4fbf70(0x377)]=function(_0xc7dd8d,_0x4c729c){const _0x5c4a05=_0x4fbf70;VisuMZ[_0x5c4a05(0xae2)][_0x5c4a05(0x783)][_0x5c4a05(0xc4a)](this,_0xc7dd8d,_0x4c729c),this[_0x5c4a05(0x91e)]();},VisuMZ['BattleCore'][_0x4fbf70(0x9bc)]=Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x287)],Window_BattleLog['prototype'][_0x4fbf70(0x287)]=function(_0x1aa497){const _0x1036aa=_0x4fbf70;VisuMZ[_0x1036aa(0xae2)][_0x1036aa(0x9bc)]['call'](this,_0x1aa497);for(const _0x1a9aef of BattleManager['allBattleMembers']()){if(!_0x1a9aef)continue;if(_0x1a9aef[_0x1036aa(0x521)]())continue;_0x1a9aef['performActionEndMembers']();}this[_0x1036aa(0x91e)]();},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x59a)]=Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x2db)],Window_BattleLog['prototype'][_0x4fbf70(0x2db)]=function(_0xd1014f){const _0x4a1d99=_0x4fbf70;VisuMZ[_0x4a1d99(0xae2)][_0x4a1d99(0x59a)]['call'](this,_0xd1014f),this[_0x4a1d99(0x91e)]();},VisuMZ['BattleCore'][_0x4fbf70(0x3cf)]=Window_BattleLog['prototype']['performMiss'],Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x45d)]=function(_0x1c7cad){const _0xf0847a=_0x4fbf70;VisuMZ[_0xf0847a(0xae2)]['Window_BattleLog_performMiss']['call'](this,_0x1c7cad),this[_0xf0847a(0x91e)]();},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x463)]=Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x1d6)],Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x1d6)]=function(_0x562664){const _0x49b506=_0x4fbf70;VisuMZ[_0x49b506(0xae2)][_0x49b506(0x463)]['call'](this,_0x562664),this[_0x49b506(0x91e)]();},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x859)]=Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x863)],Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x863)]=function(_0x597a69){const _0x9b440c=_0x4fbf70;VisuMZ[_0x9b440c(0xae2)][_0x9b440c(0x859)][_0x9b440c(0xc4a)](this,_0x597a69),this[_0x9b440c(0x91e)]();},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0xa22)]=Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x9a9)],Window_BattleLog['prototype'][_0x4fbf70(0x9a9)]=function(_0x161a30){const _0x3e44b2=_0x4fbf70;VisuMZ['BattleCore'][_0x3e44b2(0xa22)]['call'](this,_0x161a30),this[_0x3e44b2(0x91e)]();},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x465)]=Window_BattleLog['prototype']['performCounter'],Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x5d6)]=function(_0x167de4){const _0x6a962e=_0x4fbf70;VisuMZ[_0x6a962e(0xae2)][_0x6a962e(0x465)][_0x6a962e(0xc4a)](this,_0x167de4),this['callNextMethod']();},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x28e)]=Window_BattleLog[_0x4fbf70(0x92c)]['performReflection'],Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x1ee)]=function(_0x176ffe){const _0x44a8b5=_0x4fbf70;VisuMZ[_0x44a8b5(0xae2)]['Window_BattleLog_performReflection'][_0x44a8b5(0xc4a)](this,_0x176ffe),this[_0x44a8b5(0x91e)]();},VisuMZ['BattleCore'][_0x4fbf70(0x4c7)]=Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x829)],Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x829)]=function(_0x479896,_0x341271){const _0x5f2091=_0x4fbf70;VisuMZ[_0x5f2091(0xae2)][_0x5f2091(0x4c7)][_0x5f2091(0xc4a)](this,_0x479896,_0x341271),this[_0x5f2091(0x91e)]();},VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x785)]=Window_BattleLog['prototype'][_0x4fbf70(0xc2a)],Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0xc2a)]=function(_0x5a3c35){const _0x5d10ab=_0x4fbf70;VisuMZ[_0x5d10ab(0xae2)][_0x5d10ab(0x785)][_0x5d10ab(0xc4a)](this,_0x5a3c35),this['callNextMethod']();},Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0xbfb)]=function(_0x54946a,_0x5dccd4){const _0x19f512=_0x4fbf70;_0x54946a[_0x19f512(0xbfb)](_0x5dccd4),this[_0x19f512(0x91e)]();},Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0xd68)]=function(_0x3792a8,_0x4a37ec){const _0x135ad8=_0x4fbf70,_0x2c26a3=_0x3792a8[_0x135ad8(0x9f1)]();_0x2c26a3<=0x0?SoundManager['playEnemyAttack']():this[_0x135ad8(0xd09)](_0x4a37ec,_0x2c26a3);},Window_BattleLog[_0x4fbf70(0x92c)]['applyImmortal']=function(_0xb81772,_0x385dad,_0x31123e){const _0x1f639e=_0x4fbf70,_0x89865d=[_0xb81772][_0x1f639e(0xc9b)](_0x385dad);for(const _0x30c42b of _0x89865d){if(_0x1f639e(0x318)!==_0x1f639e(0x8da)){if(!_0x30c42b)continue;_0x30c42b[_0x1f639e(0x99e)](_0x31123e);}else{const _0x1a1723=_0x59104b[_0x1f639e(0xae2)][_0x1f639e(0x837)][_0x1f639e(0x73d)];_0x3a2fb2!==_0x1f639e(0x692)&&_0x1a1723['BattleEndEvent']&&_0x369c98[_0x1f639e(0xae2)][_0x1f639e(0x95e)](_0x1a1723[_0x1f639e(0x1e2)])&&_0x4225cd['reserveCommonEvent'](_0x1a1723['BattleEndEvent']);const _0x3b8874=_0x1f639e(0x4e3)['format'](_0x5c8d8c);_0x1a1723[_0x3b8874]&&_0x1d049f[_0x1f639e(0xae2)][_0x1f639e(0x95e)](_0x1a1723[_0x3b8874])&&_0x1ced47[_0x1f639e(0x892)](_0x1a1723[_0x3b8874]);}}this[_0x1f639e(0x91e)]();},Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x857)]=function(_0x374e20){const _0x3f2414=_0x4fbf70;this[_0x3f2414(0x394)]=_0x374e20;},Window_BattleLog['prototype'][_0x4fbf70(0x9eb)]=function(_0x26bdcb,_0x30dab4){const _0x31995a=_0x4fbf70;for(const _0x3bdb5c of _0x26bdcb){if(!_0x3bdb5c)continue;_0x3bdb5c[_0x31995a(0x9eb)](_0x30dab4);}this[_0x31995a(0x91e)]();},Window_BattleLog[_0x4fbf70(0x92c)][_0x4fbf70(0x79b)]=function(_0x13b879,_0x2d8c2d,_0x3623b9,_0x154283,_0x4aec76,_0xf0bfb9){const _0x2b55d4=_0x4fbf70;_0x13b879[_0x2b55d4(0x3fa)](_0x2d8c2d,_0x3623b9,_0x154283,_0x4aec76,_0xf0bfb9,-0x1),this[_0x2b55d4(0x91e)]();},Window_BattleLog['prototype']['performMoveToTargets']=function(_0x1b6391,_0x4e3529,_0x14fc0f,_0xaf94b9,_0x4f4126,_0x75ee3,_0x2543ff){const _0x2198c3=_0x4fbf70,_0x17a1dd=Math[_0x2198c3(0x872)](..._0x4e3529[_0x2198c3(0x990)](_0x572667=>_0x572667[_0x2198c3(0xb81)]()[_0x2198c3(0xd6b)]-_0x572667[_0x2198c3(0xb81)]()['mainSpriteWidth']()/0x2)),_0x32b7fa=Math['max'](..._0x4e3529['map'](_0x36b102=>_0x36b102[_0x2198c3(0xb81)]()['_baseX']+_0x36b102[_0x2198c3(0xb81)]()['mainSpriteWidth']()/0x2)),_0xf46e47=Math['min'](..._0x4e3529[_0x2198c3(0x990)](_0xbfa756=>_0xbfa756[_0x2198c3(0xb81)]()[_0x2198c3(0x571)]-_0xbfa756[_0x2198c3(0xb81)]()[_0x2198c3(0x237)]())),_0x7ff71c=Math['max'](..._0x4e3529[_0x2198c3(0x990)](_0xbd324=>_0xbd324[_0x2198c3(0xb81)]()[_0x2198c3(0x571)])),_0x2aef97=_0x4e3529[_0x2198c3(0xa29)](_0x3968e8=>_0x3968e8[_0x2198c3(0xc9f)]())[_0x2198c3(0x9d2)],_0x9dab53=_0x4e3529[_0x2198c3(0xa29)](_0xe594c2=>_0xe594c2['isEnemy']())['length'];let _0x29f7fe=0x0,_0x1b6525=0x0;if(_0x14fc0f[_0x2198c3(0xc4b)](/front/i))_0x29f7fe=_0x2aef97>=_0x9dab53?_0x17a1dd:_0x32b7fa;else{if(_0x14fc0f[_0x2198c3(0xc4b)](/middle/i))_0x2198c3(0xa03)!=='DVkdm'?(_0x29f7fe=(_0x17a1dd+_0x32b7fa)/0x2,_0x2543ff=-0x1):(_0x2754de[_0x2198c3(0xae2)][_0x2198c3(0x6e2)][_0x2198c3(0xc4a)](this),this[_0x2198c3(0x4d0)]());else _0x14fc0f['match'](/back/i)&&('WuAOS'!==_0x2198c3(0x7f5)?(_0x49fe4b[_0x2198c3(0xae2)][_0x2198c3(0x643)][_0x2198c3(0xc4a)](this),this['createWeather'](),this[_0x2198c3(0x65f)]()):_0x29f7fe=_0x2aef97>=_0x9dab53?_0x32b7fa:_0x17a1dd);}if(_0x14fc0f[_0x2198c3(0xc4b)](/head/i))'yqRDY'!==_0x2198c3(0x9c4)?(this[_0x2198c3(0x8a7)]=0x0,this[_0x2198c3(0x5c6)]=0x0):_0x1b6525=_0xf46e47;else{if(_0x14fc0f[_0x2198c3(0xc4b)](/center/i)){_0x1b6525=(_0xf46e47+_0x7ff71c)/0x2;if(_0x1b6391['battler']())_0x1b6525+=_0x1b6391[_0x2198c3(0xb81)]()['height']/0x2;}else _0x14fc0f[_0x2198c3(0xc4b)](/base/i)&&(_0x1b6525=_0x7ff71c);}_0x1b6391['moveBattlerToPoint'](_0x29f7fe,_0x1b6525,_0xaf94b9,_0x4f4126,_0x75ee3,_0x2543ff),this['callNextMethod']();},Window_BattleLog['prototype'][_0x4fbf70(0xd55)]=function(_0xa46af5,_0x9fd5bb,_0x421ebb){const _0x42c460=_0x4fbf70;for(const _0x2144c9 of _0xa46af5){if(!_0x2144c9)continue;_0x2144c9[_0x42c460(0x968)](_0x9fd5bb,_0x421ebb);}this['callNextMethod']();};function Window_BattleMultiTarget(){const _0x3ce0cc=_0x4fbf70;this[_0x3ce0cc(0x691)](...arguments);}Window_BattleMultiTarget['prototype']=Object[_0x4fbf70(0xadc)](Window_Command[_0x4fbf70(0x92c)]),Window_BattleMultiTarget[_0x4fbf70(0x92c)]['constructor']=Window_BattleMultiTarget,VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x837)][_0x4fbf70(0x533)]=VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x837)]['MultiTarget']||{},Window_BattleMultiTarget[_0x4fbf70(0xd7c)]=VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x837)]['MultiTarget'][_0x4fbf70(0x86e)]??0x118,Window_BattleMultiTarget[_0x4fbf70(0xb0d)]=VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x837)]['MultiTarget'][_0x4fbf70(0xc6b)]??0x2,Window_BattleMultiTarget[_0x4fbf70(0x871)]=VisuMZ['BattleCore'][_0x4fbf70(0x837)]['MultiTarget'][_0x4fbf70(0x6f4)]??!![],Window_BattleMultiTarget[_0x4fbf70(0xb4b)]=VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x837)][_0x4fbf70(0x533)]['AllActorsText']??_0x4fbf70(0x225),Window_BattleMultiTarget[_0x4fbf70(0x9a6)]=VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x837)][_0x4fbf70(0x533)][_0x4fbf70(0x918)]??'All\x20Enemies',Window_BattleMultiTarget[_0x4fbf70(0x5ab)]=VisuMZ[_0x4fbf70(0xae2)]['Settings']['MultiTarget'][_0x4fbf70(0xc48)]??0x0,Window_BattleMultiTarget[_0x4fbf70(0xcb2)]=VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x837)]['MultiTarget'][_0x4fbf70(0x384)]??0x0,Window_BattleMultiTarget['ENEMY_OFFSET_X']=VisuMZ[_0x4fbf70(0xae2)][_0x4fbf70(0x837)]['MultiTarget'][_0x4fbf70(0x36e)]??0x0,Window_BattleMultiTarget[_0x4fbf70(0x86b)]=VisuMZ[_0x4fbf70(0xae2)]['Settings'][_0x4fbf70(0x533)]['EnemyOffsetY']??0x0,Window_BattleMultiTarget[_0x4fbf70(0x92c)][_0x4fbf70(0x691)]=function(_0x56821c,_0xae170e){const _0x3e1548=_0x4fbf70;this[_0x3e1548(0x95a)]=_0xae170e,Window_Command[_0x3e1548(0x92c)][_0x3e1548(0x691)][_0x3e1548(0xc4a)](this,_0x56821c),this[_0x3e1548(0x2fb)](Window_BattleMultiTarget[_0x3e1548(0xb0d)]),this[_0x3e1548(0xbe9)](),this[_0x3e1548(0x7aa)](),this[_0x3e1548(0x3fe)]();},Window_BattleMultiTarget[_0x4fbf70(0x92c)][_0x4fbf70(0x1ec)]=function(){const _0x5adc61=_0x4fbf70;return this[_0x5adc61(0x95a)];},Window_BattleMultiTarget['prototype'][_0x4fbf70(0x78a)]=function(){const _0x2eb680=_0x4fbf70;let _0x208620=this[_0x2eb680(0x1ec)]()?Window_BattleMultiTarget['ALL_ACTORS']:Window_BattleMultiTarget['ALL_ENEMIES'];if(Imported[_0x2eb680(0xcaf)]&&Window_BattleMultiTarget[_0x2eb680(0x871)]){if(_0x2eb680(0xbaa)===_0x2eb680(0x375))_0x1cf1a3=_0x3a8960>=_0x3eea70?_0x1b7f04:_0xfddeb1;else{this['_buttonKey']=this[_0x2eb680(0x1ec)]()?_0x2eb680(0x2c2):'pageup',this[_0x2eb680(0x5ff)]=TextManager['getInputButtonString'](this[_0x2eb680(0xd75)]);const _0x5b1cbe=VisuMZ['CoreEngine'][_0x2eb680(0x837)]['ButtonAssist'][_0x2eb680(0xa9e)];_0x208620=_0x5b1cbe[_0x2eb680(0x946)](this[_0x2eb680(0x5ff)],_0x208620);}}this[_0x2eb680(0xc42)](_0x208620,'selectAll');},Window_BattleMultiTarget[_0x4fbf70(0x92c)][_0x4fbf70(0x71b)]=function(_0x5d64e6){const _0x4b8cda=_0x4fbf70,_0x7247dc=this[_0x4b8cda(0x8fc)](_0x5d64e6);this[_0x4b8cda(0xd74)](),this[_0x4b8cda(0x399)](this[_0x4b8cda(0x5e7)](_0x5d64e6));const _0x320784=this[_0x4b8cda(0xbb5)](_0x5d64e6),_0x525144=this['textSizeEx'](_0x320784)[_0x4b8cda(0x606)],_0x37f35c=_0x7247dc['x']+Math[_0x4b8cda(0xb2d)]((_0x7247dc[_0x4b8cda(0x606)]-_0x525144)/0x2);this[_0x4b8cda(0x64e)](_0x320784,_0x37f35c,_0x7247dc['y'],_0x7247dc[_0x4b8cda(0x606)]);},Window_BattleMultiTarget[_0x4fbf70(0x92c)][_0x4fbf70(0x7b2)]=function(){const _0x688d6e=_0x4fbf70;Window_Command[_0x688d6e(0x92c)][_0x688d6e(0x7b2)][_0x688d6e(0xc4a)](this),this[_0x688d6e(0x54e)](),this[_0x688d6e(0x94e)]();},Window_BattleMultiTarget[_0x4fbf70(0x92c)][_0x4fbf70(0x54e)]=function(){const _0x2072e6=_0x4fbf70;this[_0x2072e6(0x737)]=this[_0x2072e6(0x370)]();},Window_BattleMultiTarget[_0x4fbf70(0x92c)][_0x4fbf70(0x370)]=function(){const _0x1c1aa2=_0x4fbf70,_0x98659c=BattleManager[_0x1c1aa2(0x206)](),_0x10366d=_0x98659c&&_0x98659c[_0x1c1aa2(0x9dd)]();if(!_0x10366d)return![];const _0x1fc023=SceneManager[_0x1c1aa2(0x32c)];if(this[_0x1c1aa2(0x1ec)]()){if(_0x1fc023[_0x1c1aa2(0xa2c)][_0x1c1aa2(0xa4a)]&&_0x1fc023[_0x1c1aa2(0xa2c)][_0x1c1aa2(0xa36)][_0x1c1aa2(0x2c2)])return!![];if(_0x1fc023['_enemyWindow']['active']&&_0x1fc023[_0x1c1aa2(0x569)][_0x1c1aa2(0xa36)][_0x1c1aa2(0x2c2)])return!![];}else{if(_0x1fc023[_0x1c1aa2(0x569)][_0x1c1aa2(0xa4a)]&&_0x1fc023[_0x1c1aa2(0x569)][_0x1c1aa2(0xa36)]['pageup'])return!![];}return![];},Window_BattleMultiTarget[_0x4fbf70(0x92c)][_0x4fbf70(0x94e)]=function(){const _0x2a9bcc=_0x4fbf70;if(!Imported[_0x2a9bcc(0xcaf)])return;this['_buttonText']!==TextManager[_0x2a9bcc(0xa9f)](this['_buttonKey'])&&this[_0x2a9bcc(0x1e5)]();},Window_BattleMultiTarget['prototype']['processTouch']=function(){const _0x2aa455=_0x4fbf70;if(this['visible']&&TouchInput[_0x2aa455(0x1e4)]()){const _0x33271f=this['hitIndex']();if(_0x33271f>=0x0){if(_0x2aa455(0xb22)!==_0x2aa455(0xb22)){if(this['_frame'])_0x8df291=_0x57ca35[_0x2aa455(0x6f0)](0x0,this['_frame'][_0x2aa455(0x389)]-0x4);}else{const _0x44892c=this[_0x2aa455(0x1ec)]()?'pagedown':'pageup';Input[_0x2aa455(0x819)](_0x44892c);}}}};